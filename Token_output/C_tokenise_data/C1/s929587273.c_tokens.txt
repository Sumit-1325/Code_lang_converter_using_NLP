ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: int
ID: gcd
LPAREN: (
ID: int
ID: x
ID: int
ID: y
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: tmp
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: int
ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: int
ID: answer
NUMBER: 0
SEMI: ;
NEWLINE: 


ID: if
LPAREN: (
ID: y
NUMBER: 0
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: return
ID: x
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: while
LPAREN: (
ID: count
ID: y
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: x
ID: count
NUMBER: 0
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: y
ID: count
NUMBER: 0
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: answer
ID: count
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: count
ID: count
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: return
ID: answer
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: a
ID: b
ID: answer
SEMI: ;
NEWLINE: 


ID: scanf
LPAREN: (
STRING: "%d %d"
ID: a
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: b
ID: a
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: answer
ID: gcd
LPAREN: (
ID: b
ID: a
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: b
ID: a
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: answer
ID: gcd
LPAREN: (
ID: a
ID: b
ID: a
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: b
ID: a
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: answer
ID: a
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: printf
LPAREN: (
STRING: "%d\n"
ID: answer
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
