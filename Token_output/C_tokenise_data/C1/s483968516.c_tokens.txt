ID: include
ID: stdio
ID: h
NEWLINE: 


ID: define
ID: MAX
NUMBER: 100000
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: i
ID: j
NUMBER: 0
ID: a
ID: b
ID: x
ID: y
ID: d
ID: MAX
ID: gcd
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d %d"
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: if
LPAREN: (
ID: x
ID: y
RPAREN: )
LBRACE: {
NEWLINE: 

ID: a
ID: y
SEMI: ;
NEWLINE: 

ID: b
ID: x
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: a
ID: x
SEMI: ;
NEWLINE: 

ID: b
ID: y
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: b
RPAREN: )
ID: gcd
ID: a
SEMI: ;
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 1
SEMI: ;
ID: i
LPAREN: (
ID: b
ID: a
RPAREN: )
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: b
ID: a
RPAREN: )
ID: i
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: d
ID: j
LPAREN: (
ID: b
ID: a
RPAREN: )
DIVIDE: /
ID: i
SEMI: ;
NEWLINE: 

ID: j
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: j
NUMBER: 0
SEMI: ;
ID: j
LPAREN: (
ID: b
ID: a
RPAREN: )
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: d
ID: j
ID: a
ID: a
ID: d
ID: j
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: gcd
ID: d
ID: j
SEMI: ;
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: continue
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
