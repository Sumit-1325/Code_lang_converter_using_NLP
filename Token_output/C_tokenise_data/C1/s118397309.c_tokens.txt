ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
SEMI: ;
NEWLINE: 


ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: N
ID: i
ID: j
ID: A
NUMBER: 100
ID: key
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: N
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: N
NUMBER: 1
NUMBER: 100
ID: N
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "Error! \n Please retype"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: N
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%lf"
ID: A
ID: i
RPAREN: )
ID: EOF
RPAREN: )
LBRACE: {
NEWLINE: 

ID: i
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: j
NUMBER: 2
SEMI: ;
ID: j
ID: N
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: key
ID: A
ID: j
SEMI: ;
NEWLINE: 

COMMENT: /* insert A[j] into the sorted sequence A[1,...,j-1] */
NEWLINE: 

ID: i
ID: j
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: i
NUMBER: 1
ID: A
ID: i
ID: key
RPAREN: )
LBRACE: {
NEWLINE: 

ID: A
ID: i
PLUS: +
NUMBER: 1
ID: A
ID: i
SEMI: ;
NEWLINE: 

ID: i
ID: i
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: A
ID: i
PLUS: +
NUMBER: 1
ID: key
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 1
SEMI: ;
ID: i
ID: j
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d "
ID: A
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
