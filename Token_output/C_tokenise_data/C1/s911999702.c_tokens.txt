ID: include
ID: stdio
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: x
ID: y
ID: ans
ID: buff
ID: max
ID: i
SEMI: ;
NEWLINE: 


ID: scanf
LPAREN: (
STRING: "%d %d"
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 


ID: if
LPAREN: (
ID: x
ID: y
RPAREN: )
LBRACE: {
NEWLINE: 

ID: buff
ID: x
SEMI: ;
NEWLINE: 

ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: y
ID: buff
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: if
LPAREN: (
ID: x
DIVIDE: /
ID: y
NUMBER: 10
RPAREN: )
LBRACE: {
NEWLINE: 

ID: buff
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: y
ID: buff
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 1
SEMI: ;
ID: i
NUMBER: 100
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
LPAREN: (
ID: x
ID: i
NUMBER: 0
ID: y
ID: i
NUMBER: 0
RPAREN: )
ID: i
ID: max
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: max
ID: y
RPAREN: )
ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: printf
LPAREN: (
STRING: "%d\n"
ID: max
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
