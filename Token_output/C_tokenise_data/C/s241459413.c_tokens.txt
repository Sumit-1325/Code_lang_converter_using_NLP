ID: include
ID: stdio
ID: h
NEWLINE: 

NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: int
ID: a
ID: b
ID: n
ID: l
ID: i
ID: j
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
NUMBER: 201
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d %d"
ID: a
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 



ID: if
LPAREN: (
ID: a
NUMBER: 0
ID: b
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: n
ID: a
PLUS: +
ID: b
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: for
LPAREN: (
ID: j
NUMBER: 0
SEMI: ;
ID: n
NUMBER: 0
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: n
ID: n
DIVIDE: /
NUMBER: 10
SEMI: ;
NEWLINE: 

ID: l
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: l
RPAREN: )
SEMI: ;
NEWLINE: 


RBRACE: }
NEWLINE: 


ID: else
LBRACE: {
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 



RBRACE: }
NEWLINE: 

NEWLINE: 

NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
