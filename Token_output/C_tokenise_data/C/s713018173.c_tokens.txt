ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: a
ID: b
ID: i
ID: keta
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d %d"
ID: a
ID: b
RPAREN: )
ID: EOF
RPAREN: )
LBRACE: {
NEWLINE: 

ID: keta
ID: a
PLUS: +
ID: b
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
NUMBER: 0
ID: keta
ID: keta
NUMBER: 10
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "1\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
NUMBER: 10
ID: keta
ID: keta
NUMBER: 100
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "2\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
NUMBER: 100
ID: keta
ID: keta
NUMBER: 1000
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "3\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
NUMBER: 1000
ID: keta
ID: keta
NUMBER: 10000
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "4\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
NUMBER: 10000
ID: keta
ID: keta
NUMBER: 100000
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "5\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
NUMBER: 100000
ID: keta
ID: keta
NUMBER: 1000000
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "6\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "7\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
