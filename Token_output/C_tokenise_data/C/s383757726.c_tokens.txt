ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: a
NUMBER: 200
SEMI: ;
NEWLINE: 

ID: int
ID: b
NUMBER: 200
SEMI: ;
NEWLINE: 

ID: int
ID: i
ID: j
SEMI: ;
NEWLINE: 

ID: char
ID: s
NUMBER: 200
SEMI: ;
NEWLINE: 

ID: int
ID: keta
ID: wa
SEMI: ;
NEWLINE: 

ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d %d"
ID: a
ID: i
ID: b
ID: i
RPAREN: )
RPAREN: )
ID: EOF
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //		printf("debug %s is read -scanf = %d\n",s,j);
NEWLINE: 

ID: i
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: i
NUMBER: 199
RPAREN: )
ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //printf("debug %d %d is read last %d\n",a[i-1],b[i-1],i-1);
NEWLINE: 

ID: for
LPAREN: (
ID: j
NUMBER: 0
SEMI: ;
ID: j
ID: i
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: keta
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: wa
ID: a
ID: j
PLUS: +
ID: b
ID: j
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
SEMI: ;
ID: wa
DIVIDE: /
NUMBER: 10
SEMI: ;
ID: keta
PLUS: +
PLUS: +
RPAREN: )
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d"
ID: keta
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: j
ID: i
MINUS: -
NUMBER: 1
RPAREN: )
ID: puts
LPAREN: (
STRING: ""
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
