ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: int
ID: a
ID: b
ID: n
ID: i
SEMI: ;
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: while
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d%d"
ID: a
ID: b
RPAREN: )
ID: EOF
RPAREN: )
LBRACE: {
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: n
ID: a
PLUS: +
ID: b
SEMI: ;
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: i
NUMBER: 1
SEMI: ;
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: while
LPAREN: (
ID: n
DIVIDE: /
NUMBER: 10
RPAREN: )
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: i
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: printf
LPAREN: (
STRING: "%d\n"
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
RBRACE: }
NEWLINE: 

NUMBER: 160
SEMI: ;
NUMBER: 160
SEMI: ;
ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
