ID: include
ID: stdio
ID: h
NEWLINE: 


ID: struct
ID: dataset
LBRACE: {
NEWLINE: 

ID: int
ID: a
ID: b
SEMI: ;
NEWLINE: 

ID: int
ID: num_digits
SEMI: ;
NEWLINE: 

RBRACE: }
SEMI: ;
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: dataset
ID: data
NUMBER: 200
SEMI: ;
NEWLINE: 

ID: int
ID: i
ID: j
ID: sum
SEMI: ;
NEWLINE: 


ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: do
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d %d"
ID: data
ID: i
ID: a
ID: data
ID: i
ID: b
RPAREN: )
ID: EOF
RPAREN: )
ID: break
SEMI: ;
NEWLINE: 

ID: else
ID: i
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 


ID: sum
ID: data
ID: i
MINUS: -
NUMBER: 1
ID: a
PLUS: +
ID: data
ID: i
MINUS: -
NUMBER: 1
ID: b
SEMI: ;
NEWLINE: 

ID: data
ID: i
MINUS: -
NUMBER: 1
ID: num_digits
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: do
LBRACE: {
NEWLINE: 

ID: data
ID: i
MINUS: -
NUMBER: 1
ID: num_digits
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: sum
DIVIDE: /
NUMBER: 10
SEMI: ;
NEWLINE: 

RBRACE: }
ID: while
LPAREN: (
ID: sum
NUMBER: 0
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: while
LPAREN: (
ID: i
NUMBER: 200
RPAREN: )
SEMI: ;
NEWLINE: 


ID: for
LPAREN: (
ID: j
NUMBER: 0
SEMI: ;
ID: j
ID: i
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
ID: printf
LPAREN: (
STRING: "%d\n"
ID: data
ID: j
ID: num_digits
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
