ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: int
ID: compare_int
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: return
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
MINUS: -
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: n
ID: max
NUMBER: 1
ID: semimax
NUMBER: 1
ID: i
SEMI: ;
NEWLINE: 

ID: int
ID: a
NUMBER: 200001
ID: b
NUMBER: 200001
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: a
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: b
ID: i
ID: a
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: qsort
LPAREN: (
ID: b
ID: n
ID: sizeof
LPAREN: (
ID: int
RPAREN: )
ID: compare_int
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: max
ID: b
ID: n
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: semimax
ID: b
ID: n
MINUS: -
NUMBER: 2
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: i
ID: max
RPAREN: )
ID: printf
LPAREN: (
STRING: "%d\n"
ID: semimax
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
ID: printf
LPAREN: (
STRING: "%d\n"
ID: max
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
