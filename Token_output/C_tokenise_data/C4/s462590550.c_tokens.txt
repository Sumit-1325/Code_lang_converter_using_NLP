ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: stdbool
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 

ID: define
ID: Max
LPAREN: (
ID: a
ID: b
RPAREN: )
LPAREN: (
LPAREN: (
ID: a
RPAREN: )
LPAREN: (
ID: b
RPAREN: )
LPAREN: (
ID: a
RPAREN: )
LPAREN: (
ID: b
RPAREN: )
RPAREN: )
NEWLINE: 

ID: define
ID: Min
LPAREN: (
ID: a
ID: b
RPAREN: )
LPAREN: (
LPAREN: (
ID: a
RPAREN: )
LPAREN: (
ID: b
RPAREN: )
LPAREN: (
ID: b
RPAREN: )
LPAREN: (
ID: a
RPAREN: )
RPAREN: )
NEWLINE: 

ID: define
ID: REP
LPAREN: (
ID: i
ID: n
RPAREN: )
ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

ID: define
ID: INF
NUMBER: 1000000000000
COMMENT: //10^12
NEWLINE: 

ID: define
ID: MOD
NUMBER: 1000000007
NEWLINE: 

ID: typedef
ID: long
ID: long
ID: ll
SEMI: ;
NEWLINE: 


ID: int
ID: sort
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
MINUS: -
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
NEWLINE: 

ID: main
LPAREN: (
ID: int
ID: argc
ID: char
TIMES: *
ID: argv
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: n
SEMI: ;
NEWLINE: 

ID: int
ID: a
NUMBER: 200000
SEMI: ;
ID: int
ID: b
NUMBER: 200000
SEMI: ;
NEWLINE: 

ID: int
ID: max
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: a
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: b
ID: i
ID: a
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: qsort
LPAREN: (
ID: b
ID: n
ID: sizeof
LPAREN: (
ID: int
RPAREN: )
ID: sort
RPAREN: )
SEMI: ;
NEWLINE: 


ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: i
ID: b
NUMBER: 0
RPAREN: )
ID: printf
LPAREN: (
STRING: "%d\n"
ID: b
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
ID: printf
LPAREN: (
STRING: "%d\n"
ID: b
NUMBER: 0
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


NEWLINE: 

