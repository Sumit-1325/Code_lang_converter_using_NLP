ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: n
SEMI: ;
NEWLINE: 

ID: int
TIMES: *
ID: arry
ID: NULL
SEMI: ;
NEWLINE: 

ID: int
ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: j
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: max
NUMBER: 0
SEMI: ;
NEWLINE: 


ID: if
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
NUMBER: 0
RPAREN: )
NEWLINE: 

SEMI: ;
NEWLINE: 

ID: arry
ID: malloc
LPAREN: (
ID: n
TIMES: *
ID: sizeof
LPAREN: (
ID: int
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

ID: if
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d"
ID: arry
ID: i
RPAREN: )
NUMBER: 0
RPAREN: )
SEMI: ;
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: for
LPAREN: (
ID: j
NUMBER: 0
SEMI: ;
ID: j
ID: n
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: i
ID: j
RPAREN: )
NEWLINE: 

ID: continue
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: arry
ID: j
ID: max
RPAREN: )
NEWLINE: 

ID: max
ID: arry
ID: j
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: max
RPAREN: )
SEMI: ;
NEWLINE: 

ID: max
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

