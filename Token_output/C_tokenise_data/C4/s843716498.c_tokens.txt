ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: stdint
ID: h
NEWLINE: 

ID: include
ID: inttypes
ID: h
NEWLINE: 


ID: typedef
ID: struct
ID: binary_heap
LBRACE: {
NEWLINE: 

ID: void
TIMES: *
ID: array
SEMI: ;
NEWLINE: 

ID: size_t
ID: heap_size
SEMI: ;
NEWLINE: 

ID: size_t
ID: max_size
SEMI: ;
NEWLINE: 

ID: size_t
ID: val_size
SEMI: ;
NEWLINE: 

ID: int
LPAREN: (
TIMES: *
ID: cmp
RPAREN: )
LPAREN: (
ID: const
ID: void
TIMES: *
ID: const
ID: void
TIMES: *
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: heap
SEMI: ;
NEWLINE: 


ID: heap
TIMES: *
ID: new_binary_heap
LPAREN: (
ID: const
ID: size_t
ID: val_size
ID: int
LPAREN: (
TIMES: *
ID: cmp_func
RPAREN: )
LPAREN: (
ID: const
ID: void
TIMES: *
ID: const
ID: void
TIMES: *
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: heap
TIMES: *
ID: h
LPAREN: (
ID: heap
TIMES: *
RPAREN: )
ID: calloc
LPAREN: (
NUMBER: 1
ID: sizeof
LPAREN: (
ID: heap
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: h
MINUS: -
ID: array
ID: malloc
LPAREN: (
ID: val_size
TIMES: *
LPAREN: (
NUMBER: 1
PLUS: +
NUMBER: 1
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: h
MINUS: -
ID: heap_size
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: h
MINUS: -
ID: max_size
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: h
MINUS: -
ID: val_size
ID: val_size
SEMI: ;
NEWLINE: 

ID: h
MINUS: -
ID: cmp
ID: cmp_func
SEMI: ;
NEWLINE: 

ID: return
ID: h
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int32_t
ID: get_heap_size
LPAREN: (
ID: const
ID: heap
TIMES: *
ID: h
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
ID: h
MINUS: -
ID: heap_size
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: static
ID: inline
ID: void
ID: heap_func_swap
LPAREN: (
ID: void
TIMES: *
ID: restrict
ID: a
ID: void
TIMES: *
ID: restrict
ID: b
ID: size_t
ID: val_size
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: val_size
NUMBER: 7
RPAREN: )
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: uint64_t
TIMES: *
ID: p
LPAREN: (
ID: uint64_t
TIMES: *
RPAREN: )
ID: a
SEMI: ;
NEWLINE: 

ID: uint64_t
TIMES: *
ID: q
LPAREN: (
ID: uint64_t
TIMES: *
RPAREN: )
ID: b
SEMI: ;
NEWLINE: 

ID: val_size
DIVIDE: /
ID: sizeof
LPAREN: (
ID: uint64_t
RPAREN: )
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: val_size
MINUS: -
MINUS: -
RPAREN: )
LBRACE: {
NEWLINE: 

ID: const
ID: uint64_t
ID: tmp
TIMES: *
ID: p
SEMI: ;
NEWLINE: 

TIMES: *
ID: p
PLUS: +
PLUS: +
TIMES: *
ID: q
SEMI: ;
NEWLINE: 

TIMES: *
ID: q
PLUS: +
PLUS: +
ID: tmp
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: uint8_t
TIMES: *
ID: p
LPAREN: (
ID: uint8_t
TIMES: *
RPAREN: )
ID: a
SEMI: ;
NEWLINE: 

ID: uint8_t
TIMES: *
ID: q
LPAREN: (
ID: uint8_t
TIMES: *
RPAREN: )
ID: b
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: val_size
MINUS: -
MINUS: -
RPAREN: )
LBRACE: {
NEWLINE: 

ID: const
ID: uint8_t
ID: tmp
TIMES: *
ID: p
SEMI: ;
NEWLINE: 

TIMES: *
ID: p
PLUS: +
PLUS: +
TIMES: *
ID: q
SEMI: ;
NEWLINE: 

TIMES: *
ID: q
PLUS: +
PLUS: +
ID: tmp
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: static
ID: inline
ID: void
ID: heap_func_copy
LPAREN: (
ID: void
TIMES: *
ID: restrict
ID: dst
ID: const
ID: void
TIMES: *
ID: restrict
ID: src
ID: size_t
ID: val_size
RPAREN: )
LBRACE: {
NEWLINE: 

ID: const
ID: uint8_t
TIMES: *
ID: p
LPAREN: (
ID: const
ID: uint8_t
TIMES: *
RPAREN: )
ID: src
SEMI: ;
NEWLINE: 

ID: uint8_t
TIMES: *
ID: q
LPAREN: (
ID: uint8_t
TIMES: *
RPAREN: )
ID: dst
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: val_size
MINUS: -
MINUS: -
RPAREN: )
LBRACE: {
NEWLINE: 

TIMES: *
ID: q
PLUS: +
PLUS: +
TIMES: *
ID: p
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: void
ID: push
LPAREN: (
ID: heap
TIMES: *
ID: const
ID: h
ID: const
ID: void
TIMES: *
ID: val
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: h
MINUS: -
ID: heap_size
ID: h
MINUS: -
ID: max_size
RPAREN: )
LBRACE: {
NEWLINE: 

ID: h
MINUS: -
ID: max_size
NUMBER: 2
TIMES: *
ID: h
MINUS: -
ID: max_size
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: h
MINUS: -
ID: array
ID: realloc
LPAREN: (
ID: h
MINUS: -
ID: array
ID: h
MINUS: -
ID: val_size
TIMES: *
LPAREN: (
ID: h
MINUS: -
ID: max_size
PLUS: +
NUMBER: 1
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: h
MINUS: -
ID: heap_size
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: uint8_t
TIMES: *
ID: const
ID: array
LPAREN: (
ID: uint8_t
TIMES: *
RPAREN: )
ID: h
MINUS: -
ID: array
SEMI: ;
NEWLINE: 

ID: size_t
ID: k
ID: h
MINUS: -
ID: heap_size
SEMI: ;
NEWLINE: 

ID: const
ID: size_t
ID: val_size
ID: h
MINUS: -
ID: val_size
SEMI: ;
NEWLINE: 

ID: int
LPAREN: (
TIMES: *
ID: const
ID: cmp
RPAREN: )
LPAREN: (
ID: const
ID: void
TIMES: *
ID: const
ID: void
TIMES: *
RPAREN: )
ID: h
MINUS: -
ID: cmp
SEMI: ;
NEWLINE: 

ID: heap_func_copy
LPAREN: (
ID: array
PLUS: +
ID: k
TIMES: *
ID: val_size
ID: val
ID: val_size
RPAREN: )
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: k
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: size_t
ID: parent
ID: k
DIVIDE: /
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: cmp
LPAREN: (
ID: array
PLUS: +
ID: parent
TIMES: *
ID: val_size
ID: array
PLUS: +
ID: k
TIMES: *
ID: val_size
RPAREN: )
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: heap_func_swap
LPAREN: (
ID: array
PLUS: +
ID: parent
TIMES: *
ID: val_size
ID: array
PLUS: +
ID: k
TIMES: *
ID: val_size
ID: val_size
RPAREN: )
SEMI: ;
NEWLINE: 

ID: k
ID: parent
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: void
ID: pop
LPAREN: (
ID: heap
TIMES: *
ID: const
ID: h
ID: void
TIMES: *
ID: res
RPAREN: )
LBRACE: {
NEWLINE: 

ID: uint8_t
TIMES: *
ID: const
ID: array
LPAREN: (
ID: uint8_t
TIMES: *
RPAREN: )
ID: h
MINUS: -
ID: array
SEMI: ;
NEWLINE: 

ID: const
ID: size_t
ID: val_size
ID: h
MINUS: -
ID: val_size
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: res
ID: NULL
RPAREN: )
LBRACE: {
NEWLINE: 

ID: heap_func_copy
LPAREN: (
ID: res
ID: array
PLUS: +
ID: val_size
ID: val_size
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: heap_func_copy
LPAREN: (
ID: array
PLUS: +
ID: val_size
ID: array
PLUS: +
ID: val_size
TIMES: *
ID: h
MINUS: -
ID: heap_size
ID: val_size
RPAREN: )
SEMI: ;
NEWLINE: 

ID: h
MINUS: -
ID: heap_size
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: int
LPAREN: (
TIMES: *
ID: const
ID: cmp
RPAREN: )
LPAREN: (
ID: const
ID: void
TIMES: *
ID: const
ID: void
TIMES: *
RPAREN: )
ID: h
MINUS: -
ID: cmp
SEMI: ;
NEWLINE: 

ID: const
ID: size_t
ID: n
ID: h
MINUS: -
ID: heap_size
SEMI: ;
NEWLINE: 

ID: size_t
ID: k
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
NUMBER: 2
TIMES: *
ID: k
PLUS: +
NUMBER: 1
ID: n
RPAREN: )
LBRACE: {
NEWLINE: 

ID: const
ID: int
ID: c
ID: cmp
LPAREN: (
ID: array
PLUS: +
ID: val_size
TIMES: *
NUMBER: 2
TIMES: *
ID: k
ID: array
PLUS: +
ID: val_size
TIMES: *
LPAREN: (
NUMBER: 2
TIMES: *
ID: k
PLUS: +
NUMBER: 1
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: const
ID: size_t
ID: next
NUMBER: 2
TIMES: *
ID: k
PLUS: +
LPAREN: (
ID: c
NUMBER: 0
NUMBER: 0
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: cmp
LPAREN: (
ID: array
PLUS: +
ID: val_size
TIMES: *
ID: k
ID: array
PLUS: +
ID: val_size
TIMES: *
ID: next
RPAREN: )
NUMBER: 0
RPAREN: )
ID: return
SEMI: ;
NEWLINE: 

ID: heap_func_swap
LPAREN: (
ID: array
PLUS: +
ID: val_size
TIMES: *
ID: k
ID: array
PLUS: +
ID: val_size
TIMES: *
ID: next
ID: val_size
RPAREN: )
SEMI: ;
NEWLINE: 

ID: k
ID: next
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
NUMBER: 2
TIMES: *
ID: k
ID: n
ID: cmp
LPAREN: (
ID: array
PLUS: +
ID: val_size
TIMES: *
ID: k
ID: array
PLUS: +
ID: val_size
TIMES: *
NUMBER: 2
TIMES: *
ID: k
RPAREN: )
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: heap_func_swap
LPAREN: (
ID: array
PLUS: +
ID: val_size
TIMES: *
ID: k
ID: array
PLUS: +
ID: val_size
TIMES: *
NUMBER: 2
TIMES: *
ID: k
ID: val_size
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: typedef
ID: int32_t
ID: i32
SEMI: ;
NEWLINE: 


ID: define
ID: ALLOC
LPAREN: (
ID: size
ID: type
RPAREN: )
LPAREN: (
LPAREN: (
ID: type
TIMES: *
RPAREN: )
ID: calloc
LPAREN: (
LPAREN: (
ID: size
RPAREN: )
ID: sizeof
LPAREN: (
ID: type
RPAREN: )
RPAREN: )
RPAREN: )
NEWLINE: 


ID: int
ID: cmp_int
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: i32
ID: d
TIMES: *
LPAREN: (
ID: i32
TIMES: *
RPAREN: )
ID: a
MINUS: -
TIMES: *
LPAREN: (
ID: i32
TIMES: *
RPAREN: )
ID: b
SEMI: ;
NEWLINE: 

ID: return
ID: d
NUMBER: 0
NUMBER: 0
ID: d
NUMBER: 0
MINUS: -
NUMBER: 1
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: void
ID: run
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: i32
ID: n
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%"
ID: SCNi32
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: i32
TIMES: *
ID: a
ID: ALLOC
LPAREN: (
ID: n
ID: i32
RPAREN: )
SEMI: ;
NEWLINE: 

ID: heap
TIMES: *
ID: h
ID: new_binary_heap
LPAREN: (
ID: sizeof
LPAREN: (
ID: i32
RPAREN: )
ID: cmp_int
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i32
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
PLUS: +
PLUS: +
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%"
ID: SCNi32
ID: a
PLUS: +
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: push
LPAREN: (
ID: h
ID: a
PLUS: +
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: get_heap_size
LPAREN: (
ID: h
RPAREN: )
NUMBER: 2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: i32
ID: v
SEMI: ;
NEWLINE: 

ID: pop
LPAREN: (
ID: h
ID: v
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: i32
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: pop
LPAREN: (
ID: h
ID: x
RPAREN: )
SEMI: ;
NEWLINE: 

ID: pop
LPAREN: (
ID: h
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i32
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
PLUS: +
PLUS: +
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: i32
ID: v
ID: a
ID: i
ID: y
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%"
ID: PRIi32
STRING: "\n"
ID: v
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: run
LPAREN: (
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

