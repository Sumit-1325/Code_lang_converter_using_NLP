ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: void
ID: swap
LPAREN: (
ID: long
TIMES: *
ID: x
ID: long
TIMES: *
ID: y
RPAREN: )
LBRACE: {
NEWLINE: 

ID: long
ID: int
ID: tmp
SEMI: ;
NEWLINE: 

ID: tmp
TIMES: *
ID: x
SEMI: ;
NEWLINE: 

TIMES: *
ID: x
TIMES: *
ID: y
SEMI: ;
NEWLINE: 

TIMES: *
ID: y
ID: tmp
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: long
ID: part
LPAREN: (
ID: long
ID: box
ID: long
ID: left
ID: long
ID: right
RPAREN: )
LBRACE: {
NEWLINE: 

ID: long
ID: i
ID: j
ID: pin
SEMI: ;
NEWLINE: 

ID: i
ID: left
SEMI: ;
NEWLINE: 

ID: j
ID: right
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: pin
ID: left
SEMI: ;
NEWLINE: 

ID: do
LBRACE: {
NEWLINE: 

ID: do
LBRACE: {
ID: i
PLUS: +
PLUS: +
SEMI: ;
RBRACE: }
ID: while
LPAREN: (
ID: box
ID: i
ID: box
ID: pin
RPAREN: )
SEMI: ;
NEWLINE: 

ID: do
LBRACE: {
ID: j
MINUS: -
MINUS: -
SEMI: ;
RBRACE: }
ID: while
LPAREN: (
ID: box
ID: pin
ID: box
ID: j
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: i
ID: j
RPAREN: )
LBRACE: {
NEWLINE: 

ID: swap
LPAREN: (
ID: box
ID: i
ID: box
ID: j
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
ID: while
LPAREN: (
ID: i
ID: j
RPAREN: )
SEMI: ;
NEWLINE: 

ID: swap
LPAREN: (
ID: box
ID: pin
ID: box
ID: j
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
ID: j
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: void
ID: quicksort
LPAREN: (
ID: long
ID: box
ID: long
ID: left
ID: long
ID: right
RPAREN: )
LBRACE: {
NEWLINE: 

ID: long
ID: pin
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: left
ID: right
RPAREN: )
LBRACE: {
NEWLINE: 

ID: pin
ID: part
LPAREN: (
ID: box
ID: left
ID: right
RPAREN: )
SEMI: ;
NEWLINE: 

ID: quicksort
LPAREN: (
ID: box
ID: left
ID: pin
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: quicksort
LPAREN: (
ID: box
ID: pin
PLUS: +
NUMBER: 1
ID: right
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: long
ID: N
SEMI: ;
NEWLINE: 

ID: long
TIMES: *
ID: a
TIMES: *
ID: b
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%ld"
ID: N
RPAREN: )
SEMI: ;
NEWLINE: 

ID: a
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: malloc
LPAREN: (
ID: sizeof
LPAREN: (
ID: long
RPAREN: )
TIMES: *
ID: N
RPAREN: )
SEMI: ;
NEWLINE: 

ID: b
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: malloc
LPAREN: (
ID: sizeof
LPAREN: (
ID: long
RPAREN: )
TIMES: *
ID: N
RPAREN: )
SEMI: ;
NEWLINE: 

ID: long
ID: i
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%ld"
ID: a
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: b
ID: i
ID: a
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: quicksort
LPAREN: (
ID: b
NUMBER: 0
ID: N
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: i
ID: b
ID: N
MINUS: -
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%ld\n"
ID: b
ID: N
MINUS: -
NUMBER: 2
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%ld\n"
ID: b
ID: N
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 


RBRACE: }
