ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: int
ID: compare_int
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
RPAREN: )
ID: return
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
RPAREN: )
ID: return
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: n
ID: i
ID: max
ID: j
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: int
ID: a
ID: n
SEMI: ;
NEWLINE: 

ID: j
NUMBER: 0
ID: max
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: a
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: max
ID: a
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
ID: a
ID: i
SEMI: ;
NEWLINE: 

ID: j
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: qsort
LPAREN: (
ID: a
ID: n
ID: sizeof
LPAREN: (
ID: int
RPAREN: )
ID: compare_int
RPAREN: )
SEMI: ;
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: i
ID: j
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: a
ID: n
MINUS: -
NUMBER: 2
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: max
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
