ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: int
ID: cmpnum
LPAREN: (
ID: const
ID: void
TIMES: *
ID: n1
ID: const
ID: void
TIMES: *
ID: n2
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
TIMES: *
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: n1
TIMES: *
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: n2
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: return
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
TIMES: *
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: n1
TIMES: *
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: n2
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: return
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 


ID: long
ID: n
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%ld"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: long
ID: a
ID: n
SEMI: ;
NEWLINE: 

ID: long
ID: sort
ID: n
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: long
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%ld"
ID: a
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: sort
ID: i
ID: a
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: qsort
LPAREN: (
ID: sort
ID: n
ID: sizeof
LPAREN: (
ID: long
RPAREN: )
ID: cmpnum
RPAREN: )
SEMI: ;
NEWLINE: 

ID: long
ID: first
ID: sort
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: first_count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: long
ID: second
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: sort
NUMBER: 1
ID: first
RPAREN: )
LBRACE: {
NEWLINE: 

ID: first_count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: second
ID: sort
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: for
LPAREN: (
ID: long
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: i
ID: first
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%ld\n"
ID: first
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: first_count
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%ld\n"
ID: first
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%ld\n"
ID: second
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
