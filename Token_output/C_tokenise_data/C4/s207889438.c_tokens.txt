ID: include
ID: stdio
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: n
ID: i
ID: j
ID: tmp
SEMI: ;
NEWLINE: 

ID: int
ID: a
NUMBER: 200001
SEMI: ;
NEWLINE: 

ID: int
ID: sort
NUMBER: 200001
SEMI: ;
NEWLINE: 

ID: int
ID: big
NUMBER: 2
ID: bignum
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: a
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: sort
ID: i
ID: a
ID: i
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: i
ID: big
RPAREN: )
LBRACE: {
NEWLINE: 

ID: big
ID: a
ID: i
SEMI: ;
NEWLINE: 

ID: bignum
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
PLUS: +
PLUS: +
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: for
LPAREN: (
ID: j
ID: i
PLUS: +
NUMBER: 1
SEMI: ;
ID: j
ID: n
SEMI: ;
PLUS: +
PLUS: +
ID: j
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: sort
ID: i
ID: sort
ID: j
RPAREN: )
LBRACE: {
NEWLINE: 

ID: tmp
ID: sort
ID: i
SEMI: ;
NEWLINE: 

ID: sort
ID: i
ID: sort
ID: j
SEMI: ;
NEWLINE: 

ID: sort
ID: j
ID: tmp
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: bignum
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: sort
ID: n
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: sort
ID: n
MINUS: -
NUMBER: 2
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


RBRACE: }
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
