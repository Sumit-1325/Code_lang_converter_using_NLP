ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: void
ID: qsort
LPAREN: (
NEWLINE: 

ID: void
TIMES: *
ID: base
ID: size_t
ID: num
ID: size_t
ID: size
NEWLINE: 

ID: int
LPAREN: (
TIMES: *
ID: compare
RPAREN: )
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
NEWLINE: 

RPAREN: )
SEMI: ;
NEWLINE: 

ID: int
ID: desc
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
MINUS: -
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: n
SEMI: ;
NEWLINE: 


ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 


ID: int
ID: i
ID: j
SEMI: ;
NEWLINE: 

ID: int
ID: point
NUMBER: 200000
SEMI: ;
NEWLINE: 

NEWLINE: 

NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: point
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 



DIVIDE: /
TIMES: *
ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
DIVIDE: /
NUMBER: 2
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: kizyun
ID: i
ID: point
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: qsort
LPAREN: (
ID: point
ID: sizeof
LPAREN: (
ID: point
RPAREN: )
DIVIDE: /
ID: sizeof
LPAREN: (
TIMES: *
ID: point
RPAREN: )
ID: sizeof
LPAREN: (
TIMES: *
ID: point
RPAREN: )
ID: desc
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
DIVIDE: /
NUMBER: 2
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: kizyun
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: point
ID: i
ID: kizyun
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: point
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: j
ID: i
SEMI: ;
ID: j
ID: n
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: point
ID: j
ID: kizyun
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: point
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

RBRACE: }
TIMES: *
DIVIDE: /
NEWLINE: 


ID: int
ID: max
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: nextmax
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: a
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: b
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: temp
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: if
LPAREN: (
ID: max
ID: point
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: temp
ID: max
SEMI: ;
NEWLINE: 

ID: max
ID: point
ID: i
SEMI: ;
NEWLINE: 

ID: nextmax
ID: temp
SEMI: ;
NEWLINE: 

ID: temp
ID: a
SEMI: ;
NEWLINE: 

ID: a
ID: i
SEMI: ;
NEWLINE: 

ID: b
ID: temp
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: nextmax
ID: point
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: nextmax
ID: point
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 



ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: max
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: nextmax
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 




NEWLINE: 


NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
