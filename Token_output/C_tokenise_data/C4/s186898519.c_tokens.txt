ID: include
ID: stdio
ID: h
NEWLINE: 


ID: int
ID: tiisakunaihou
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
ID: a
ID: b
ID: a
ID: b
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: N
SEMI: ;
NEWLINE: 

ID: int
ID: A
NUMBER: 271828
SEMI: ;
NEWLINE: 


ID: int
ID: asumisu
NUMBER: 271828
ID: mizuhasu
NUMBER: 271828
SEMI: ;
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: i
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d"
ID: N
RPAREN: )
NUMBER: 1
RPAREN: )
ID: return
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 1
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: scanf
LPAREN: (
STRING: "%d"
ID: A
ID: i
RPAREN: )
NUMBER: 1
RPAREN: )
ID: return
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: asumisu
NUMBER: 0
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 1
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: asumisu
ID: i
ID: tiisakunaihou
LPAREN: (
ID: asumisu
ID: i
MINUS: -
NUMBER: 1
ID: A
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: mizuhasu
ID: N
PLUS: +
NUMBER: 1
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
ID: N
SEMI: ;
ID: i
NUMBER: 1
SEMI: ;
ID: i
MINUS: -
MINUS: -
RPAREN: )
LBRACE: {
NEWLINE: 

ID: mizuhasu
ID: i
ID: tiisakunaihou
LPAREN: (
ID: mizuhasu
ID: i
PLUS: +
NUMBER: 1
ID: A
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 1
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: tiisakunaihou
LPAREN: (
ID: asumisu
ID: i
MINUS: -
NUMBER: 1
ID: mizuhasu
ID: i
PLUS: +
NUMBER: 1
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

