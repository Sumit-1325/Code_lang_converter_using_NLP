ID: include
STRING: "stdio.h"
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

DIVIDE: /
TIMES: *
ID: int
ID: a
ID: b
ID: c
SEMI: ;
NEWLINE: 

ID: char
ID: x
ID: y
ID: z
SEMI: ;
NEWLINE: 

COMMENT: //  scanf("%c%c%c", &x, &y, &z);                                                                                                                      
NEWLINE: 

ID: int
ID: N
ID: a
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d %d"
ID: N
ID: a
RPAREN: )
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: a
RPAREN: )
SEMI: ;
NEWLINE: 

ID: int
ID: d
LPAREN: (
ID: int
RPAREN: )
NUMBER: 3
NUMBER: 8
SEMI: ;
NEWLINE: 

TIMES: *
DIVIDE: /
NEWLINE: 

ID: int
ID: array
NUMBER: 20000
SEMI: ;
NEWLINE: 

ID: int
ID: N
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: N
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: array
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: max
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: j
NUMBER: 0
SEMI: ;
ID: j
ID: N
SEMI: ;
ID: j
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: i
ID: j
RPAREN: )
LBRACE: {
NEWLINE: 

ID: continue
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: max
ID: array
ID: j
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
ID: array
ID: j
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: max
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

