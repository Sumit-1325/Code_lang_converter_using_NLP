ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: typedef
ID: struct
LBRACE: {
NEWLINE: 

ID: int
ID: num
SEMI: ;
NEWLINE: 

ID: int
ID: ord
SEMI: ;
NEWLINE: 

RBRACE: }
ID: A_order
SEMI: ;
NEWLINE: 



ID: int
ID: compare_int
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
LPAREN: (
LPAREN: (
ID: A_order
TIMES: *
RPAREN: )
ID: b
RPAREN: )
MINUS: -
ID: num
MINUS: -
LPAREN: (
LPAREN: (
ID: A_order
TIMES: *
RPAREN: )
ID: a
RPAREN: )
MINUS: -
ID: num
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: N
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: N
RPAREN: )
SEMI: ;
NEWLINE: 

ID: A_order
ID: A
ID: N
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: A
ID: i
ID: num
RPAREN: )
SEMI: ;
NEWLINE: 

ID: A
ID: i
ID: ord
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: qsort
LPAREN: (
ID: A
ID: N
ID: sizeof
LPAREN: (
ID: A_order
RPAREN: )
ID: compare_int
RPAREN: )
SEMI: ;
COMMENT: // 降順
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: N
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: i
ID: A
NUMBER: 0
ID: ord
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: A
NUMBER: 1
ID: num
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: printf
LPAREN: (
STRING: "%d\n"
ID: A
NUMBER: 0
ID: num
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
