ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: main
LPAREN: (
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: i
ID: l
ID: x
ID: j
ID: f
SEMI: ;
NEWLINE: 

ID: char
ID: a
NUMBER: 15
ID: b
NUMBER: 15
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: a
RPAREN: )
SEMI: ;
NEWLINE: 

ID: l
ID: strlen
LPAREN: (
ID: a
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
ID: j
NUMBER: 0
ID: f
NUMBER: 0
SEMI: ;
ID: i
ID: l
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: a
ID: i
ID: B
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: b
ID: j
ID: a
ID: i
SEMI: ;
NEWLINE: 

ID: j
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: f
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: j
NUMBER: 0
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: j
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: f
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: x
ID: strlen
LPAREN: (
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

ID: x
ID: x
MINUS: -
ID: f
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: j
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: b
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
