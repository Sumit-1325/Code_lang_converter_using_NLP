COMMENT: /*ex9_1 hightierra*/
NEWLINE: 

ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: define
ID: SIZE
NUMBER: 1000
NEWLINE: 


COMMENT: // スタックの定義
NEWLINE: 

ID: typedef
ID: struct
LBRACE: {
NEWLINE: 

ID: int
ID: size
SEMI: ;
NEWLINE: 

ID: int
ID: count
SEMI: ;
NEWLINE: 

ID: char
ID: data
ID: SIZE
SEMI: ;
NEWLINE: 

ID: char
TIMES: *
ID: top
SEMI: ;
NEWLINE: 

RBRACE: }
ID: stack
SEMI: ;
NEWLINE: 


COMMENT: // 初期化
NEWLINE: 

ID: void
ID: initialize
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: count
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: size
ID: SIZE
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
LPAREN: (
ID: stk
MINUS: -
ID: data
NUMBER: 0
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // pushとpopの定義
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: pushdata
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
ID: stk
MINUS: -
ID: size
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "Error: Stack overflow."
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: top
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
ID: pushdata
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: popdata
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "Error: Stack underflow."
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: popdata
TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: count
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: return
ID: popdata
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 



ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stack
ID: input
SEMI: ;
NEWLINE: 

ID: char
ID: key
ID: SIZE
ID: popdata
SEMI: ;
NEWLINE: 

ID: int
ID: i
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: initialize
LPAREN: (
ID: input
RPAREN: )
SEMI: ;
NEWLINE: 


COMMENT: // 入力データをkeyにいれる
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: key
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 

COMMENT: // 入力データ分ループし、0,1,Bによってpushかpop
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: strlen
LPAREN: (
ID: key
RPAREN: )
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: key
ID: i
ID: B
RPAREN: )
LBRACE: {
NEWLINE: 

ID: push
LPAREN: (
ID: input
ID: key
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: key
ID: i
ID: B
LPAREN: (
ID: input
ID: count
RPAREN: )
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: popdata
ID: pop
LPAREN: (
ID: input
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: strlen
LPAREN: (
ID: key
RPAREN: )
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: input
ID: data
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
