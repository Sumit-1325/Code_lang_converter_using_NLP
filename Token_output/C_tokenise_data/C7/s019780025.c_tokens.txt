DIVIDE: /
TIMES: *
ID: ex
NUMBER: 9
ID: _1
NEWLINE: 

ID: kanon
TIMES: *
DIVIDE: /
NEWLINE: 


ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

COMMENT: //スタックに格納するデータの最大数
NEWLINE: 

ID: define
ID: SIZE
NUMBER: 1000
NEWLINE: 


COMMENT: //スタックの定義
NEWLINE: 

ID: typedef
ID: struct
ID: stack
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: size
SEMI: ;
NEWLINE: 

ID: int
ID: count
SEMI: ;
NEWLINE: 

ID: char
ID: data
ID: SIZE
SEMI: ;
NEWLINE: 

ID: char
TIMES: *
ID: top
SEMI: ;
NEWLINE: 

RBRACE: }
ID: stack
SEMI: ;
NEWLINE: 


COMMENT: //スタックの初期化
NEWLINE: 

ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: count
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: size
ID: SIZE
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
LPAREN: (
ID: stk
MINUS: -
ID: data
ID: SIZE
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: //データの追加
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: elem
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
ID: stk
MINUS: -
ID: size
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: fprintf
LPAREN: (
ID: stderr
STRING: "Error: stack overflow. (x=%c)\n"
ID: elem
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: top
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
ID: elem
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: //データの取り出し
NEWLINE: 

ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: char
ID: latest
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
NUMBER: 0
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: fprintf
LPAREN: (
ID: stdout
STRING: "Error: stack underflow.\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: latest
TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: count
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: return
ID: latest
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: stack
ID: stk
SEMI: ;
NEWLINE: 

ID: char
ID: input_char
SEMI: ;
NEWLINE: 

COMMENT: //スタックを初期化（ポインタ渡しで関数にわたすこと）
NEWLINE: 

ID: initialize_stack
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 


COMMENT: //スタックにデータを追加
NEWLINE: 

ID: while
LPAREN: (
NUMBER: 1
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%c"
ID: input_char
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: input_char
ID: n
RPAREN: )
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

COMMENT: //Bがきてないならスタックに文字を追加
NEWLINE: 

COMMENT: //もしBがきたらスタックの一番上の文字を取り除く
NEWLINE: 

COMMENT: //スタックにデータがないときBがきたらなにもしない
NEWLINE: 

ID: if
LPAREN: (
ID: input_char
ID: B
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: push
LPAREN: (
ID: stk
ID: input_char
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: stk
ID: count
NUMBER: 0
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

COMMENT: //スタックからデータを取り出す
NEWLINE: 

ID: pop
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 



ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: stk
ID: count
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: stk
ID: data
ID: SIZE
MINUS: -
NUMBER: 1
MINUS: -
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

