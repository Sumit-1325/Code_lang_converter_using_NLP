ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: ctype
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: s
NUMBER: 4
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
NUMBER: 4
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%c"
ID: s
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
NUMBER: 4
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: i
MINUS: -
NUMBER: 1
MINUS: -
NUMBER: 1
ID: s
ID: i
ID: B
ID: isspace
LPAREN: (
ID: s
ID: i
MINUS: -
NUMBER: 1
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: s
ID: i
MINUS: -
NUMBER: 1
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: i
MINUS: -
NUMBER: 1
MINUS: -
NUMBER: 1
ID: s
ID: i
ID: B
ID: isspace
LPAREN: (
ID: s
ID: i
MINUS: -
NUMBER: 1
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: i
MINUS: -
NUMBER: 2
MINUS: -
NUMBER: 1
ID: s
ID: i
ID: B
ID: isspace
LPAREN: (
ID: s
ID: i
MINUS: -
NUMBER: 2
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 


ID: s
ID: i
MINUS: -
NUMBER: 2
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: i
MINUS: -
NUMBER: 1
MINUS: -
NUMBER: 1
ID: s
ID: i
ID: B
ID: isspace
LPAREN: (
ID: s
ID: i
MINUS: -
NUMBER: 1
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: i
MINUS: -
NUMBER: 2
MINUS: -
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 


ID: s
ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: k
NUMBER: 0
SEMI: ;
ID: k
NUMBER: 3
SEMI: ;
ID: k
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: s
ID: k
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
