DIVIDE: /
TIMES: *
ID: ex
NUMBER: 9
ID: _1
NEWLINE: 

ID: riverstone
TIMES: *
DIVIDE: /
NEWLINE: 


ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 


COMMENT: //スタックに格納するデータの数
NEWLINE: 

ID: define
ID: SIZE
NUMBER: 20
NEWLINE: 

NEWLINE: 

COMMENT: //スタックの定義
NEWLINE: 

ID: typedef
ID: struct
ID: stack
LBRACE: {
NEWLINE: 

ID: int
ID: size
SEMI: ;
COMMENT: //格納最大数
NEWLINE: 

ID: int
ID: count
SEMI: ;
COMMENT: //現在のデータ数
NEWLINE: 

ID: char
ID: data
ID: SIZE
SEMI: ;
COMMENT: //データ配列
NEWLINE: 

ID: char
TIMES: *
ID: top
SEMI: ;
COMMENT: //topへのポインタ
NEWLINE: 

RBRACE: }
ID: stack
SEMI: ;
NEWLINE: 


ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: elem
RPAREN: )
SEMI: ;
NEWLINE: 

ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

ID: void
ID: print_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: char
ID: string
ID: SIZE
SEMI: ;
NEWLINE: 

ID: stack
ID: stk
SEMI: ;
NEWLINE: 

NEWLINE: 

COMMENT: //スタックを初期化
NEWLINE: 

ID: initialize_stack
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 

COMMENT: //入力を受け取る
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: string
RPAREN: )
SEMI: ;
NEWLINE: 


COMMENT: //stringの中身を一文字ずつ見ていく
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: strlen
LPAREN: (
ID: string
RPAREN: )
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //入力文字が0か1の場合
NEWLINE: 

ID: if
LPAREN: (
ID: string
ID: i
NUMBER: 0
ID: string
ID: i
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //スタックにプッシュする
NEWLINE: 

ID: push
LPAREN: (
ID: stk
ID: string
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: //入力文字がBの場合
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: string
ID: i
ID: B
ID: stk
ID: count
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //スタックから一文字popする
NEWLINE: 

ID: pop
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: //stackの中身を出力
NEWLINE: 

ID: print_stack
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 



COMMENT: //スタックの初期化
NEWLINE: 

ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: count
NUMBER: 0
SEMI: ;
COMMENT: //個数を0にセット
NEWLINE: 

ID: stk
MINUS: -
ID: size
ID: SIZE
SEMI: ;
COMMENT: //格納最大数はSIZEに
NEWLINE: 

ID: stk
MINUS: -
ID: top
LPAREN: (
ID: stk
MINUS: -
ID: data
ID: SIZE
RPAREN: )
SEMI: ;
COMMENT: //topは配列の最終要素の1つ手前。
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: //データの追加
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: elem
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //最大要素数stk->sizeより多くの要素を追加使用とした場合エラー
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
ID: stk
MINUS: -
ID: size
RPAREN: )
LBRACE: {
NEWLINE: 

ID: fprintf
LPAREN: (
ID: stderr
STRING: "Error: stack overflow. (x=%c)\n"
ID: elem
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

COMMENT: //topを1つ上に上げる(=topを1つ手前に移動する)
NEWLINE: 

ID: stk
MINUS: -
ID: top
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

COMMENT: //1つ上げたtopにデータを格納する
NEWLINE: 

TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
ID: elem
SEMI: ;
NEWLINE: 

COMMENT: //現在のデータ数を1つ増やす
NEWLINE: 

ID: stk
MINUS: -
ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: //データの取り出し
NEWLINE: 

ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: latest
SEMI: ;
NEWLINE: 

COMMENT: //要素数が0以下になった場合取り出せない
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: fprintf
LPAREN: (
ID: stdout
STRING: "Error: stack underflow.\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

COMMENT: //topの位置からデータを取り出す
NEWLINE: 

ID: latest
TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
SEMI: ;
NEWLINE: 

COMMENT: //topを1つ下に下げる
NEWLINE: 

ID: stk
MINUS: -
ID: top
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

COMMENT: //現在のデータ数を1つ減らす
NEWLINE: 

ID: stk
MINUS: -
ID: count
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: return
ID: latest
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

COMMENT: //出力
NEWLINE: 

ID: void
ID: print_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: i
SEMI: ;
NEWLINE: 

COMMENT: //先頭の位置から、新しいデータに向かって順番にprint
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: stk
MINUS: -
ID: count
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: stk
MINUS: -
ID: data
ID: SIZE
MINUS: -
ID: i
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
