ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: define
ID: SIZE
NUMBER: 16
NEWLINE: 


ID: typedef
ID: struct
ID: node
LBRACE: {
NEWLINE: 

ID: char
ID: elem
SEMI: ;
NEWLINE: 

ID: struct
ID: node
TIMES: *
ID: next
SEMI: ;
NEWLINE: 

RBRACE: }
ID: node
SEMI: ;
NEWLINE: 


ID: void
ID: push
LPAREN: (
ID: node
TIMES: *
TIMES: *
ID: first
ID: char
ID: elem
RPAREN: )
LBRACE: {
NEWLINE: 

ID: node
TIMES: *
ID: new
LPAREN: (
ID: node
TIMES: *
RPAREN: )
ID: malloc
LPAREN: (
ID: sizeof
LPAREN: (
ID: node
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: new
ID: NULL
RPAREN: )
ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: new
MINUS: -
ID: elem
ID: elem
SEMI: ;
NEWLINE: 

ID: new
MINUS: -
ID: next
TIMES: *
ID: first
SEMI: ;
NEWLINE: 

TIMES: *
ID: first
ID: new
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: char
ID: pop
LPAREN: (
ID: node
TIMES: *
TIMES: *
ID: first
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: elem
SEMI: ;
NEWLINE: 

ID: node
TIMES: *
ID: tmp
TIMES: *
ID: first
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: tmp
ID: NULL
RPAREN: )
ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: elem
ID: tmp
MINUS: -
ID: elem
SEMI: ;
NEWLINE: 

TIMES: *
ID: first
ID: tmp
MINUS: -
ID: next
SEMI: ;
NEWLINE: 

ID: free
LPAREN: (
ID: tmp
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
ID: elem
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: input
ID: SIZE
LBRACE: {
NUMBER: 0
RBRACE: }
SEMI: ;
NEWLINE: 

ID: char
ID: output
ID: SIZE
LBRACE: {
NUMBER: 0
RBRACE: }
SEMI: ;
NEWLINE: 

ID: char
TIMES: *
ID: ptr_i
TIMES: *
ID: ptr_o
SEMI: ;
NEWLINE: 

ID: node
TIMES: *
ID: first
ID: NULL
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: input
RPAREN: )
SEMI: ;
NEWLINE: 

ID: ptr_i
ID: input
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
TIMES: *
ID: ptr_i
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
TIMES: *
ID: ptr_i
ID: B
ID: first
ID: NULL
RPAREN: )
LBRACE: {
NEWLINE: 

ID: pop
LPAREN: (
ID: first
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
TIMES: *
ID: ptr_i
NUMBER: 0
TIMES: *
ID: ptr_i
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: push
LPAREN: (
ID: first
TIMES: *
ID: ptr_i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: ptr_i
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: ptr_o
ID: output
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: first
ID: NULL
RPAREN: )
LBRACE: {
NEWLINE: 

TIMES: *
ID: ptr_o
ID: pop
LPAREN: (
ID: first
RPAREN: )
SEMI: ;
NEWLINE: 

ID: ptr_o
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
ID: SIZE
MINUS: -
NUMBER: 1
SEMI: ;
ID: i
NUMBER: 0
SEMI: ;
ID: i
MINUS: -
MINUS: -
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: output
ID: i
NUMBER: 0
RPAREN: )
ID: continue
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: output
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

