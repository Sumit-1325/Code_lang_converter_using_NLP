DIVIDE: /
TIMES: *
ID: ex9_1
NEWLINE: 

ID: B30095
TIMES: *
DIVIDE: /
NEWLINE: 

ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


COMMENT: // stack size
NEWLINE: 

ID: define
ID: SIZE
NUMBER: 1000
NEWLINE: 


COMMENT: // definition of stack
NEWLINE: 

ID: typedef
ID: struct
ID: stack
LBRACE: {
NEWLINE: 

ID: int
ID: size
SEMI: ;
COMMENT: // stack size
NEWLINE: 

ID: int
ID: count
SEMI: ;
COMMENT: // number of data
NEWLINE: 

ID: char
ID: data
ID: SIZE
SEMI: ;
NEWLINE: 

ID: char
TIMES: *
ID: top
SEMI: ;
NEWLINE: 

RBRACE: }
ID: stack
SEMI: ;
NEWLINE: 


ID: void
ID: print_stack_from_bottom
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: elem
RPAREN: )
SEMI: ;
NEWLINE: 




ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stack
ID: stk
SEMI: ;
NEWLINE: 

ID: char
ID: ch
SEMI: ;
NEWLINE: 


ID: initialize_stack
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 

COMMENT: // process input with stack
NEWLINE: 

ID: while
LPAREN: (
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: ch
ID: getchar
LPAREN: (
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: ch
ID: n
ID: ch
ID: EOF
ID: ch
NUMBER: 0
RPAREN: )
ID: break
SEMI: ;
COMMENT: /// end loop if the end of input is reached
NEWLINE: 


ID: if
LPAREN: (
ID: ch
ID: B
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: stk
ID: count
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: pop
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // pop an element if backspace is entered and stack is not empty
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: // push to stack if character other than backspace is entered
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: push
LPAREN: (
ID: stk
ID: ch
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // print out the stack
NEWLINE: 

ID: print_stack_from_bottom
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: void
ID: print_stack_from_bottom
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: i
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: stk
MINUS: -
ID: count
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: putchar
LPAREN: (
ID: stk
MINUS: -
ID: data
ID: stk
MINUS: -
ID: size
MINUS: -
ID: i
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // initialize a stack to be empty
NEWLINE: 

ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: count
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: size
ID: SIZE
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
LPAREN: (
ID: stk
MINUS: -
ID: data
ID: SIZE
RPAREN: )
SEMI: ;
COMMENT: // top is at the end of the array
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // stack push operation
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: elem
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
ID: stk
MINUS: -
ID: size
RPAREN: )
LBRACE: {
COMMENT: // stack overflow
NEWLINE: 

ID: fprintf
LPAREN: (
ID: stderr
STRING: "Error: stack overflow. (x=%c)\n"
ID: elem
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
COMMENT: // push an element
NEWLINE: 

ID: stk
MINUS: -
ID: top
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
ID: elem
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // stack pop operation
NEWLINE: 

ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: latest
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
NUMBER: 0
RPAREN: )
LBRACE: {
COMMENT: // stack underflow
NEWLINE: 

ID: fprintf
LPAREN: (
ID: stdout
STRING: "Error: stack underflow.\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
COMMENT: // pop an element
NEWLINE: 

ID: latest
TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: count
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: return
ID: latest
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
