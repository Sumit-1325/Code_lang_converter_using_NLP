DIVIDE: /
TIMES: *
ID: ex
NUMBER: 9
ID: _1
NEWLINE: 

ID: offNaria
TIMES: *
DIVIDE: /
NEWLINE: 


ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


COMMENT: //リストのノード（スタック内の各データ）の定義
NEWLINE: 

ID: typedef
ID: struct
ID: node
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: char
ID: elem
SEMI: ;
NEWLINE: 

ID: struct
ID: node
TIMES: *
ID: next
SEMI: ;
NEWLINE: 

RBRACE: }
ID: node
SEMI: ;
NEWLINE: 


ID: void
ID: push
LPAREN: (
ID: node
TIMES: *
TIMES: *
ID: first
ID: char
ID: elem
RPAREN: )
SEMI: ;
COMMENT: //スタックにデータを追加
NEWLINE: 

ID: char
ID: pop
LPAREN: (
ID: node
TIMES: *
TIMES: *
ID: first
RPAREN: )
SEMI: ;
COMMENT: //スタックからデータを取り出す
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: char
ID: input
NUMBER: 11
ID: output
NUMBER: 11
SEMI: ;
NEWLINE: 

COMMENT: //最初のノードの指す先
NEWLINE: 

ID: node
TIMES: *
ID: first
ID: NULL
SEMI: ;
NEWLINE: 

COMMENT: //スタックにノードを追加
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: input
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
NUMBER: 11
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

COMMENT: //'0'か'1'ならスタックに挿入
NEWLINE: 

ID: if
LPAREN: (
ID: input
ID: i
NUMBER: 0
ID: input
ID: i
NUMBER: 1
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: push
LPAREN: (
ID: first
ID: input
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //'B'ならスタックの一番上のものを取り出す
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: input
ID: i
ID: B
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: pop
LPAREN: (
ID: first
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //スタックの逆順に出力
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
NUMBER: 11
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: output
NUMBER: 10
MINUS: -
ID: i
ID: pop
LPAREN: (
ID: first
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
NUMBER: 11
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: output
ID: i
ID: x
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: output
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: void
ID: push
LPAREN: (
ID: node
TIMES: *
TIMES: *
ID: first
ID: char
ID: elem
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

COMMENT: //追加する分の領域を確保
NEWLINE: 

ID: node
TIMES: *
ID: new
ID: calloc
LPAREN: (
NUMBER: 1
ID: sizeof
LPAREN: (
ID: node
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: new
ID: NULL
RPAREN: )
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: new
MINUS: -
ID: elem
ID: elem
SEMI: ;
NEWLINE: 

ID: new
MINUS: -
ID: next
TIMES: *
ID: first
SEMI: ;
NEWLINE: 

TIMES: *
ID: first
ID: new
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: char
ID: pop
LPAREN: (
ID: node
TIMES: *
TIMES: *
ID: first
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: char
ID: elem
SEMI: ;
NEWLINE: 

ID: node
TIMES: *
ID: tmp
TIMES: *
ID: first
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: tmp
ID: NULL
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: elem
ID: tmp
MINUS: -
ID: elem
SEMI: ;
NEWLINE: 

TIMES: *
ID: first
ID: tmp
MINUS: -
ID: next
SEMI: ;
NEWLINE: 

COMMENT: //取り出したノードのメモリを解放
NEWLINE: 

ID: free
LPAREN: (
ID: tmp
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
ID: elem
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //スタックの一番下またはスタックが空であれば目印記号'x'を返す
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: return
ID: x
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

