DIVIDE: /
TIMES: *
ID: ex9_1
NEWLINE: 

ID: Jun_JPN
TIMES: *
DIVIDE: /
NEWLINE: 


ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: define
ID: SIZE
NUMBER: 11
NEWLINE: 

ID: typedef
ID: struct
LBRACE: {
NEWLINE: 

ID: int
ID: size
SEMI: ;
NEWLINE: 

ID: int
ID: count
SEMI: ;
NEWLINE: 

ID: char
ID: str
ID: SIZE
SEMI: ;
NEWLINE: 

ID: char
TIMES: *
ID: top
SEMI: ;
NEWLINE: 

RBRACE: }
ID: stack
SEMI: ;
NEWLINE: 


ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: bin
RPAREN: )
SEMI: ;
NEWLINE: 

ID: void
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stack
ID: stk
SEMI: ;
NEWLINE: 

ID: char
ID: str
ID: SIZE
SEMI: ;
NEWLINE: 

ID: int
ID: i
SEMI: ;
NEWLINE: 


ID: scanf
LPAREN: (
STRING: "%s"
ID: str
RPAREN: )
SEMI: ;
COMMENT: // 文字列を受け取る
NEWLINE: 

ID: initialize_stack
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // スタックstkを初期化
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: str
ID: i
NUMBER: 0
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: str
ID: i
ID: B
RPAREN: )
ID: pop
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // Bが来たらポップ
NEWLINE: 

ID: else
ID: push
LPAREN: (
ID: stk
ID: str
ID: i
RPAREN: )
SEMI: ;
COMMENT: // B以外が来たらプッシュ
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: str
ID: i
NUMBER: 0
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
COMMENT: // 結果を表示
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: stk
ID: str
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: /* スタックを初期化 */
NEWLINE: 

ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: count
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: size
ID: SIZE
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
LPAREN: (
ID: stk
MINUS: -
ID: str
NUMBER: 0
RPAREN: )
SEMI: ;
COMMENT: // 頭文字のポインタををtopに
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: /* B以外の文字ををプッシュ */
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: bin
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
ID: stk
MINUS: -
ID: size
RPAREN: )
LBRACE: {
COMMENT: // オーバーフロー処理
NEWLINE: 

ID: printf
LPAREN: (
STRING: "Error: stack overflow\n"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
ID: bin
SEMI: ;
COMMENT: // スタックのトップに文字を加える
NEWLINE: 

ID: stk
MINUS: -
ID: top
PLUS: +
PLUS: +
SEMI: ;
COMMENT: // スタックのトップを1つ上に
NEWLINE: 

ID: stk
MINUS: -
ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: /* Bが来たらポップ */
NEWLINE: 

ID: void
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
NUMBER: 0
RPAREN: )
LBRACE: {
COMMENT: // アンダーフロー処理
NEWLINE: 

SEMI: ;
COMMENT: // 何もしない
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
NUMBER: 0
SEMI: ;
COMMENT: // スタックのトップをヌル文字に
NEWLINE: 

ID: stk
MINUS: -
ID: top
MINUS: -
MINUS: -
SEMI: ;
COMMENT: // スタックのトップを1つ下に
NEWLINE: 

ID: stk
MINUS: -
ID: count
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
