DIVIDE: /
TIMES: *
ID: ex9_1
NEWLINE: 

ID: moka223711
TIMES: *
DIVIDE: /
NEWLINE: 


ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: define
ID: SIZE
NUMBER: 15
NEWLINE: 


ID: typedef
ID: struct
ID: stack
LBRACE: {
COMMENT: // 文字列を格納するスタック
NEWLINE: 

ID: int
ID: size
SEMI: ;
NEWLINE: 

ID: int
ID: count
SEMI: ;
COMMENT: // スタックに格納されたデータ数を表す変数
NEWLINE: 

ID: char
ID: data
ID: SIZE
SEMI: ;
COMMENT: // スタックにデータを格納するための配列
NEWLINE: 

ID: char
TIMES: *
ID: top
SEMI: ;
COMMENT: // スタックの先頭アドレスを表すポインタ
NEWLINE: 

RBRACE: }
ID: stack
SEMI: ;
NEWLINE: 


ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // スタックを初期化するための関数
NEWLINE: 

ID: void
ID: print_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // スタックに格納されているデータを出力するための関数
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: input
RPAREN: )
SEMI: ;
COMMENT: // スタックの先頭にデータを格納するための関数
NEWLINE: 

ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // スタックの先頭からデータを取り出すための関数
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stack
ID: stk
SEMI: ;
NEWLINE: 

ID: char
ID: input
SEMI: ;
COMMENT: // 入力を受け取るための変数
NEWLINE: 

ID: initialize_stack
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // スタックを初期化
NEWLINE: 

ID: while
LPAREN: (
LPAREN: (
ID: input
ID: getchar
LPAREN: (
RPAREN: )
RPAREN: )
ID: EOF
RPAREN: )
LBRACE: {
COMMENT: // 入力ファイルの終端に達するまで文字を受け取る
NEWLINE: 

ID: if
LPAREN: (
ID: input
ID: B
RPAREN: )
ID: push
LPAREN: (
ID: stk
ID: input
RPAREN: )
SEMI: ;
COMMENT: // 入力された文字が'0'か'1'だったときはスタックの先頭に文字を格納する
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: stk
ID: count
NUMBER: 0
RPAREN: )
ID: pop
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // 入力された文字が'B'でありスタックの要素が空でなければ先頭から文字を削除する
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: print_stack
LPAREN: (
ID: stk
RPAREN: )
SEMI: ;
COMMENT: // スタックに格納されているデータを出力
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // スタックを初期化するための関数
NEWLINE: 

ID: void
ID: initialize_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: count
NUMBER: 0
SEMI: ;
COMMENT: // スタックに格納されているデータの総数は0
NEWLINE: 

ID: stk
MINUS: -
ID: size
ID: SIZE
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
LPAREN: (
ID: stk
MINUS: -
ID: data
ID: SIZE
RPAREN: )
SEMI: ;
COMMENT: // スタックの先頭アドレスをstk->topに格納する
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: void
ID: print_stack
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: i
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: stk
MINUS: -
ID: count
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
COMMENT: // 格納されているデータをすべて出力していく
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%c"
ID: stk
MINUS: -
ID: data
ID: stk
MINUS: -
ID: size
MINUS: -
ID: i
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
COMMENT: // 古い要素から順番に出力していく
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
COMMENT: // 最後に改行を出力して終了
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // スタックの先頭にデータを格納するための関数
NEWLINE: 

ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stk
ID: char
ID: input
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
ID: stk
MINUS: -
ID: size
RPAREN: )
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: stk
MINUS: -
ID: top
MINUS: -
MINUS: -
SEMI: ;
COMMENT: // スタックの先頭のアドレスを一つずらす
NEWLINE: 

TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
ID: input
SEMI: ;
COMMENT: // スタックの先頭に文字を格納する
NEWLINE: 

ID: stk
MINUS: -
ID: count
PLUS: +
PLUS: +
SEMI: ;
COMMENT: // スタックのデータの総数のカウントを一つ増やす
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: char
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stk
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: ch
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: stk
MINUS: -
ID: count
NUMBER: 0
RPAREN: )
NEWLINE: 

ID: exit
LPAREN: (
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: ch
TIMES: *
LPAREN: (
ID: stk
MINUS: -
ID: top
RPAREN: )
SEMI: ;
NEWLINE: 

ID: stk
MINUS: -
ID: top
PLUS: +
PLUS: +
SEMI: ;
COMMENT: // スタックの先頭アドレスを一つずらす
NEWLINE: 

ID: stk
MINUS: -
ID: count
MINUS: -
MINUS: -
SEMI: ;
COMMENT: // スタックのデータの総数のカウントを一つ減らす
NEWLINE: 

ID: return
ID: ch
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

