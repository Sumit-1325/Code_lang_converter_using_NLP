DIVIDE: /
TIMES: *
ID: ex9_1
NEWLINE: 

ID: L40S38
TIMES: *
DIVIDE: /
NEWLINE: 

ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: typedef
ID: struct
ID: stack
LBRACE: {
NEWLINE: 

ID: int
ID: row
NUMBER: 11
SEMI: ;
NEWLINE: 

COMMENT: //入力される文字列は最大10文字+ヌル文字
NEWLINE: 

ID: int
ID: letter_num
SEMI: ;
NEWLINE: 

COMMENT: //文字列の長さ
NEWLINE: 

RBRACE: }
ID: stack
SEMI: ;
NEWLINE: 


ID: void
ID: push
LPAREN: (
ID: stack
TIMES: *
ID: stack_p
ID: char
TIMES: *
ID: letter
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //stackの文字列の最後にletterを加える
NEWLINE: 

ID: stack_p
MINUS: -
ID: row
ID: stack_p
MINUS: -
ID: letter_num
TIMES: *
ID: letter
SEMI: ;
NEWLINE: 

ID: stack_p
MINUS: -
ID: letter_num
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: return
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: void
ID: pop
LPAREN: (
ID: stack
TIMES: *
ID: stack_p
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //stackの文字列の最後の文字を削除
NEWLINE: 

ID: if
LPAREN: (
ID: stack_p
MINUS: -
ID: letter_num
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stack_p
MINUS: -
ID: letter_num
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

ID: stack_p
MINUS: -
ID: row
ID: stack_p
MINUS: -
ID: letter_num
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: return
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: stack
TIMES: *
ID: Stack
SEMI: ;
NEWLINE: 

ID: Stack
LPAREN: (
ID: stack
TIMES: *
RPAREN: )
ID: calloc
LPAREN: (
NUMBER: 1
ID: sizeof
LPAREN: (
ID: stack
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: Stack
ID: NULL
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "ERROR"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: char
ID: input
NUMBER: 11
SEMI: ;
NEWLINE: 

COMMENT: //input:入力された'0','1','B'のみでできた文字列
NEWLINE: 


ID: int
ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 


COMMENT: //入力された文字列をinputに格納
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: input
RPAREN: )
SEMI: ;
NEWLINE: 


COMMENT: //input[i]ごとにStack中の文字列における処理を変更
NEWLINE: 

ID: while
LPAREN: (
ID: input
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: input
ID: i
ID: B
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //バックスペースキーの時はpop操作
NEWLINE: 

ID: pop
LPAREN: (
ID: Stack
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

COMMENT: //それ以外の時はpush操作
NEWLINE: 

ID: push
LPAREN: (
ID: Stack
ID: input
ID: i
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: i
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: i
NUMBER: 0
SEMI: ;
NEWLINE: 


COMMENT: //結果の出力
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%s\n"
ID: Stack
MINUS: -
ID: row
RPAREN: )
SEMI: ;
NEWLINE: 

ID: free
LPAREN: (
ID: Stack
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 


RBRACE: }
