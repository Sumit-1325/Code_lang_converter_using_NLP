ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 

ID: include
ID: time
ID: h
NEWLINE: 


ID: define
ID: TLong
ID: long
ID: long
NEWLINE: 


COMMENT: // abs(n)
NEWLINE: 

ID: int
ID: abs
LPAREN: (
ID: int
ID: n
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: n
NUMBER: 0
RPAREN: )
ID: n
TIMES: *
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: return
ID: n
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // gcd(a,b)
NEWLINE: 

ID: int
ID: gcd
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: ret
SEMI: ;
NEWLINE: 

ID: ret
LPAREN: (
ID: b
NUMBER: 0
RPAREN: )
ID: a
ID: gcd
LPAREN: (
ID: b
ID: a
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // lcm(a.b)
NEWLINE: 

ID: int
ID: lcm
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
LPAREN: (
ID: a
TIMES: *
ID: b
RPAREN: )
DIVIDE: /
ID: gcd
LPAREN: (
ID: a
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // qsort(array, size, sizeof(int),comp);
NEWLINE: 

ID: int
ID: comp
LPAREN: (
ID: const
ID: int
TIMES: *
ID: a
ID: const
ID: int
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
LPAREN: (
TIMES: *
ID: a
MINUS: -
TIMES: *
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // append(array,*size,addNum)
NEWLINE: 

ID: void
ID: append
LPAREN: (
ID: int
TIMES: *
ID: array
ID: int
TIMES: *
ID: size
ID: int
ID: num
RPAREN: )
LBRACE: {
NEWLINE: 

ID: realloc
LPAREN: (
ID: array
ID: sizeof
LPAREN: (
ID: int
RPAREN: )
TIMES: *
LPAREN: (
TIMES: *
ID: size
PLUS: +
NUMBER: 1
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

ID: array
LPAREN: (
TIMES: *
ID: size
RPAREN: )
ID: num
SEMI: ;
NEWLINE: 

PLUS: +
PLUS: +
LPAREN: (
TIMES: *
ID: size
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: // pop(array,*size) & nongetpop(array,*size)
NEWLINE: 

ID: int
ID: pop
LPAREN: (
ID: int
TIMES: *
ID: array
ID: int
TIMES: *
ID: size
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: temp
ID: array
LPAREN: (
TIMES: *
ID: size
MINUS: -
NUMBER: 1
RPAREN: )
SEMI: ;
NEWLINE: 

ID: realloc
LPAREN: (
ID: array
ID: sizeof
LPAREN: (
ID: int
RPAREN: )
TIMES: *
LPAREN: (
TIMES: *
ID: size
MINUS: -
NUMBER: 1
RPAREN: )
RPAREN: )
SEMI: ;
NEWLINE: 

MINUS: -
MINUS: -
LPAREN: (
TIMES: *
ID: size
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
ID: temp
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: instr
NUMBER: 11
ID: outstr
NUMBER: 11
STRING: ""
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: instr
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: strlen
LPAREN: (
ID: instr
RPAREN: )
SEMI: ;
PLUS: +
PLUS: +
ID: i
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: instr
ID: i
ID: B
RPAREN: )
ID: outstr
ID: strlen
LPAREN: (
ID: outstr
RPAREN: )
MINUS: -
NUMBER: 1
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: else
ID: outstr
ID: strlen
LPAREN: (
ID: outstr
RPAREN: )
ID: instr
ID: i
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%s"
ID: outstr
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

