ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 


ID: char
ID: s
NUMBER: 12
SEMI: ;
NEWLINE: 

ID: char
ID: res
NUMBER: 12
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: s
RPAREN: )
SEMI: ;
NEWLINE: 

COMMENT: //    size_t l;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: strlen
LPAREN: (
ID: s
RPAREN: )
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: char
ID: c
ID: s
ID: i
SEMI: ;
NEWLINE: 

NEWLINE: 

COMMENT: //        l = strlen(res);
NEWLINE: 

COMMENT: //        //printf("%d\n",l);
NEWLINE: 

ID: if
LPAREN: (
ID: c
NUMBER: 0
ID: c
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

COMMENT: //            res[l] = '0';
NEWLINE: 


ID: res
ID: i
ID: c
SEMI: ;
NEWLINE: 

COMMENT: //        } else if (c == '1') {
NEWLINE: 

COMMENT: //            res[l] = '1';
NEWLINE: 

COMMENT: //        } 
NEWLINE: 

COMMENT: //        else if (c == 'B') {
NEWLINE: 

COMMENT: //        //    res[l-1] = '\0';
NEWLINE: 

COMMENT: //            res[l] = 'B';
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //        //printf("%s\n", res);
NEWLINE: 

RBRACE: }
NEWLINE: 


COMMENT: //puts("----");
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%s"
ID: res
RPAREN: )
SEMI: ;
NEWLINE: 



ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 


RBRACE: }
