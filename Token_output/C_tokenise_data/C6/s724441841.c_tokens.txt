ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: include
ID: stdbool
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 

ID: include
ID: limits
ID: h
NEWLINE: 

ID: int
ID: max
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: a
ID: b
ID: a
ID: b
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: min
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: a
ID: b
ID: a
ID: b
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: gcd
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: min
LPAREN: (
ID: a
ID: b
RPAREN: )
NUMBER: 0
ID: max
LPAREN: (
ID: a
ID: b
RPAREN: )
ID: gcd
LPAREN: (
ID: min
LPAREN: (
ID: a
ID: b
RPAREN: )
ID: max
LPAREN: (
ID: a
ID: b
RPAREN: )
ID: min
LPAREN: (
ID: a
ID: b
RPAREN: )
RPAREN: )
SEMI: ;
RBRACE: }
NEWLINE: 

ID: long
ID: long
ID: llmax
LPAREN: (
ID: long
ID: long
ID: a
ID: long
ID: long
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: a
ID: b
ID: a
ID: b
SEMI: ;
RBRACE: }
NEWLINE: 

ID: long
ID: long
ID: llmin
LPAREN: (
ID: long
ID: long
ID: a
ID: long
ID: long
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: a
ID: b
ID: a
ID: b
SEMI: ;
RBRACE: }
NEWLINE: 

ID: long
ID: long
ID: llgcd
LPAREN: (
ID: long
ID: long
ID: a
ID: long
ID: long
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: min
LPAREN: (
ID: a
ID: b
RPAREN: )
NUMBER: 0
ID: llmax
LPAREN: (
ID: a
ID: b
RPAREN: )
ID: llgcd
LPAREN: (
ID: llmin
LPAREN: (
ID: a
ID: b
RPAREN: )
ID: llmax
LPAREN: (
ID: a
ID: b
RPAREN: )
ID: llmin
LPAREN: (
ID: a
ID: b
RPAREN: )
RPAREN: )
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: assort
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
ID: return
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
MINUS: -
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: dessort
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
ID: return
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
MINUS: -
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: llassort
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
ID: return
TIMES: *
LPAREN: (
ID: long
ID: long
TIMES: *
RPAREN: )
ID: a
MINUS: -
TIMES: *
LPAREN: (
ID: long
ID: long
TIMES: *
RPAREN: )
ID: b
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: lldessort
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
ID: return
TIMES: *
LPAREN: (
ID: long
ID: long
TIMES: *
RPAREN: )
ID: b
MINUS: -
TIMES: *
LPAREN: (
ID: long
ID: long
TIMES: *
RPAREN: )
ID: a
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: charassort
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: strcmp
LPAREN: (
LPAREN: (
ID: char
TIMES: *
RPAREN: )
ID: a
LPAREN: (
ID: char
TIMES: *
RPAREN: )
ID: b
RPAREN: )
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: chardessort
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
ID: return
ID: strcmp
LPAREN: (
LPAREN: (
ID: char
TIMES: *
RPAREN: )
ID: b
LPAREN: (
ID: char
TIMES: *
RPAREN: )
ID: a
RPAREN: )
SEMI: ;
RBRACE: }
NEWLINE: 

ID: char
ID: lowcmp
NUMBER: 26
STRING: "abcdefghijklmnopqrstuvwxyz"
SEMI: ;
NEWLINE: 

ID: char
ID: upcmp
NUMBER: 26
STRING: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
SEMI: ;
NEWLINE: 

ID: int
ID: ntoi
LPAREN: (
ID: char
ID: c
RPAREN: )
LBRACE: {
ID: return
ID: c
MINUS: -
NUMBER: 0
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: ltoi
LPAREN: (
ID: char
ID: c
RPAREN: )
LBRACE: {
ID: return
ID: c
MINUS: -
ID: a
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: utoi
LPAREN: (
ID: char
ID: c
RPAREN: )
LBRACE: {
ID: return
ID: c
MINUS: -
ID: A
SEMI: ;
RBRACE: }
NEWLINE: 

ID: long
ID: long
ID: mod
NUMBER: 1000000007
SEMI: ;
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: char
ID: s
NUMBER: 4
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%s"
ID: s
RPAREN: )
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: strlen
LPAREN: (
ID: s
RPAREN: )
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: s
ID: i
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: s
ID: i
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: s
ID: i
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: s
ID: i
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%s\n"
ID: s
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
