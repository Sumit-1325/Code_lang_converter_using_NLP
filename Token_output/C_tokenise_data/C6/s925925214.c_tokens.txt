ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: n
ID: h
ID: t
ID: g
ID: new
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: h
ID: n
DIVIDE: /
NUMBER: 100
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: h
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: h
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: h
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: h
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: t
LPAREN: (
ID: n
NUMBER: 100
RPAREN: )
DIVIDE: /
NUMBER: 10
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: t
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: t
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: t
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: t
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: g
ID: n
NUMBER: 10
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: g
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: g
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: g
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: g
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: new
ID: h
TIMES: *
NUMBER: 100
PLUS: +
ID: t
TIMES: *
NUMBER: 10
PLUS: +
ID: g
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d\n"
ID: new
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
