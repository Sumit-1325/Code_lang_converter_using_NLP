ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: n
ID: ans
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: n
NUMBER: 10
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: ans
PLUS: +
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: n
NUMBER: 10
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: ans
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: ans
PLUS: +
LPAREN: (
ID: n
NUMBER: 10
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: int
ID: x
LPAREN: (
ID: n
DIVIDE: /
NUMBER: 10
RPAREN: )
NUMBER: 10
SEMI: ;
NEWLINE: 

ID: switch
LPAREN: (
ID: x
RPAREN: )
LBRACE: {
NEWLINE: 

ID: case
NUMBER: 1
ID: ans
PLUS: +
NUMBER: 90
SEMI: ;
ID: break
SEMI: ;
NEWLINE: 

ID: case
NUMBER: 9
ID: ans
PLUS: +
NUMBER: 10
SEMI: ;
ID: break
SEMI: ;
NEWLINE: 

ID: default
ID: ans
PLUS: +
LPAREN: (
ID: x
TIMES: *
NUMBER: 10
RPAREN: )
SEMI: ;
ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: x
ID: n
DIVIDE: /
NUMBER: 100
SEMI: ;
NEWLINE: 

ID: switch
LPAREN: (
ID: x
RPAREN: )
LBRACE: {
NEWLINE: 

ID: case
NUMBER: 1
ID: ans
PLUS: +
NUMBER: 900
SEMI: ;
ID: break
SEMI: ;
NEWLINE: 

ID: case
NUMBER: 9
ID: ans
PLUS: +
NUMBER: 100
SEMI: ;
ID: break
SEMI: ;
NEWLINE: 

ID: default
ID: ans
PLUS: +
ID: x
TIMES: *
NUMBER: 100
SEMI: ;
ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d"
ID: ans
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
