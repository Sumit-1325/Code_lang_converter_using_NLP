ID: include
ID: stdio
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: n
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d\n"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

COMMENT: //
NEWLINE: 

ID: if
LPAREN: (
ID: n
NUMBER: 2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: n
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //
NEWLINE: 

ID: int
ID: m
ID: n
DIVIDE: /
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: int
ID: array1
ID: m
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: int
ID: array2
ID: m
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: m
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: array1
ID: i
NUMBER: 0
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: array2
ID: i
NUMBER: 0
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: int
ID: x
SEMI: ;
NEWLINE: 

ID: int
ID: last1
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: last2
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d%*c"
ID: x
RPAREN: )
SEMI: ;
NEWLINE: 

ID: array1
NUMBER: 0
NUMBER: 0
ID: x
SEMI: ;
NEWLINE: 

ID: array1
NUMBER: 0
NUMBER: 1
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d%*c"
ID: x
RPAREN: )
SEMI: ;
NEWLINE: 

ID: array2
NUMBER: 0
NUMBER: 0
ID: x
SEMI: ;
NEWLINE: 

ID: array2
NUMBER: 0
NUMBER: 1
NUMBER: 1
SEMI: ;
NEWLINE: 

COMMENT: //
NEWLINE: 

ID: int
ID: j
ID: k
SEMI: ;
NEWLINE: 

ID: for
LPAREN: (
ID: int
ID: i
NUMBER: 2
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
LBRACE: {
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d%*c"
ID: x
RPAREN: )
SEMI: ;
NEWLINE: 

ID: j
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: k
ID: i
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: k
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: array1
ID: j
NUMBER: 0
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: array1
ID: j
NUMBER: 0
ID: x
SEMI: ;
NEWLINE: 

ID: array1
ID: j
NUMBER: 1
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: last1
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: array1
ID: j
NUMBER: 0
ID: x
RPAREN: )
LBRACE: {
NEWLINE: 

ID: array1
ID: j
NUMBER: 1
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: j
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: array2
ID: j
NUMBER: 0
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: array2
ID: j
NUMBER: 0
ID: x
SEMI: ;
NEWLINE: 

ID: array2
ID: j
NUMBER: 1
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: last2
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: array2
ID: j
NUMBER: 0
ID: x
RPAREN: )
LBRACE: {
NEWLINE: 

ID: array2
ID: j
NUMBER: 1
PLUS: +
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: break
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: j
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //
NEWLINE: 

ID: if
LPAREN: (
ID: array1
NUMBER: 0
NUMBER: 0
ID: array2
NUMBER: 0
NUMBER: 0
ID: last1
NUMBER: 0
ID: last2
NUMBER: 0
RPAREN: )
LBRACE: {
NEWLINE: 

ID: m
ID: n
DIVIDE: /
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d"
ID: m
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //
NEWLINE: 

ID: int
ID: answer
ID: max
ID: amount
ID: count
SEMI: ;
NEWLINE: 

ID: answer
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: max
ID: array1
NUMBER: 0
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: amount
ID: array1
NUMBER: 0
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: last1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: max
ID: array1
ID: count
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
ID: array1
ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: answer
PLUS: +
ID: amount
SEMI: ;
NEWLINE: 

ID: amount
ID: array1
ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: last1
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: answer
PLUS: +
ID: array1
ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: last1
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: max
ID: array2
NUMBER: 0
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: amount
ID: array2
NUMBER: 0
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: while
LPAREN: (
ID: last2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: max
ID: array2
ID: count
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
ID: array2
ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: answer
PLUS: +
ID: amount
SEMI: ;
NEWLINE: 

ID: amount
ID: array2
ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: last2
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: answer
PLUS: +
ID: array2
ID: count
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

ID: last2
MINUS: -
MINUS: -
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d"
ID: answer
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
