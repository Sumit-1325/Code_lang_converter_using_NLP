ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: n
ID: a
ID: b
ID: c
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: a
ID: n
DIVIDE: /
NUMBER: 100
SEMI: ;
NEWLINE: 

ID: b
ID: n
DIVIDE: /
NUMBER: 10
MINUS: -
ID: a
TIMES: *
NUMBER: 10
SEMI: ;
NEWLINE: 

ID: c
ID: n
MINUS: -
ID: a
TIMES: *
NUMBER: 100
MINUS: -
ID: b
TIMES: *
NUMBER: 10
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: a
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: a
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: a
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: a
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: b
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: b
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: b
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: b
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: c
NUMBER: 1
RPAREN: )
LBRACE: {
NEWLINE: 

ID: c
NUMBER: 9
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: c
NUMBER: 9
RPAREN: )
LBRACE: {
NEWLINE: 

ID: c
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: n
NUMBER: 100
TIMES: *
ID: a
PLUS: +
NUMBER: 10
TIMES: *
ID: b
PLUS: +
ID: c
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d"
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

