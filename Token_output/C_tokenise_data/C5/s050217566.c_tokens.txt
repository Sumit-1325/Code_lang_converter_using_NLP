ID: include
ID: stdio
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: i
ID: j
ID: k
ID: ans
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: int
ID: w
ID: h
ID: x
ID: y
ID: judge
SEMI: ;
NEWLINE: 

ID: float
ID: s
NUMBER: 0
NUMBER: 0
SEMI: ;
NEWLINE: 



ID: scanf
LPAREN: (
STRING: "%d %d %d %d"
ID: w
ID: h
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 


ID: s
LPAREN: (
ID: float
RPAREN: )
ID: w
TIMES: *
LPAREN: (
ID: float
RPAREN: )
ID: h
DIVIDE: /
NUMBER: 2
NUMBER: 0
SEMI: ;
NEWLINE: 


ID: judge
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: w
NUMBER: 0
ID: h
NUMBER: 0
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: w
NUMBER: 2
NUMBER: 0
RPAREN: )
LPAREN: (
ID: h
NUMBER: 2
NUMBER: 0
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: w
DIVIDE: /
NUMBER: 2
ID: x
RPAREN: )
LPAREN: (
ID: h
DIVIDE: /
NUMBER: 2
ID: y
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: judge
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: printf
LPAREN: (
STRING: "%f %d, %d"
ID: s
ID: judge
NUMBER: 0
NUMBER: 2
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
