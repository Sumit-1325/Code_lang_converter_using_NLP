ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 


ID: define
ID: MAX
LPAREN: (
ID: p
ID: q
RPAREN: )
LPAREN: (
LPAREN: (
ID: p
ID: q
RPAREN: )
LPAREN: (
ID: p
RPAREN: )
LPAREN: (
ID: q
RPAREN: )
RPAREN: )
NEWLINE: 

ID: define
ID: MIN
LPAREN: (
ID: p
ID: q
RPAREN: )
LPAREN: (
LPAREN: (
ID: p
ID: q
RPAREN: )
LPAREN: (
ID: p
RPAREN: )
LPAREN: (
ID: q
RPAREN: )
RPAREN: )
NEWLINE: 


ID: define
ID: INF
NUMBER: 1000000000
SEMI: ;
NEWLINE: 

ID: define
ID: REP
LPAREN: (
ID: i
ID: n
RPAREN: )
ID: for
LPAREN: (
ID: i
NUMBER: 0
SEMI: ;
ID: i
ID: n
SEMI: ;
ID: i
PLUS: +
PLUS: +
RPAREN: )
NEWLINE: 


ID: int
ID: gcd
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

DIVIDE: /
TIMES: *
NEWLINE: 

ID: int
MINUS: -
NUMBER: 32768
ID: to
NUMBER: 32767
LPAREN: (
NUMBER: 2
TIMES: *
TIMES: *
NUMBER: 15
MINUS: -
NUMBER: 1
RPAREN: )
NEWLINE: 

ID: long
MINUS: -
NUMBER: 2147483648
ID: to
NUMBER: 2147483648
LPAREN: (
NUMBER: 2
TIMES: *
TIMES: *
NUMBER: 31
MINUS: -
NUMBER: 1
RPAREN: )
NEWLINE: 

TIMES: *
DIVIDE: /
NEWLINE: 

ID: int
ID: intcmp
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
MINUS: -
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //qsort(a,sizeof(a)/sizeof(int),sizeof(int),intcmp);
NEWLINE: 

ID: int
ID: longcmp
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
TIMES: *
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: a
MINUS: -
TIMES: *
LPAREN: (
ID: long
TIMES: *
RPAREN: )
ID: b
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //qsort(a,sizeof(a)/sizeof(long),sizeof(long),longcmp);
NEWLINE: 

ID: int
ID: doublecmp
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: return
TIMES: *
LPAREN: (
ID: double
TIMES: *
RPAREN: )
ID: a
MINUS: -
TIMES: *
LPAREN: (
ID: double
TIMES: *
RPAREN: )
ID: b
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

COMMENT: //qsort(a,sizeof(a)/sizeof(double),sizeof(double),doublecmp);
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: long
ID: long
ID: int
ID: w
ID: h
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%lld%lld%lld%lld"
ID: w
ID: h
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: double
ID: ans
NUMBER: 0
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: ans
ID: w
TIMES: *
ID: h
DIVIDE: /
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%f\t"
ID: ans
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: w
ID: x
TIMES: *
NUMBER: 2
ID: h
ID: y
TIMES: *
NUMBER: 2
RPAREN: )
ID: printf
LPAREN: (
STRING: "1"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
ID: printf
LPAREN: (
STRING: "0"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: int
ID: gcd
LPAREN: (
ID: int
ID: a
ID: int
ID: b
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: max
ID: min
ID: tmp
SEMI: ;
NEWLINE: 

ID: max
ID: MAX
LPAREN: (
ID: a
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

ID: min
ID: MIN
LPAREN: (
ID: a
ID: b
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: max
ID: min
NUMBER: 0
RPAREN: )
ID: return
ID: min
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: tmp
ID: min
SEMI: ;
NEWLINE: 

ID: min
ID: max
ID: min
SEMI: ;
NEWLINE: 

ID: max
ID: tmp
SEMI: ;
NEWLINE: 

ID: return
ID: gcd
LPAREN: (
ID: max
ID: min
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

