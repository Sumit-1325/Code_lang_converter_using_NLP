ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 

ID: include
ID: limits
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: W
ID: H
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d %d %d %d"
ID: W
ID: H
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: double
ID: res
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: count
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: double
ID: test
LPAREN: (
ID: double
RPAREN: )
ID: W
DIVIDE: /
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: double
RPAREN: )
ID: x
LPAREN: (
LPAREN: (
ID: double
RPAREN: )
ID: W
DIVIDE: /
NUMBER: 2
RPAREN: )
RPAREN: )
LBRACE: {
ID: res
ID: H
TIMES: *
LPAREN: (
LPAREN: (
ID: double
RPAREN: )
ID: W
DIVIDE: /
NUMBER: 2
RPAREN: )
SEMI: ;
NEWLINE: 

ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: double
RPAREN: )
ID: y
LPAREN: (
LPAREN: (
ID: double
RPAREN: )
ID: H
DIVIDE: /
NUMBER: 2
RPAREN: )
RPAREN: )
LBRACE: {
ID: res
ID: W
TIMES: *
LPAREN: (
LPAREN: (
ID: double
RPAREN: )
ID: H
DIVIDE: /
NUMBER: 2
RPAREN: )
SEMI: ;
NEWLINE: 

ID: count
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: count
NUMBER: 2
RPAREN: )
ID: printf
LPAREN: (
STRING: "%lf 1"
ID: res
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: count
NUMBER: 2
RPAREN: )
ID: printf
LPAREN: (
STRING: "%lf 0"
ID: res
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
ID: EXIT_SUCCESS
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

