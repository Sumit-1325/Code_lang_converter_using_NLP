ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: w
ID: h
ID: x
ID: y
ID: i
ID: r
NUMBER: 0
ID: mx2
ID: my2
ID: s
SEMI: ;
NEWLINE: 

ID: double
ID: mx1
ID: my1
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d%d%d%d"
ID: w
ID: h
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: mx1
ID: w
MINUS: -
ID: x
ID: x
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
DIVIDE: /
LPAREN: (
ID: double
RPAREN: )
ID: w
ID: x
DIVIDE: /
LPAREN: (
ID: double
RPAREN: )
ID: w
SEMI: ;
NEWLINE: 

ID: my1
ID: h
MINUS: -
ID: y
ID: y
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
DIVIDE: /
LPAREN: (
ID: double
RPAREN: )
ID: h
ID: y
DIVIDE: /
LPAREN: (
ID: double
RPAREN: )
ID: h
SEMI: ;
NEWLINE: 

ID: mx2
ID: w
MINUS: -
ID: x
ID: x
ID: w
MINUS: -
ID: x
ID: x
SEMI: ;
NEWLINE: 

ID: my2
ID: h
MINUS: -
ID: y
ID: y
ID: h
MINUS: -
ID: y
ID: y
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: mx1
ID: my1
RPAREN: )
ID: s
ID: h
TIMES: *
ID: mx2
SEMI: ;
NEWLINE: 

ID: else
ID: if
LPAREN: (
ID: my1
ID: mx1
RPAREN: )
ID: s
ID: w
TIMES: *
ID: my2
SEMI: ;
NEWLINE: 

ID: else
LBRACE: {
NEWLINE: 

ID: r
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: s
ID: h
TIMES: *
ID: mx2
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%d %d"
ID: s
ID: r
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
