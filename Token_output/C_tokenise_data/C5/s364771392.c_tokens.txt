ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
NEWLINE: 

LBRACE: {
NEWLINE: 

ID: int
ID: w
ID: h
ID: x
ID: y
ID: n
SEMI: ;
NEWLINE: 

ID: double
ID: m1
ID: m2
ID: m
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d%d%d%d"
ID: w
ID: h
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 


ID: if
LPAREN: (
ID: w
NUMBER: 0
ID: h
NUMBER: 0
LPAREN: (
ID: x
NUMBER: 0
ID: y
NUMBER: 0
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: m
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%f %d"
ID: m
NUMBER: 0
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: if
LPAREN: (
ID: w
TIMES: *
ID: y
ID: w
TIMES: *
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: m1
LPAREN: (
ID: double
RPAREN: )
ID: w
TIMES: *
ID: y
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: m1
LPAREN: (
ID: double
RPAREN: )
ID: w
TIMES: *
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: if
LPAREN: (
ID: h
TIMES: *
ID: x
ID: h
TIMES: *
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: m2
LPAREN: (
ID: double
RPAREN: )
ID: h
TIMES: *
ID: x
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: m2
LPAREN: (
ID: double
RPAREN: )
ID: h
TIMES: *
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: if
LPAREN: (
ID: m1
ID: m2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: m
ID: m1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: m
ID: m2
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: if
LPAREN: (
ID: m1
ID: m2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: n
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: n
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: printf
LPAREN: (
STRING: "%f %d"
ID: m
ID: n
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 


RBRACE: }
