ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 


ID: int
ID: main
LPAREN: (
ID: void
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: w
ID: h
ID: x
ID: y
ID: cnt_x
NUMBER: 0
ID: cnt_y
NUMBER: 0
ID: flag
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%d %d %d %d"
ID: w
ID: h
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: double
ID: x_cut1
ID: x_cut2
ID: y_cut1
ID: y_cut2
ID: min_x_cut
MINUS: -
NUMBER: 1
ID: min_y_cut
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 


ID: x_cut1
ID: x
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

ID: x_cut2
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: x_cut1
ID: x_cut2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: cnt_x
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: x_cut1
ID: x_cut2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: min_x_cut
ID: x_cut1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: min_x_cut
ID: x_cut2
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: y_cut1
ID: y
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

ID: y_cut2
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: y_cut1
ID: y_cut2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: cnt_y
PLUS: +
PLUS: +
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: y_cut1
ID: y_cut2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: min_y_cut
ID: y_cut1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: min_y_cut
ID: y_cut2
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: if
LPAREN: (
ID: cnt_x
ID: cnt_y
RPAREN: )
LBRACE: {
NEWLINE: 

ID: flag
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: if
LPAREN: (
ID: min_x_cut
ID: min_y_cut
RPAREN: )
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%lf %d\n"
ID: min_x_cut
ID: flag
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%lf %d\n"
ID: min_y_cut
ID: flag
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
