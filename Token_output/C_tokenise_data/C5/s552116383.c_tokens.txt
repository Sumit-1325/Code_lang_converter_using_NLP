ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 

ID: include
ID: stdio
ID: h
NEWLINE: 


ID: int
ID: compare
LPAREN: (
ID: const
ID: void
TIMES: *
ID: a
ID: const
ID: void
TIMES: *
ID: b
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: a
TIMES: *
LPAREN: (
ID: int
TIMES: *
RPAREN: )
ID: b
RPAREN: )
ID: return
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: return
MINUS: -
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
NEWLINE: 

LBRACE: {
ID: long
ID: long
ID: h
ID: w
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%lld%lld%lld%lld"
ID: h
ID: w
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

NEWLINE: 

ID: printf
LPAREN: (
STRING: "%.10lf"
LPAREN: (
ID: double
RPAREN: )
ID: h
DIVIDE: /
NUMBER: 2
NUMBER: 0
TIMES: *
LPAREN: (
ID: double
RPAREN: )
ID: w
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: h
NUMBER: 2
NUMBER: 0
ID: w
NUMBER: 2
NUMBER: 0
ID: x
ID: w
DIVIDE: /
NUMBER: 2
ID: y
ID: h
DIVIDE: /
NUMBER: 2
RPAREN: )
ID: printf
LPAREN: (
STRING: " 1"
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
ID: printf
LPAREN: (
STRING: " 0"
RPAREN: )
SEMI: ;
NEWLINE: 


ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

