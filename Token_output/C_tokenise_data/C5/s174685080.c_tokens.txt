ID: include
ID: stdio
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: double
ID: w
ID: h
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: double
ID: squ
ID: tri
SEMI: ;
NEWLINE: 

ID: int
ID: cnt
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: scanf
LPAREN: (
STRING: "%lf %lf %lf %lf"
ID: w
ID: h
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: x
ID: w
DIVIDE: /
NUMBER: 2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: y
ID: h
DIVIDE: /
NUMBER: 2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: x
TIMES: *
ID: h
ID: y
TIMES: *
ID: w
RPAREN: )
LBRACE: {
NEWLINE: 

ID: squ
ID: x
TIMES: *
ID: h
SEMI: ;
ID: cnt
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: x
TIMES: *
ID: h
ID: y
TIMES: *
ID: w
RPAREN: )
NEWLINE: 

ID: squ
ID: x
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

ID: squ
ID: y
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: x
TIMES: *
ID: h
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: w
RPAREN: )
LBRACE: {
NEWLINE: 

ID: squ
ID: x
TIMES: *
ID: h
SEMI: ;
ID: cnt
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: x
TIMES: *
ID: h
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: w
RPAREN: )
NEWLINE: 

ID: squ
ID: x
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

ID: squ
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: y
ID: h
DIVIDE: /
NUMBER: 2
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
ID: y
TIMES: *
ID: w
RPAREN: )
LBRACE: {
NEWLINE: 

ID: squ
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
SEMI: ;
ID: cnt
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
ID: y
TIMES: *
ID: w
RPAREN: )
NEWLINE: 

ID: squ
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

ID: squ
ID: y
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: w
RPAREN: )
LBRACE: {
NEWLINE: 

ID: squ
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
SEMI: ;
ID: cnt
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: w
RPAREN: )
NEWLINE: 

ID: squ
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

ID: squ
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: x
NUMBER: 0
ID: y
NUMBER: 0
ID: x
ID: w
ID: y
ID: h
RPAREN: )
LBRACE: {
NEWLINE: 

ID: tri
ID: w
TIMES: *
ID: h
DIVIDE: /
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: x
ID: w
DIVIDE: /
NUMBER: 2
ID: y
ID: h
DIVIDE: /
NUMBER: 2
RPAREN: )
NEWLINE: 

ID: tri
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: w
MINUS: -
ID: x
ID: h
MINUS: -
ID: y
RPAREN: )
NEWLINE: 

ID: tri
NUMBER: 2
TIMES: *
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
TIMES: *
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

ID: tri
NUMBER: 2
TIMES: *
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
TIMES: *
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: squ
ID: tri
RPAREN: )
LBRACE: {
NEWLINE: 

ID: cnt
NUMBER: 1
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%f %d\n"
ID: squ
ID: cnt
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
ID: if
LPAREN: (
ID: squ
ID: tri
RPAREN: )
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%f %d\n"
ID: squ
ID: cnt
RPAREN: )
SEMI: ;
NEWLINE: 

ID: else
NEWLINE: 

ID: printf
LPAREN: (
STRING: "%f %d\n"
ID: tri
ID: cnt
RPAREN: )
SEMI: ;
NEWLINE: 

RBRACE: }
