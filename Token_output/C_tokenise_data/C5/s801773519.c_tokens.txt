ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: math
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: int
ID: W
ID: H
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: double
ID: max
NUMBER: 0
SEMI: ;
NEWLINE: 

ID: int
ID: ans
NUMBER: 0
SEMI: ;
NEWLINE: 


ID: scanf
LPAREN: (
STRING: "%d%d%d%d"
ID: W
ID: H
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 


ID: if
LPAREN: (
ID: x
ID: y
RPAREN: )
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: H
ID: W
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
LPAREN: (
ID: W
MINUS: -
ID: x
RPAREN: )
TIMES: *
ID: H
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

NEWLINE: 

ID: max
ID: W
TIMES: *
ID: y
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: if
LPAREN: (
ID: W
ID: H
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
LPAREN: (
ID: H
MINUS: -
ID: y
RPAREN: )
TIMES: *
ID: W
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: max
ID: H
TIMES: *
ID: x
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: W
ID: H
RPAREN: )
LBRACE: {
NEWLINE: 

ID: ans
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: x
NUMBER: 0
ID: y
NUMBER: 0
RPAREN: )
LPAREN: (
ID: x
NUMBER: 0
ID: y
ID: H
RPAREN: )
LPAREN: (
ID: x
ID: W
ID: y
NUMBER: 0
RPAREN: )
LPAREN: (
ID: x
ID: W
ID: y
ID: H
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: max
LPAREN: (
ID: W
TIMES: *
ID: H
RPAREN: )
DIVIDE: /
NUMBER: 2
SEMI: ;
NEWLINE: 

ID: ans
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: printf
LPAREN: (
STRING: "%.11Lf %d"
ID: max
ID: ans
RPAREN: )
SEMI: ;
NEWLINE: 

ID: printf
LPAREN: (
STRING: "\n"
RPAREN: )
SEMI: ;
NEWLINE: 


RBRACE: }
NEWLINE: 

