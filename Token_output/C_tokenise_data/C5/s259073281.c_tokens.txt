ID: include
ID: math
ID: h
NEWLINE: 

ID: include
ID: stdio
ID: h
NEWLINE: 

ID: include
ID: string
ID: h
NEWLINE: 

ID: include
ID: stdlib
ID: h
NEWLINE: 

ID: void
ID: swap_int
LPAREN: (
ID: int
TIMES: *
ID: x
ID: int
TIMES: *
ID: y
RPAREN: )
LBRACE: {
ID: int
ID: temp
SEMI: ;
ID: temp
TIMES: *
ID: x
SEMI: ;
TIMES: *
ID: x
TIMES: *
ID: y
SEMI: ;
TIMES: *
ID: y
ID: temp
SEMI: ;
RBRACE: }
NEWLINE: 

ID: void
ID: swap_char
LPAREN: (
ID: char
TIMES: *
ID: x
ID: char
TIMES: *
ID: y
RPAREN: )
LBRACE: {
ID: char
ID: temp
SEMI: ;
ID: temp
TIMES: *
ID: x
SEMI: ;
TIMES: *
ID: x
TIMES: *
ID: y
SEMI: ;
TIMES: *
ID: y
ID: temp
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: max
LPAREN: (
ID: int
ID: x
ID: int
ID: y
RPAREN: )
LBRACE: {
ID: return
ID: x
ID: y
ID: x
ID: y
SEMI: ;
RBRACE: }
NEWLINE: 

ID: int
ID: min
LPAREN: (
ID: int
ID: x
ID: int
ID: y
RPAREN: )
LBRACE: {
ID: return
ID: x
ID: y
ID: y
ID: x
SEMI: ;
RBRACE: }
NEWLINE: 


ID: int
ID: main
LPAREN: (
RPAREN: )
LBRACE: {
NEWLINE: 

ID: double
ID: w
ID: h
ID: x
ID: y
SEMI: ;
NEWLINE: 

ID: double
ID: ans1
SEMI: ;
NEWLINE: 

ID: int
ID: ans2
SEMI: ;
NEWLINE: 


ID: scanf
LPAREN: (
STRING: "%lf %lf %lf %lf"
ID: w
ID: h
ID: x
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 


ID: double
ID: x1
ID: x
ID: x2
LPAREN: (
ID: w
MINUS: -
ID: x
RPAREN: )
SEMI: ;
NEWLINE: 

ID: double
ID: sx
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
LPAREN: (
ID: x1
TIMES: *
ID: h
RPAREN: )
LPAREN: (
ID: x2
TIMES: *
ID: h
RPAREN: )
RPAREN: )
LBRACE: {
NEWLINE: 

ID: sx
ID: x1
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: sx
ID: x2
TIMES: *
ID: h
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: double
ID: y1
ID: y
ID: y2
LPAREN: (
ID: h
MINUS: -
ID: y
RPAREN: )
SEMI: ;
NEWLINE: 

ID: double
ID: sy
SEMI: ;
NEWLINE: 

ID: if
LPAREN: (
ID: y1
TIMES: *
ID: w
ID: y2
TIMES: *
ID: w
RPAREN: )
LBRACE: {
NEWLINE: 

ID: sy
ID: y1
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: sy
ID: y2
TIMES: *
ID: w
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: if
LPAREN: (
ID: sx
ID: sy
RPAREN: )
LBRACE: {
NEWLINE: 

ID: ans2
NUMBER: 1
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: ans2
NUMBER: 0
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 

ID: if
LPAREN: (
ID: sx
ID: sy
RPAREN: )
LBRACE: {
NEWLINE: 

ID: ans1
ID: sy
SEMI: ;
NEWLINE: 

RBRACE: }
ID: else
LBRACE: {
NEWLINE: 

ID: ans1
ID: sx
SEMI: ;
NEWLINE: 

RBRACE: }
NEWLINE: 


ID: printf
LPAREN: (
STRING: "%.12lf %d\n"
ID: ans1
ID: ans2
RPAREN: )
SEMI: ;
NEWLINE: 

ID: return
NUMBER: 0
SEMI: ;
NEWLINE: 

NEWLINE: 

RBRACE: }
