//
 (Token.Comment.Single)
//  main.cpp
 (Token.Comment.Single)
//  CppTest
 (Token.Comment.Single)
//
 (Token.Comment.Single)
//  Created by Ryu on 2017/02/08.
 (Token.Comment.Single)
//  Copyright ?? 2017??Â´ Ryu. All rights reserved.
 (Token.Comment.Single)
//
 (Token.Comment.Single)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cmath> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
argc (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
argv (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// insert code here...
 (Token.Comment.Single)
     (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ios (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
200 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
b (Token.Name)
[ (Token.Punctuation)
200 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
keta (Token.Name)
[ (Token.Punctuation)
200 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
now (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
now (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
[ (Token.Punctuation)
now (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
p (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
now (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
[ (Token.Punctuation)
now (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
p (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
pow (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
k (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
k (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
keta (Token.Name)
[ (Token.Punctuation)
now (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
k (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
k (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
now (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
/*
    printf("finished");
    
    int n = 0;
    while(keta[n] == 0){
        printf("%d", keta[n]);
        n++;
    }
    */ (Token.Comment.Multiline)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
