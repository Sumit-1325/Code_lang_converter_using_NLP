# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
  (Token.Text.Whitespace)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
1000000 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
b (Token.Name)
[ (Token.Punctuation)
1000000 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
200 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
> (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
< (Token.Operator)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
1 (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
< (Token.Operator)
100 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
2 (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
< (Token.Operator)
1000 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
3 (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
< (Token.Operator)
10000 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
4 (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
< (Token.Operator)
100000 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
5 (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
< (Token.Operator)
1000000 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
6 (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
