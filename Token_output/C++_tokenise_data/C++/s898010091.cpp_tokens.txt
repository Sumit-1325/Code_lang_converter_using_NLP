# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<cstdio> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
d (Token.Name)
[ (Token.Punctuation)
9 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
; (Token.Punctuation)
~ (Token.Operator)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
sprintf (Token.Name)
( (Token.Punctuation)
d (Token.Name)
, (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
