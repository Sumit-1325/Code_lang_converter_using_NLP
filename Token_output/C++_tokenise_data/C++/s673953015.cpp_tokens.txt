# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stdio.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stdlib.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<string> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<vector> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<math.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<queue> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<functional> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<cstdlib> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<cmath> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define REP(i, n) for(int i = 0;i < n;i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define REPR(i, n) for(int i = n;i >= 0;i--) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define FOR(i, m, n) for(int i = m;i < n;i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define FORR(i, m, n) for(int i = m;i >= n;i--) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define CI cin >> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define CO cout << (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define E << endl; (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
P (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
long (Token.Keyword.Type)
, (Token.Punctuation)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
LP (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
  (Token.Text.Whitespace)
P (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
PP (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
long (Token.Keyword.Type)
, (Token.Punctuation)
  (Token.Text.Whitespace)
LP (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
LPP (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dy (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dx (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
A (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
B (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
K (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
W (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
H (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
L (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
S (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
ar (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
br (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
cr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
answer (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
C (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
sA (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
strB (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
vector (Token.Name)
< (Token.Operator)
char (Token.Keyword.Type)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
map (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
double (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
num (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
string (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
str (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
sum (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
value (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
weight (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dp (Token.Name)
[ (Token.Punctuation)
110 (Token.Literal.Number.Integer)
] (Token.Punctuation)
[ (Token.Punctuation)
10010 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
data_ (Token.Name)
[ (Token.Punctuation)
210 (Token.Literal.Number.Integer)
] (Token.Punctuation)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
-2 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
input (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
CI (Token.Name)
  (Token.Text.Whitespace)
data_ (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
data_ (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
void (Token.Keyword.Type)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
sum (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
numb (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
true (Token.Name.Builtin)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
sum (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
data_ (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
data_ (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
sum (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
numb (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
sum (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
10 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
data_ (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
-2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
break (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
CO (Token.Name)
  (Token.Text.Whitespace)
numb (Token.Name)
  (Token.Text.Whitespace)
E (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
