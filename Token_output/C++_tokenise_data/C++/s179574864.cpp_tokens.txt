//
 (Token.Comment.Single)
//  main.cpp
 (Token.Comment.Single)
//  b
 (Token.Comment.Single)
//
 (Token.Comment.Single)
//  Created by h3037178 on 2017/07/31.
 (Token.Comment.Single)
//  Copyright ?? 2017??´ ?????£?????????. All rights reserved.
 (Token.Comment.Single)
//
 (Token.Comment.Single)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
o (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
f (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
p (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
p (Token.Name)
< (Token.Operator)
200 (Token.Literal.Number.Integer)
; (Token.Punctuation)
p (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
i (Token.Name)
> (Token.Operator)
> (Token.Operator)
o (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
b (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
f (Token.Name)
= (Token.Operator)
i (Token.Name)
+ (Token.Operator)
o (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
f (Token.Name)
< (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
| (Token.Operator)
| (Token.Operator)
f (Token.Name)
> (Token.Operator)
2000000 (Token.Literal.Number.Integer)
   (Token.Text.Whitespace)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
break (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
j (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
j (Token.Name)
< (Token.Operator)
= (Token.Operator)
1000000 (Token.Literal.Number.Integer)
; (Token.Punctuation)
j (Token.Name)
= (Token.Operator)
j (Token.Name)
* (Token.Operator)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
o (Token.Name)
> (Token.Operator)
= (Token.Operator)
j (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
b (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
} (Token.Punctuation)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
break (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
b (Token.Name)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
