# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<sys/time.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define rep(i,n) for(long long i = 0; i < (long long)(n); i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define repi(i,a,b) for(long long i = (long long)(a); i < (long long)(b); i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb push_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define all(x) (x).begin(), (x).end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define fi first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define se second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mt make_tuple (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mp make_pair (Token.Comment.Preproc)

 (Token.Comment.Preproc)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T1 (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
  (Token.Text.Whitespace)
T2 (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmin (Token.Name)
( (Token.Punctuation)
T1 (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
T2 (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T1 (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
  (Token.Text.Whitespace)
T2 (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmax (Token.Name)
( (Token.Punctuation)
T1 (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
T2 (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
; (Token.Punctuation)
  (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
vll (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
vvll (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
vll (Token.Name)
> (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
P (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
ll (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
ugauss (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
! (Token.Operator)
a (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
^ (Token.Operator)
b (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
/ (Token.Operator)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
+ (Token.Operator)
( (Token.Punctuation)
a (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
? (Token.Operator)
-1 (Token.Literal.Number.Integer)
: (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
/ (Token.Operator)
b (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
lgauss (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
! (Token.Operator)
a (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
^ (Token.Operator)
b (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
+ (Token.Operator)
( (Token.Punctuation)
a (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
? (Token.Operator)
-1 (Token.Literal.Number.Integer)
: (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
/ (Token.Operator)
b (Token.Name)
-1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
/ (Token.Operator)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
   (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
( (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
first (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
second (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
) (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
size_t (Token.Keyword.Type)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
> (Token.Operator)
  (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
seq (Token.Name.Class)
{ (Token.Punctuation)
} (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
N (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
size_t (Token.Keyword.Type)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Is (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
gen_seq (Token.Name.Class)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
gen_seq (Token.Name)
< (Token.Operator)
N (Token.Name)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Is (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
> (Token.Operator)
{ (Token.Punctuation)
} (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
size_t (Token.Keyword.Type)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Is (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
gen_seq (Token.Name.Class)
< (Token.Operator)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Is (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
> (Token.Operator)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
seq (Token.Name)
< (Token.Operator)
Is (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
> (Token.Operator)
{ (Token.Punctuation)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
Ch (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
  (Token.Text.Whitespace)
Tr (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
  (Token.Text.Whitespace)
Tuple (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
size_t (Token.Keyword.Type)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Is (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
print_tuple (Token.Name)
( (Token.Punctuation)
basic_ostream (Token.Name)
< (Token.Operator)
Ch (Token.Name)
, (Token.Punctuation)
Tr (Token.Name)
> (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
os (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tuple (Token.Name)
  (Token.Text.Whitespace)
const (Token.Keyword)
& (Token.Operator)
  (Token.Text.Whitespace)
t (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
seq (Token.Name)
< (Token.Operator)
Is (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
> (Token.Operator)
) (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
s (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
[ (Token.Punctuation)
] (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
void (Token.Keyword.Type)
) (Token.Punctuation)
s (Token.Name)
{ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
void (Token.Keyword.Type)
( (Token.Punctuation)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
Is (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
get (Token.Name)
< (Token.Operator)
Is (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
t (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
} (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
Ch (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
  (Token.Text.Whitespace)
Tr (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Args (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
basic_ostream (Token.Name)
< (Token.Operator)
Ch (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tr (Token.Name)
> (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
os (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
tuple (Token.Name)
< (Token.Operator)
Args (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
> (Token.Operator)
  (Token.Text.Whitespace)
const (Token.Keyword)
& (Token.Operator)
  (Token.Text.Whitespace)
t (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
- (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
basic_ostream (Token.Name)
< (Token.Operator)
Ch (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tr (Token.Name)
> (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
( (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
  (Token.Text.Whitespace)
print_tuple (Token.Name)
( (Token.Punctuation)
os (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
t (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
gen_seq (Token.Name)
< (Token.Operator)
sizeof (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
( (Token.Punctuation)
Args (Token.Name)
) (Token.Punctuation)
> (Token.Operator)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
) (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
vvll (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
j (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
[ (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)
  (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
] (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
deque (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
[ (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)
  (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
] (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
   (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
set (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
[ (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
it (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
next (Token.Name)
( (Token.Punctuation)
it (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
] (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
   (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
unordered_set (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
[ (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
it (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
next (Token.Name)
( (Token.Punctuation)
it (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
] (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
> (Token.Operator)
   (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
map (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
[ (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
it (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
next (Token.Name)
( (Token.Punctuation)
it (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
] (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name.Class)
> (Token.Operator)
   (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
unordered_map (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
V (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
[ (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
it (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
] (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
y (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
( (Token.Punctuation)
y (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
iota (Token.Name)
( (Token.Punctuation)
v (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
v (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
istream (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
operator (Token.Keyword)
> (Token.Operator)
> (Token.Operator)
( (Token.Punctuation)
istream (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
o (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
j (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
o (Token.Name)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
S (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
priority_queue (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
S (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
tmp (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
tmp (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
tmp (Token.Name)
. (Token.Punctuation)
top (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
tmp (Token.Name)
. (Token.Punctuation)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
queue (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
tmp (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
tmp (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
tmp (Token.Name)
. (Token.Punctuation)
front (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
tmp (Token.Name)
. (Token.Punctuation)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
o (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
stack (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
tmp (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
tmp (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
tmp (Token.Name)
. (Token.Punctuation)
top (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
tmp (Token.Name)
. (Token.Punctuation)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
o (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
o (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
unordered_map (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
counter (Token.Name)
( (Token.Punctuation)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
unordered_map (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
ret (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
ret (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
ret (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
vizGraph (Token.Name)
( (Token.Punctuation)
vvll (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
g (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
mode (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
filename (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
out.png (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
ofstream (Token.Name)
  (Token.Text.Whitespace)
ofs (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
./out.dot (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
ofs (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
digraph graph_name { (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
set (Token.Name)
< (Token.Operator)
P (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
memo (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
g (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
   (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
j (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
g (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
mode (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
memo (Token.Name)
. (Token.Punctuation)
count (Token.Name)
( (Token.Punctuation)
P (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
g (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
| (Token.Operator)
| (Token.Operator)
  (Token.Text.Whitespace)
memo (Token.Name)
. (Token.Punctuation)
count (Token.Name)
( (Token.Punctuation)
P (Token.Name)
( (Token.Punctuation)
g (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
continue (Token.Keyword)
; (Token.Punctuation)
  (Token.Text.Whitespace)
memo (Token.Name)
. (Token.Punctuation)
insert (Token.Name)
( (Token.Punctuation)
P (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
g (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
ofs (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
     (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
 ->  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
g (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
mode (Token.Name)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
 [arrowhead = none] (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)
   (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
ofs (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
} (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
ofs (Token.Name)
. (Token.Punctuation)
close (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
system (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
( (Token.Punctuation)
string (Token.Name)
) (Token.Punctuation)
" (Token.Literal.String)
dot -T png out.dot > (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
filename (Token.Name)
) (Token.Punctuation)
. (Token.Punctuation)
c_str (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
timeval (Token.Name.Class)
  (Token.Text.Whitespace)
start (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
sec (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
timeval (Token.Name.Class)
  (Token.Text.Whitespace)
tv (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
gettimeofday (Token.Name)
( (Token.Punctuation)
& (Token.Operator)
tv (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
NULL (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
tv (Token.Name)
. (Token.Punctuation)
tv_sec (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
start (Token.Name)
. (Token.Punctuation)
tv_sec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
tv (Token.Name)
. (Token.Punctuation)
tv_usec (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
start (Token.Name)
. (Token.Punctuation)
tv_usec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
1e-6 (Token.Literal.Number.Float)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
random_seed (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
init_ (Token.Name.Class)
{ (Token.Punctuation)
init_ (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
ios (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
gettimeofday (Token.Name)
( (Token.Punctuation)
& (Token.Operator)
start (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
NULL (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
timeval (Token.Name.Class)
  (Token.Text.Whitespace)
myTime (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
tm (Token.Name.Class)
  (Token.Text.Whitespace)
* (Token.Operator)
time_st (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
gettimeofday (Token.Name)
( (Token.Punctuation)
& (Token.Operator)
myTime (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
NULL (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
time_st (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
localtime (Token.Name)
( (Token.Punctuation)
& (Token.Operator)
myTime (Token.Name)
. (Token.Punctuation)
tv_sec (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
srand (Token.Name)
( (Token.Punctuation)
myTime (Token.Name)
. (Token.Punctuation)
tv_usec (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
random_seed (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
RAND_MAX (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
rand (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
} (Token.Punctuation)
  (Token.Text.Whitespace)
init__ (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define ldout fixed << setprecision(40)  (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define EPS (double)1e-14 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define INF (ll)1e18 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mo  (ll)(1e9+7) (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
void (Token.Keyword.Type)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
s (Token.Name)
; (Token.Punctuation)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
s (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
3 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
1 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
9 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
1 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
