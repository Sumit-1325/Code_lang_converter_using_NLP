# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stdio.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<string> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<string.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<math.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stdlib.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<vector> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<queue> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<tuple> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(index,num) for(int index=0;index<num;index++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep1(index,num) for(int index=1;index<=num;index++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define scan(argument) cin>>argument (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define prin(argument) cout<<argument<<endl (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define kaigyo cout<<endl (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define eps 1e-15 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mp(a1,a2) make_pair(a1,a2) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
ll (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
pll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
pint (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
vint (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
pint (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vpint (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
pll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vpll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
INFl (Token.Name)
= (Token.Operator)
1e+18 (Token.Literal.Number.Float)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
INF (Token.Name)
= (Token.Operator)
1e+9 (Token.Literal.Number.Float)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
S (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
scan (Token.Name)
( (Token.Punctuation)
S (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
S (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
S (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
1 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
  (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
9 (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
S (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
9 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
  (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
1 (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%c (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
S (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
kaigyo (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
