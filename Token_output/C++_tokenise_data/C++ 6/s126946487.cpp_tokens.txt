import (Token.Keyword)
  (Token.Text.Whitespace)
sys (Token.Name)

 (Token.Text.Whitespace)
import (Token.Keyword)
  (Token.Text.Whitespace)
math (Token.Name)

 (Token.Text.Whitespace)
import (Token.Keyword)
  (Token.Text.Whitespace)
collections (Token.Name)

 (Token.Text.Whitespace)
import (Token.Keyword)
  (Token.Text.Whitespace)
itertools (Token.Name)

 (Token.Text.Whitespace)
import (Token.Keyword)
  (Token.Text.Whitespace)
array (Token.Name)

 (Token.Text.Whitespace)
import (Token.Keyword)
  (Token.Text.Whitespace)
inspect (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
 Set max recursion limit (Token.Comment.Preproc)

 (Token.Comment.Preproc)
sys (Token.Name)
. (Token.Punctuation)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
1000000 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
 Debug output (Token.Comment.Preproc)

 (Token.Comment.Preproc)
def (Token.Name)
  (Token.Text.Whitespace)
chkprint (Token.Name)
( (Token.Punctuation)
* (Token.Operator)
args (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
names (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
id (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
: (Token.Operator)
  (Token.Text.Whitespace)
k (Token.Name)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
k (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
inspect (Token.Name)
. (Token.Punctuation)
currentframe (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Punctuation)
f_back (Token.Name)
. (Token.Punctuation)
f_locals (Token.Name)
. (Token.Punctuation)
items (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
print (Token.Name)
( (Token.Punctuation)
' (Token.Error)
, (Token.Punctuation)
  (Token.Text.Whitespace)
' (Token.Error)
. (Token.Punctuation)
join (Token.Name)
( (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
names (Token.Name)
. (Token.Punctuation)
get (Token.Name)
( (Token.Punctuation)
id (Token.Name)
( (Token.Punctuation)
arg (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
' (Token.Error)
? (Token.Operator)
? (Token.Operator)
? (Token.Operator)
' (Token.Error)
) (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Error)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Error)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
repr (Token.Name)
( (Token.Punctuation)
arg (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
arg (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
args (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
 Binary converter (Token.Comment.Preproc)

 (Token.Comment.Preproc)
def (Token.Name)
  (Token.Text.Whitespace)
to_bin (Token.Name)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
bin (Token.Name)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
: (Token.Operator)
] (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
li_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
[ (Token.Punctuation)
int (Token.Keyword.Type)
( (Token.Punctuation)
_ (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
_ (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Punctuation)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
m (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Name.Label)
: (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
m (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
gcd_list (Token.Name)
( (Token.Punctuation)
L (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
v (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
L (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
len (Token.Name)
( (Token.Punctuation)
L (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
v (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
v (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
L (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
v (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
lcm (Token.Name)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
// gcd(n, m)
 (Token.Comment.Single)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
lcm_list (Token.Name)
( (Token.Punctuation)
L (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
v (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
L (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
len (Token.Name)
( (Token.Punctuation)
L (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
v (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
lcm (Token.Name)
( (Token.Punctuation)
v (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
L (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
v (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
 Width First Search (+ Distance) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
def (Token.Name)
  (Token.Text.Whitespace)
wfs_d (Token.Name)
( (Token.Punctuation)
D (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
K (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
" (Token.Literal.String)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
D (Token.Name.Label)
: (Token.Punctuation)
  (Token.Text.Whitespace)
隣接行列 (Token.Name)
( (Token.Punctuation)
距離付き (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
N (Token.Name.Label)
: (Token.Punctuation)
  (Token.Text.Whitespace)
ノード数 (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
K (Token.Name.Label)
: (Token.Punctuation)
  (Token.Text.Whitespace)
始点ノード (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
" (Token.Literal.String)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
dfk (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
[ (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
N (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
dfk (Token.Name)
[ (Token.Punctuation)
K (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cps (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
[ (Token.Punctuation)
( (Token.Punctuation)
K (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
] (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
[ (Token.Punctuation)
False (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
N (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
r (Token.Name)
[ (Token.Punctuation)
K (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
True (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
len (Token.Name)
( (Token.Punctuation)
cps (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
n_cps (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
[ (Token.Punctuation)
] (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
cp (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
cd (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
cps (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
dfcp (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
enumerate (Token.Name)
( (Token.Punctuation)
D (Token.Name)
[ (Token.Punctuation)
cp (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
dfcp (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
not (Token.Keyword)
  (Token.Text.Whitespace)
r (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
                     (Token.Text.Whitespace)
dfk (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
cd (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
dfcp (Token.Name)

 (Token.Text.Whitespace)
                     (Token.Text.Whitespace)
n_cps (Token.Name)
. (Token.Punctuation)
append (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
cd (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
dfcp (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
                     (Token.Text.Whitespace)
r (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
True (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cps (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
n_cps (Token.Name)
[ (Token.Punctuation)
: (Token.Operator)
] (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
dfk (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
 Depth First Search (+Distance) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
def (Token.Name)
  (Token.Text.Whitespace)
dfs_d (Token.Name)
( (Token.Punctuation)
v (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
pre (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
dist (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
" (Token.Literal.String)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
v (Token.Name.Label)
: (Token.Punctuation)
   (Token.Text.Whitespace)
現在のノード (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
pre (Token.Name.Label)
: (Token.Punctuation)
  (Token.Text.Whitespace)
１ (Token.Literal.Number.Integer)
つ前のノード (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
dist (Token.Name.Label)
: (Token.Punctuation)
  (Token.Text.Whitespace)
現在の距離 (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
以下は別途用意する (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
D (Token.Name.Label)
: (Token.Punctuation)
  (Token.Text.Whitespace)
隣接リスト (Token.Name)
( (Token.Punctuation)
行列ではない (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
D_dfs_d (Token.Name.Label)
: (Token.Punctuation)
  (Token.Text.Whitespace)
dfs_d関数で用いる (Token.Name)
， (Token.Error)
始点ノードから見た距離リスト (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
" (Token.Literal.String)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
global (Token.Name)
  (Token.Text.Whitespace)
D (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
global (Token.Name)
  (Token.Text.Whitespace)
D_dfs_d (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
D_dfs_d (Token.Name)
[ (Token.Punctuation)
v (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
dist (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
next_v (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
d (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
D (Token.Name)
[ (Token.Punctuation)
v (Token.Name)
] (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
next_v (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
pre (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
dfs_d (Token.Name)
( (Token.Punctuation)
next_v (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
dist (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
d (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
sigma (Token.Name)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
ans (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
comb (Token.Name)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
: (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
: (Token.Operator)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
: (Token.Operator)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
n (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
numerator (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
[ (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
denominator (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
[ (Token.Punctuation)
k (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
p (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
pivot (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
denominator (Token.Name)
[ (Token.Punctuation)
p (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
pivot (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
offset (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
p (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
p (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
numerator (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
offset (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
/ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
pivot (Token.Name)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
denominator (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
/ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
pivot (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
result (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
range (Token.Name)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
numerator (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
result (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
numerator (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
result (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
bisearch (Token.Name)
( (Token.Punctuation)
L (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
target (Token.Name)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
low (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
high (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
len (Token.Name)
( (Token.Punctuation)
L (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
low (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
high (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
mid (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
low (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
high (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
// 2
 (Token.Comment.Single)
         (Token.Text.Whitespace)
guess (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
L (Token.Name)
[ (Token.Punctuation)
mid (Token.Name)
] (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
guess (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
target (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
True (Token.Name)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
elif (Token.Name)
  (Token.Text.Whitespace)
guess (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
target (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
low (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
mid (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
elif (Token.Name)
  (Token.Text.Whitespace)
guess (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
target (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
high (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
mid (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
guess (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
target (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
False (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
 -------------------------------------------- (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
dp (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
None (Token.Name)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
def (Token.Name)
  (Token.Text.Whitespace)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
N (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
in (Token.Name)
  (Token.Text.Whitespace)
N (Token.Name)
: (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
1 (Token.Literal.String)
" (Token.Literal.String)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
print (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
9 (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
elif (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
9 (Token.Literal.String)
" (Token.Literal.String)
: (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
print (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
1 (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Name.Label)
: (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
print (Token.Name)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
print (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
