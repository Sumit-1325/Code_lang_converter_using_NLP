# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
// Begin {{{
 (Token.Comment.Single)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define all(x) x.begin(), x.end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i, n) for (i64 i = 0; i < (n); ++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define reps(i, s, n) for (i64 i = (s); i <= (n); ++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define VAR(Type, ...) Type __VA_ARGS__; IN(__VA_ARGS__) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define Float(x) OUTN(fixed, setprecision(x)); (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
i64 (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
int_fast64_t (Token.Keyword.Type)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
pii (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
i64 (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
i64 (Token.Name)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
A (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
  (Token.Text.Whitespace)
B (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
inline (Token.Keyword.Reserved)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmax (Token.Name)
( (Token.Punctuation)
A (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
B (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
A (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
  (Token.Text.Whitespace)
B (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
inline (Token.Keyword.Reserved)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmin (Token.Name)
( (Token.Punctuation)
A (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
B (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
constexpr (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
INF (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0x3f3f3f3f (Token.Literal.Number.Hex)
; (Token.Punctuation)

 (Token.Text.Whitespace)
constexpr (Token.Keyword)
  (Token.Text.Whitespace)
i64 (Token.Name)
  (Token.Text.Whitespace)
LINF (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0x3f3f3f3f3f3f3f3fLL (Token.Literal.Number.Hex)
; (Token.Punctuation)

 (Token.Text.Whitespace)
constexpr (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
MOD (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
1e9 (Token.Literal.Number.Float)
) (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
7 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
// IN
 (Token.Comment.Single)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
IN (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
Head (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
IN (Token.Name)
( (Token.Punctuation)
Head (Token.Name)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
& (Token.Operator)
& (Token.Operator)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
tail (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
IN (Token.Name)
( (Token.Punctuation)
forward (Token.Name)
< (Token.Operator)
Tail (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
tail (Token.Name)
) (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
// OUTS
 (Token.Comment.Single)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTS (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
Head (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTS (Token.Name)
( (Token.Punctuation)
Head (Token.Name)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
& (Token.Operator)
& (Token.Operator)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
tail (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
[ (Token.Punctuation)
sizeof (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
( (Token.Punctuation)
tail (Token.Name)
) (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
OUTS (Token.Name)
( (Token.Punctuation)
forward (Token.Name)
< (Token.Operator)
Tail (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
tail (Token.Name)
) (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTS (Token.Name)
( (Token.Punctuation)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
vec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
& (Token.Operator)
e (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
e (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
[ (Token.Punctuation)
& (Token.Operator)
e (Token.Name)
= (Token.Operator)
= (Token.Operator)
& (Token.Operator)
vec (Token.Name)
. (Token.Punctuation)
back (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTS (Token.Name)
( (Token.Punctuation)
vector (Token.Name)
< (Token.Operator)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
df (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
& (Token.Operator)
vec (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
df (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
OUTS (Token.Name)
( (Token.Punctuation)
vec (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
// OUTL
 (Token.Comment.Single)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTL (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
Head (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTL (Token.Name)
( (Token.Punctuation)
Head (Token.Name)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
& (Token.Operator)
& (Token.Operator)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
tail (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
OUTL (Token.Name)
( (Token.Punctuation)
forward (Token.Name)
< (Token.Operator)
Tail (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
tail (Token.Name)
) (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTL (Token.Name)
( (Token.Punctuation)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
vec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
& (Token.Operator)
e (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
e (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
// OUTN
 (Token.Comment.Single)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTN (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
Head (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
OUTN (Token.Name)
( (Token.Punctuation)
Head (Token.Name)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
& (Token.Operator)
& (Token.Operator)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
tail (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
OUTN (Token.Name)
( (Token.Punctuation)
forward (Token.Name)
< (Token.Operator)
Tail (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
tail (Token.Name)
) (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
// }}} End
 (Token.Comment.Single)

 (Token.Text.Whitespace)
signed (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
ios (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
nullptr (Token.Keyword)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
VAR (Token.Name)
( (Token.Punctuation)
string (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
s (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
& (Token.Operator)
e (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
e (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
1 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
  (Token.Text.Whitespace)
e (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
9 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
e (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
1 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
OUTL (Token.Name)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
