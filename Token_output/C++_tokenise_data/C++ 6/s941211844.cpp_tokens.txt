/*																													   
 Templatka c++ Kacper Fis																							   																											   //
*/ (Token.Comment.Multiline)
																													   (Token.Text.Whitespace)

 (Token.Text.Whitespace)
																													    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iostream> (Token.Comment.PreprocFile)
       	 (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cstdio> (Token.Comment.PreprocFile)
          (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<limits> (Token.Comment.PreprocFile)
		   (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cstdlib> (Token.Comment.PreprocFile)
        (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<utility> (Token.Comment.PreprocFile)
         (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iterator> (Token.Comment.PreprocFile)
        (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bitset> (Token.Comment.PreprocFile)
          (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<list> (Token.Comment.PreprocFile)
            (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<vector> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<unordered_map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<set> (Token.Comment.PreprocFile)
            														    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<queue> (Token.Comment.PreprocFile)
          																							    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<deque> (Token.Comment.PreprocFile)
          																							    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<stack> (Token.Comment.PreprocFile)
																									    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<algorithm> (Token.Comment.PreprocFile)
																								    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cmath> (Token.Comment.PreprocFile)
																									    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<string> (Token.Comment.PreprocFile)
      																								    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<time.h> (Token.Comment.PreprocFile)
																									    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iomanip> (Token.Comment.PreprocFile)
 																									    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<sstream> (Token.Comment.PreprocFile)
																									    (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)
																							    (Token.Comment.Single)

 (Token.Comment.Preproc)
																													    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)
 																								    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
																													    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
INF (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1000000001 (Token.Literal.Number.Integer)
; (Token.Punctuation)
																						    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
float (Token.Keyword.Type)
  (Token.Text.Whitespace)
PI (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
3.14 (Token.Literal.Number.Float)
; (Token.Punctuation)
																								    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
LL (Token.Name)
; (Token.Punctuation)
																								    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
																													    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
vi (Token.Name)
; (Token.Punctuation)
																								    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
list (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
li (Token.Name)
; (Token.Punctuation)
																								    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
queue (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
qi (Token.Name)
; (Token.Punctuation)
 																								    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
ii (Token.Name)
; (Token.Punctuation)
 																							    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
map (Token.Name)
< (Token.Operator)
string (Token.Name)
, (Token.Punctuation)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
msi (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
//np msi['nazwa'] = 'liczba'															   
 (Token.Comment.Single)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ii (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vii (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
//vector par<int>, do tworzenia tablicy dla grafów wagowych #dijkstra #Bellman_Ford			   
 (Token.Comment.Single)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
priority_queue (Token.Name)
< (Token.Operator)
  (Token.Text.Whitespace)
ii (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ii (Token.Name)
> (Token.Operator)
, (Token.Punctuation)
  (Token.Text.Whitespace)
greater (Token.Name)
< (Token.Operator)
ii (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
pq (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
//kolejka priorytetowa vectorów par(top()=min) #dijkstra	   
 (Token.Comment.Single)
																													    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
//list<int>::iterator it;																								   
 (Token.Comment.Single)
list (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
iterator (Token.Name)
  (Token.Text.Whitespace)
it1 (Token.Name)
; (Token.Punctuation)
																							    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
iterator (Token.Name)
  (Token.Text.Whitespace)
it2 (Token.Name)
; (Token.Punctuation)
																							    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
iterator (Token.Name)
  (Token.Text.Whitespace)
it3 (Token.Name)
; (Token.Punctuation)
																							    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
set (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
iterator (Token.Name)
  (Token.Text.Whitespace)
it4 (Token.Name)
; (Token.Punctuation)
																								    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
map (Token.Name)
< (Token.Operator)
string (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
iterator (Token.Name)
  (Token.Text.Whitespace)
it5 (Token.Name)
; (Token.Punctuation)
 																					    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ii (Token.Name)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
iterator (Token.Name)
  (Token.Text.Whitespace)
iter (Token.Name)
; (Token.Punctuation)
																							    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
																													   																				    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define print_list(x) for(it = (x).begin(); it != (x).end(); it++) {cout << *it << " ";}							    (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define print_vector(x) for(it2 = (x).begin(); it2 != (x).end(); it2++) {cout << *it2 << " ";}						    (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define search_list(x) for(it = (x).begin(); it != (x).end(); it++)													    (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define search_vector(x) for(it2 = (x).begin(); it2 != (x).end(); it2++);											    (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb(x) push_back(x) 																							    (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pf(x) push_front(x)																							    (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mp(x, y) make_pair(x, y)                                                                                        (Token.Comment.Preproc)

 (Token.Comment.Preproc)
///////////////////////////////////////////////GLOBAL DEFINITIONS////////////////////////////////////////////////////////
 (Token.Comment.Single)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
counter (Token.Name)
[ (Token.Punctuation)
100005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
counter2 (Token.Name)
[ (Token.Punctuation)
100005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
maxi1 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
maxi2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
id1 (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
id2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
///////////////////////////////////////////////////FUNCTIONS/////////////////////////////////////////////////////////////
 (Token.Comment.Single)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
/////////////////////////////////////////////////////MAIN////////////////////////////////////////////////////////////////
 (Token.Comment.Single)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
argc (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
char (Token.Keyword.Type)
* (Token.Operator)
  (Token.Text.Whitespace)
argv (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
																					  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
{ (Token.Punctuation)
ios_base (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
NULL (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
counter (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
maxi1 (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
counter (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
maxi1 (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
counter (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
id1 (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
counter2 (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
maxi2 (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
counter2 (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
maxi2 (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
counter2 (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
id2 (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
sort (Token.Name)
( (Token.Punctuation)
counter (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
counter (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
100003 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
sort (Token.Name)
( (Token.Punctuation)
counter2 (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
counter2 (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
100003 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
id1 (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
id2 (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
maxi1 (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
maxi2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
maxi1 (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
counter2 (Token.Name)
[ (Token.Punctuation)
100001 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
maxi2 (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
counter (Token.Name)
[ (Token.Punctuation)
100001 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)
              												        (Token.Text.Whitespace)

 (Token.Text.Whitespace)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 (Token.Comment.Single)
