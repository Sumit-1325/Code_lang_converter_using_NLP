# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
vl (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vvl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
ll (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
pl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
pl (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vp (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define fore(i,a,b) for(ll i=(a);i<=(b);++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i,n) fore(i,0,(n)-1) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rfore(i,a,b) for(ll i=(b);i>=(a);--i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rrep(i,n) rfore(i,0,(n)-1) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define all(x) (x).begin(),(x).end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
INF (Token.Name)
= (Token.Operator)
1001001001 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
LINF (Token.Name)
= (Token.Operator)
1001001001001001001 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
D4 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
D8 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmax (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
< (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
b (Token.Name)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
} (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmin (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
b (Token.Name)
< (Token.Operator)
a (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
b (Token.Name)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
} (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
sum (Token.Name)
( (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
accumulate (Token.Name)
( (Token.Punctuation)
all (Token.Name)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
0L (Token.Literal.Number.Float)
L (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
solve (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
vl (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
reverse (Token.Name)
( (Token.Punctuation)
all (Token.Name)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
i (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ios (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
solve (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
