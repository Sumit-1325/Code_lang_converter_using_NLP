# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stdio.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d %d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
& (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
& (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
k (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
z (Token.Name)
, (Token.Punctuation)
Z (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
< (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
x (Token.Name)
; (Token.Punctuation)
Z (Token.Name)
= (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
Z (Token.Name)
= (Token.Operator)
x (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
sz (Token.Name)
= (Token.Operator)
Z (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
z (Token.Name)
< (Token.Operator)
= (Token.Operator)
sz (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
n (Token.Name)
= (Token.Operator)
z (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
> (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
; (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
- (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
z (Token.Name)
% (Token.Operator)
n (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
{ (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
Z (Token.Name)
% (Token.Operator)
n (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
k (Token.Name)
= (Token.Operator)
n (Token.Name)
; (Token.Punctuation)
break (Token.Keyword)
; (Token.Punctuation)
} (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
      (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
      (Token.Text.Whitespace)
else (Token.Keyword)

 (Token.Text.Whitespace)
      (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
n (Token.Name)
= (Token.Operator)
sz (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
> (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
; (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
- (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
z (Token.Name)
% (Token.Operator)
n (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
                     (Token.Text.Whitespace)
{ (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
Z (Token.Name)
% (Token.Operator)
n (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
k (Token.Name)
= (Token.Operator)
n (Token.Name)
; (Token.Punctuation)
break (Token.Keyword)
; (Token.Punctuation)
} (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
      (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
k (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
