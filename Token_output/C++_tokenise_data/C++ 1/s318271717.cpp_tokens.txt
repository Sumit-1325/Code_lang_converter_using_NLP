# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
p (Token.Name)
, (Token.Punctuation)
q (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
switching (Token.Name)
= (Token.Operator)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
> (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
true (Token.Name.Builtin)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
switching (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
p (Token.Name)
= (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
q (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
switching (Token.Name)
= (Token.Operator)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
q (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
					 (Token.Text.Whitespace)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
y (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
					 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			      (Token.Text.Whitespace)
x (Token.Name)
= (Token.Operator)
q (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
y (Token.Name)
= (Token.Operator)
p (Token.Name)
% (Token.Operator)
q (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
switching (Token.Name)
= (Token.Operator)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
				      (Token.Text.Whitespace)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
q (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
					  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
} (Token.Punctuation)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
			  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
< (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
true (Token.Name.Builtin)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
switching (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
p (Token.Name)
= (Token.Operator)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
q (Token.Name)
= (Token.Operator)
y (Token.Name)
% (Token.Operator)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
switching (Token.Name)
= (Token.Operator)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
q (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
					 (Token.Text.Whitespace)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
x (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
					 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			      (Token.Text.Whitespace)
y (Token.Name)
= (Token.Operator)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
x (Token.Name)
= (Token.Operator)
q (Token.Name)
% (Token.Operator)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
switching (Token.Name)
= (Token.Operator)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
				      (Token.Text.Whitespace)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
p (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
					  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				  (Token.Text.Whitespace)
} (Token.Punctuation)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
			  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
