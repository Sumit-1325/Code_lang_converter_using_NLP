# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<stdio.h> (Token.Comment.PreprocFile)
  (Token.Comment.Single)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
void (Token.Keyword.Type)
) (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
y (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
tmp (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
& (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
& (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
< (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
tmp (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
tmp (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
r (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
r (Token.Name)
! (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
