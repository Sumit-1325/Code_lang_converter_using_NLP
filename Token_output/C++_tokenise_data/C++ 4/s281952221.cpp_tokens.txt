# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<ext/pb_ds/assoc_container.hpp> (Token.Comment.PreprocFile)
 // Common file (Token.Comment.Single)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<ext/pb_ds/tree_policy.hpp> (Token.Comment.PreprocFile)
 // Including tree_order_statistics_node_update (Token.Comment.Single)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
__gnu_pbds (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
//find_by_order gives kth-largest element
 (Token.Comment.Single)
//order_of_key gives the number of items in the set that are strictly smaller!!
 (Token.Comment.Single)

 (Token.Text.Whitespace)
// OT.find_by_order(k-1)
 (Token.Comment.Single)
// 
 (Token.Comment.Single)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
tree (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
  (Token.Text.Whitespace)
null_type (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
less (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
, (Token.Punctuation)
  (Token.Text.Whitespace)
rb_tree_tag (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
tree_order_statistics_node_update (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
ordered_set (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define db(x) cerr << #x << "=" << x << endl (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define db2(x, y) cerr << #x << "=" << x << "," << #y << "=" << y << endl (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define db3(x, y, z) cerr << #x << "=" << x << "," << #y << "=" << y << "," << #z << "=" << z << endl (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define db4(x, y, z, w) cerr << #x << "=" << x << "," << #y << "=" << y << "," << #z << "=" << z << "," << #w << "=" << w << endl (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ll long long (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb push_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define eb emplace_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define all(x) (x).begin(), (x).end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mp make_pair (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define X first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define Y second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sz(x) (int)((x).size()) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pii pair<int,int> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define MOD (ll)(1e9 + 7) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i, n)    for(int i = 0; i < (n); ++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define repA(i, a, n)  for(int i = a; i <= (n); ++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define repD(i, a, n)  for(int i = a; i >= (n); --i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define trav(a, x) for(auto& a : x) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
vi (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define inf (ll)(1e18) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define double long double (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define int long long (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
//////////////////////
 (Token.Comment.Single)

 (Token.Text.Whitespace)
int32_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ios (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
left (Token.Name)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
right (Token.Name)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
    	 (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
left (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
repA (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
n (Token.Name)
-1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
    	 (Token.Text.Whitespace)
left (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
vec (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
left (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
right (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vec (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
repD (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
n (Token.Name)
-2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
    	 (Token.Text.Whitespace)
right (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
vec (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
right (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
right (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
\n (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
repA (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
n (Token.Name)
-2 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
    	 (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
left (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
right (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
\n (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
left (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
\n (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
