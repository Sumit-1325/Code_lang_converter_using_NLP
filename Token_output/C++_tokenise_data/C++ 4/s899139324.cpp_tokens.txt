# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cmath> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
maxi (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
t (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
, (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
pos (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
   (Token.Text.Whitespace)
m (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
pos (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
m (Token.Name)
= (Token.Operator)
t (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
m (Token.Name)
= (Token.Operator)
t (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
n (Token.Name)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
i (Token.Name)
! (Token.Operator)
= (Token.Operator)
pos (Token.Name)
) (Token.Punctuation)
& (Token.Operator)
& (Token.Operator)
( (Token.Punctuation)
t (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
m (Token.Name)
= (Token.Operator)
t (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
m (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
  (Token.Text.Whitespace)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
im (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
im (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
n (Token.Name)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
            (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
            (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
im (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
im (Token.Name)
= (Token.Operator)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
n (Token.Name)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
i (Token.Name)
! (Token.Operator)
= (Token.Operator)
im (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
im (Token.Name)
] (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
maxi (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
