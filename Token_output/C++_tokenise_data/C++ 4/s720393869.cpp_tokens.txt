# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define DUMPOUT cerr (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
ifndef DEBUG_ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define dump(...) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
else (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define dump(...)                                                                       \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        DUMPOUT << "  ";                                                                    \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        DUMPOUT << #__VA_ARGS__ << " :[" << __LINE__ << ":" << __FUNCTION__ << "]" << endl; \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        DUMPOUT << "    ";                                                                  \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        dump_func(__VA_ARGS__) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
endif (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
dump_func (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
DUMPOUT (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
Head (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
class (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
dump_func (Token.Name)
( (Token.Punctuation)
Head (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
head (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Tail (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
tail (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
DUMPOUT (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
head (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
sizeof (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
( (Token.Punctuation)
Tail (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
DUMPOUT (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
DUMPOUT (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
dump_func (Token.Name)
( (Token.Punctuation)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
move (Token.Name)
( (Token.Punctuation)
tail (Token.Name)
) (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
os (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
begin (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
end (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
+ (Token.Operator)
i (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
end (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
os (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
out2Dvector (Token.Name)
( (Token.Punctuation)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
& (Token.Operator)
vv (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
vv (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
istream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
> (Token.Operator)
> (Token.Operator)
( (Token.Punctuation)
istream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
is (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
begin (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
end (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
+ (Token.Operator)
i (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
is (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
is (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
os (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
pair_var (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
( (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
pair_var (Token.Name)
. (Token.Punctuation)
first (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
pair_var (Token.Name)
. (Token.Punctuation)
second (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
) (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
os (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
os (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
map (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
map_var (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
{ (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
itr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
map_var (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
itr (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
map_var (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
itr (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
( (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
itr (Token.Name)
- (Token.Operator)
> (Token.Operator)
first (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
itr (Token.Name)
- (Token.Operator)
> (Token.Operator)
second (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
) (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
itr (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
itr (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
map_var (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
itr (Token.Name)
- (Token.Operator)
- (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
} (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
os (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
os (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
set (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
set_var (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
{ (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
itr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
set_var (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
itr (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
set_var (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
itr (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
+ (Token.Operator)
+ (Token.Operator)
itr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
itr (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
set_var (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
,  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
itr (Token.Name)
- (Token.Operator)
- (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
os (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
} (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
os (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
// namespace
 (Token.Comment.Single)

 (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
ull (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
unsigned (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
ld (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define REP(i, n) for (ll i = 0; i < n; i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define REPR(i, n) for (ll i = n; i >= 0; i--) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define FOR(i, m, n) for (ll i = m; i < n; i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define even(x) (x) % 2 == 0 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define odd(x) (x) % 2 != 0 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define all(x) (x).begin(), (x).end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define rall(x) (x).rbegin(), (x).rend() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define pcnt __builtin_popcount (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define buli(x) __builtin_popcountll(x) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define UNIQUE(v) v.erase(unique(v.begin(), v.end()), v.end()); (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define inp(t, x) \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        t x;          \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        cin >> x; (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define ithBit(n, i) ((n) >> (i)&1) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define INIT()               \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        cin.tie(0);              \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        ios::sync_with_stdio(0); \ (Token.Comment.Preproc)

 (Token.Comment.Preproc)
        cout << fixed << setprecision(20) (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// these functions return the position of result of Binary Search.
 (Token.Comment.Single)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define LB(s, t, x) (int)(lower_bound(s, t, x) - s) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define UB(s, t, x) (int)(upper_bound(s, t, x) - s) (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define M_PI 3.14159265358979323846 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
qp (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
mo (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
do (Token.Keyword)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1l (Token.Literal.Number.Float)
l (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
mo (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1l (Token.Literal.Number.Float)
l (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
mo (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
gcd (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
lcm (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
temp (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
temp (Token.Name)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
temp (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
mDays (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
31 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
29 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
31 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
30 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
31 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
30 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
31 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
31 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
30 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
31 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
30 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
31 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dx (Token.Name)
[ (Token.Punctuation)
4 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
dy (Token.Name)
[ (Token.Punctuation)
4 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dx8 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
} (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
dy8 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
F (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
class (Token.Keyword)

     (Token.Text.Whitespace)
# (Token.Error)
if (Token.Keyword)
  (Token.Text.Whitespace)
defined (Token.Name)
( (Token.Punctuation)
__has_cpp_attribute (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
__has_cpp_attribute (Token.Name)
( (Token.Punctuation)
nodiscard (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
[ (Token.Punctuation)
[ (Token.Punctuation)
nodiscard (Token.Name)
] (Token.Punctuation)
] (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
elif defined(__GNUC__) && __GNUC_PREREQ(3, 4) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
         (Token.Text.Whitespace)
__attribute__ (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
warn_unused_result (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
# (Token.Comment.Preproc)
endif  (Token.Comment.Preproc)
// defined(__has_cpp_attribute) && __has_cpp_attribute(nodiscard)
 (Token.Comment.Single)
         (Token.Text.Whitespace)
FixPoint (Token.Name.Label)
  (Token.Text.Whitespace)
: (Token.Punctuation)
  (Token.Text.Whitespace)
F (Token.Name)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
public (Token.Keyword)
  (Token.Text.Whitespace)
: (Token.Operator)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
explicit (Token.Keyword)
  (Token.Text.Whitespace)
constexpr (Token.Keyword)
  (Token.Text.Whitespace)
FixPoint (Token.Name)
( (Token.Punctuation)
F (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
f (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
noexcept (Token.Keyword)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
F (Token.Name)
( (Token.Punctuation)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
forward (Token.Name)
< (Token.Operator)
F (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
f (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Args (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
constexpr (Token.Keyword)
  (Token.Text.Whitespace)
decltype (Token.Keyword)
( (Token.Punctuation)
auto (Token.Keyword)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
operator (Token.Keyword)
( (Token.Punctuation)
) (Token.Punctuation)
( (Token.Punctuation)
Args (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
args (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
F (Token.Name)
: (Token.Operator)
: (Token.Operator)
operator (Token.Keyword)
( (Token.Punctuation)
) (Token.Punctuation)
( (Token.Punctuation)
* (Token.Operator)
this (Token.Keyword)
, (Token.Punctuation)
  (Token.Text.Whitespace)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
forward (Token.Name)
< (Token.Operator)
Args (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
args (Token.Name)
) (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
// namespace
 (Token.Comment.Single)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
; (Token.Punctuation)
  (Token.Text.Whitespace)
// class FixPoint
 (Token.Comment.Single)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
F (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
static (Token.Keyword)
  (Token.Text.Whitespace)
inline (Token.Keyword.Reserved)
  (Token.Text.Whitespace)
constexpr (Token.Keyword)
  (Token.Text.Whitespace)
decltype (Token.Keyword)
( (Token.Punctuation)
auto (Token.Keyword)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
makeFixPoint (Token.Name)
( (Token.Punctuation)
F (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
f (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
noexcept (Token.Keyword)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
FixPoint (Token.Name)
< (Token.Operator)
F (Token.Name)
> (Token.Operator)
{ (Token.Punctuation)
std (Token.Name)
: (Token.Operator)
: (Token.Operator)
forward (Token.Name)
< (Token.Operator)
F (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
f (Token.Name)
) (Token.Punctuation)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
make_v (Token.Name)
( (Token.Punctuation)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Ts (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
make_v (Token.Name)
( (Token.Punctuation)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Ts (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
ts (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
decltype (Token.Keyword)
( (Token.Punctuation)
make_v (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ts (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
> (Token.Operator)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
make_v (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ts (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
V (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
enable_if (Token.Name.Class)
< (Token.Operator)
is_same (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
value (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
type (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
fill_v (Token.Name)
( (Token.Punctuation)
U (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
u (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
u (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
U (Token.Name)
( (Token.Punctuation)
v (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
V (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
enable_if (Token.Name.Class)
< (Token.Operator)
is_same (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
U (Token.Name)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
value (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
type (Token.Name)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
fill_v (Token.Name)
( (Token.Punctuation)
U (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
u (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
& (Token.Operator)
e (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
u (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
fill_v (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
e (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmax (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmin (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
inline (Token.Keyword.Reserved)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
rangeCheck2D (Token.Name)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
nx (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
ny (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
Width (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
Height (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
nx (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
nx (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
Width (Token.Name)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
ny (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
ny (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
Height (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i_query (Token.Name)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
?  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
fflush (Token.Name)
( (Token.Punctuation)
stdout (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
ret (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
ret (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
ret (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
i_answer (Token.Name)
( (Token.Punctuation)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
ans (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
!  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
fflush (Token.Name)
( (Token.Punctuation)
stdout (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
// namespace
 (Token.Comment.Single)

 (Token.Text.Whitespace)
/*
    tuple binding
    auto [x, y] = make_tuple(0, 0);
    for pair
    auto [a, b] = pair<int, int>({v1, v2});

    bitset<N> bs(ini_val); // N must be constant
    bs.reset(); // reset all
*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name)
( (Token.Punctuation)
void (Token.Keyword.Type)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
INIT (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
// comment out for Interective Problem
 (Token.Comment.Single)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
inp (Token.Name)
( (Token.Punctuation)
ll (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
priority_queue (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
pq (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
multiset (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
sa (Token.Name)
( (Token.Punctuation)
all (Token.Name)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
REP (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
v (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
itr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
sa (Token.Name)
. (Token.Punctuation)
find (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
sa (Token.Name)
. (Token.Punctuation)
erase (Token.Name)
( (Token.Punctuation)
itr (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
( (Token.Punctuation)
- (Token.Operator)
- (Token.Operator)
sa (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
sa (Token.Name)
. (Token.Punctuation)
insert (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
//*/
 (Token.Comment.Single)
