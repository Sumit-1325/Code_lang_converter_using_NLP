# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define int long long (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ll long long  (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i,a,b) for(signed i=a;i<(b);++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define erep(i,a,b) for(signed i=a;i<=(b);++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define per(i,a,b) for(signed i=(a);i>(b);--i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define eper(i,a,b) for(signed i=(a);i>=b;--i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define fore(i, x, a) for(auto &&x:a)  (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ITR(i,b,e) for(auto i=(b);i!=(e);++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb emplace_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mp make_pair (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ALL(x) begin(x),end(x) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define F first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define S second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define debug(x)  cout << #x << ": " << (x) << '\n'; (Token.Comment.Preproc)

 (Token.Comment.Preproc)
const (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
INF (Token.Name)
= (Token.Operator)
1001001001001001001 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
MOD (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
int (Token.Keyword.Type)
) (Token.Punctuation)
1e9 (Token.Literal.Number.Float)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
7 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
EPS (Token.Name)
= (Token.Operator)
1e-9 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
Pii (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
int (Token.Keyword.Type)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
vii (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
using (Token.Keyword)
   (Token.Text.Whitespace)
PS_queue (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
priority_queue (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
, (Token.Punctuation)
  (Token.Text.Whitespace)
greater (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
using (Token.Keyword)
  (Token.Text.Whitespace)
vv (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmax (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
< (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmin (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
< (Token.Operator)
a (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
A (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
N (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
Fill (Token.Name)
( (Token.Punctuation)
A (Token.Name)
  (Token.Text.Whitespace)
( (Token.Punctuation)
& (Token.Operator)
array (Token.Name)
) (Token.Punctuation)
[ (Token.Punctuation)
N (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
val (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
fill (Token.Name)
( (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
T (Token.Name)
* (Token.Operator)
) (Token.Punctuation)
array (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
T (Token.Name)
* (Token.Operator)
) (Token.Punctuation)
( (Token.Punctuation)
array (Token.Name)
+ (Token.Operator)
N (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
val (Token.Name)
  (Token.Text.Whitespace)
) (Token.Punctuation)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
os (Token.Name)
, (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ITR (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
os (Token.Name)
< (Token.Operator)
< (Token.Operator)
* (Token.Operator)
i (Token.Name)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
i (Token.Name)
= (Token.Operator)
= (Token.Operator)
end (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
? (Token.Operator)
" (Token.Literal.String)
" (Token.Literal.String)
: (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
os (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
ostream (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
operator (Token.Keyword)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
ostream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
os (Token.Name)
, (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ITR (Token.Name)
( (Token.Punctuation)
u (Token.Name)
, (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
ITR (Token.Name)
( (Token.Punctuation)
w (Token.Name)
, (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
* (Token.Operator)
u (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
* (Token.Operator)
u (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
os (Token.Name)
< (Token.Operator)
< (Token.Operator)
* (Token.Operator)
w (Token.Name)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
= (Token.Operator)
= (Token.Operator)
end (Token.Name)
( (Token.Punctuation)
* (Token.Operator)
u (Token.Name)
) (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
? (Token.Operator)
" (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
: (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
) (Token.Punctuation)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
os (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
istream (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
operator (Token.Keyword)
> (Token.Operator)
> (Token.Operator)
( (Token.Punctuation)
istream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
is (Token.Name)
, (Token.Punctuation)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ITR (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
is (Token.Name)
> (Token.Operator)
> (Token.Operator)
* (Token.Operator)
i (Token.Name)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
is (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
class (Token.Keyword)
  (Token.Text.Whitespace)
U (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
istream (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
operator (Token.Keyword)
> (Token.Operator)
> (Token.Operator)
( (Token.Punctuation)
istream (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
is (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
T (Token.Name)
, (Token.Punctuation)
U (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
p (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
is (Token.Name)
> (Token.Operator)
> (Token.Operator)
p (Token.Name)
. (Token.Punctuation)
first (Token.Name)
> (Token.Operator)
> (Token.Operator)
p (Token.Name)
. (Token.Punctuation)
second (Token.Name)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
is (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
T (Token.Name)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
T (Token.Name)
  (Token.Text.Whitespace)
lcm (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
edge (Token.Name.Class)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
from (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
to (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
cost (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dy (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dx (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
// cout << fixed << setprecision(10) << val;
 (Token.Comment.Single)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
200005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
l (Token.Name)
[ (Token.Punctuation)
200005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
[ (Token.Punctuation)
200005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
signed (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
ios (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
l (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
l (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
r (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
eper (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
-2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
r (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
> (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
l (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
