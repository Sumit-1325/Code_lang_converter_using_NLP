# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i, n) for (int i = 0; i < (n); ++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sz(x) int(x.size()) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
N (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
A (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
A2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
N (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
tmp (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
tmp (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
A (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
tmp (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
A2 (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
tmp (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
max_value (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
max_count (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
second_value (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
sort (Token.Name)
( (Token.Punctuation)
A (Token.Name)
. (Token.Punctuation)
rbegin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
A (Token.Name)
. (Token.Punctuation)
rend (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
max_value (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// vector<int> A2(A.size()); // ちゃんと確保しておくこと
 (Token.Comment.Single)
     (Token.Text.Whitespace)
// copy(A.begin(), A.end(), A2.begin());
 (Token.Comment.Single)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// rep(i, N) {
 (Token.Comment.Single)
     (Token.Text.Whitespace)
//     cout << A2[i] << endl;
 (Token.Comment.Single)
     (Token.Text.Whitespace)
// }
 (Token.Comment.Single)
     (Token.Text.Whitespace)
// cout << endl;
 (Token.Comment.Single)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
A (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
max_count (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
A (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
second_value (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
A (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
break (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// printf("%d %d %d\n", max_value, max_count, second_value);
 (Token.Comment.Single)
     (Token.Text.Whitespace)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
N (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
max_count (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
max_value (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
// max_count 1 かつ A[i] が max_value
 (Token.Comment.Single)
             (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
max_value (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
A2 (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
second_value (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
max_value (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
