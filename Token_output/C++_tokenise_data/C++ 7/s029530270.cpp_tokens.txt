# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
total (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
, (Token.Punctuation)
int (Token.Keyword.Type)
, (Token.Punctuation)
int (Token.Keyword.Type)
, (Token.Punctuation)
int (Token.Keyword.Type)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
s (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
s (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
z (Token.Name)
= (Token.Operator)
s (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
c (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
cn (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
z (Token.Name)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
B (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
0 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
| (Token.Operator)
| (Token.Operator)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
1 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
& (Token.Operator)
& (Token.Operator)
i (Token.Name)
! (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
' (Token.Literal.String.Char)
. (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
cn (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
' (Token.Literal.String.Char)
. (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
c (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
c (Token.Name)
= (Token.Operator)
c (Token.Name)
+ (Token.Operator)
cn (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
k (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
k (Token.Name)
< (Token.Operator)
z (Token.Name)
; (Token.Punctuation)
k (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
0 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
| (Token.Operator)
| (Token.Operator)
s (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Char)
1 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
ans (Token.Name)
[ (Token.Punctuation)
x (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
s (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
x (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
l (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
l (Token.Name)
< (Token.Operator)
z (Token.Name)
- (Token.Operator)
c (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
ans (Token.Name)
[ (Token.Punctuation)
l (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
l (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
total (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
c (Token.Name)
, (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
d (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
sum (Token.Name)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
+ (Token.Operator)
c (Token.Name)
+ (Token.Operator)
d (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
sum (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
