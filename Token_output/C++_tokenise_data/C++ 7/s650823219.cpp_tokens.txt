# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cstdio> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cstdlib> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cmath> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<cstring> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<string> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<vector> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bitset> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<queue> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<utility> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
unsigned (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ull (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define MOD 10000000000+7     (Token.Comment.Preproc)
//10億　= 10^9になってる
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define juu 100000                (Token.Comment.Preproc)
//10万 10e5
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define hyaku 1000000             (Token.Comment.Preproc)
//100万　10e6
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define mINF -922337200085470000  (Token.Comment.Preproc)
//llのmax-1桁の小さい方
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define pINF 922337203600070000   (Token.Comment.Preproc)
//llのmax-1桁のデカい方
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define uINF 1844674407300000000  (Token.Comment.Preproc)
//ullのmax-1桁してる
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define pi 3.1415926535897932384 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
ll (Token.Name)
  (Token.Text.Whitespace)
factor (Token.Name)
[ (Token.Punctuation)
300 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
memory (Token.Name)
[ (Token.Punctuation)
300 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
/*素朴法で計算
factorは必ずmemset(factor,0,sizeof(factor));
グローバルであるmemoryに個数を書き込む
memory配列の走査にはfactorの要素を使う*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
primefac (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
num (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
kosuu (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
factor (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
num (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
( (Token.Punctuation)
factor (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
num (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
( (Token.Punctuation)
factor (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
memory (Token.Name)
[ (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
factor (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
num (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
break (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*グローバルにあるfactorに素数書き込む.個数を返すので配列は-1しろforは<*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
elast (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
number (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
tmp (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
flag (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
* (Token.Operator)
factor (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
3 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
number (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
flag (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
j (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
j (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
tmp (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
j (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
factor (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
j (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
flag (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
break (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
flag (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
continue (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
tmp (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
* (Token.Operator)
( (Token.Punctuation)
factor (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
tmp (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
tmp (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*整数をqsortする為だけのもの*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
compare (Token.Name.Function)
( (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
* (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
* (Token.Operator)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
* (Token.Operator)
a (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
-1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
* (Token.Operator)
a (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*intで収まる範囲であってくれ*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
nCr (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
val (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
val (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
val (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
val (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*intで収まる範囲であってくれ*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
nPr (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
val (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
val (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
val (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmin (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmax (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
/*
qsort(array,length,sizeof(int),(int(*)(const int*, const int*))compare);
使う時これをコピペ
*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
    	 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
B (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)

 (Token.Text.Whitespace)
    	 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
    		 (Token.Text.Whitespace)
a (Token.Name)
. (Token.Punctuation)
erase (Token.Name)
( (Token.Punctuation)
a (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
i (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
a (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
! (Token.Operator)
= (Token.Operator)
a (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
    		 (Token.Text.Whitespace)
a (Token.Name)
. (Token.Punctuation)
erase (Token.Name)
( (Token.Punctuation)
a (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
i (Token.Name)
-1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    		 (Token.Text.Whitespace)
i (Token.Name)
- (Token.Operator)
- (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    		 (Token.Text.Whitespace)
continue (Token.Keyword)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
    		 (Token.Text.Whitespace)
i (Token.Name)
- (Token.Operator)
- (Token.Operator)
	 (Token.Text.Whitespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
