# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<stdio.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dat (Token.Name)
[ (Token.Punctuation)
20 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
data (Token.Name)
[ (Token.Punctuation)
20 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%s (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
data (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
cnt (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
10 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
int (Token.Keyword.Type)
) (Token.Punctuation)
data (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
dat (Token.Name)
[ (Token.Punctuation)
cnt (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cnt (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
int (Token.Keyword.Type)
) (Token.Punctuation)
data (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
dat (Token.Name)
[ (Token.Punctuation)
cnt (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cnt (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
dat (Token.Name)
[ (Token.Punctuation)
cnt (Token.Name)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
NULL (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
cnt (Token.Name)
! (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
cnt (Token.Name)
- (Token.Operator)
- (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
else (Token.Keyword)

 (Token.Text.Whitespace)
                 (Token.Text.Whitespace)
cnt (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
cnt (Token.Name)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
dat (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
