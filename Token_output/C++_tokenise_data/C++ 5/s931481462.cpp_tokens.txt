# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stdio.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<vector> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<math.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<queue> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<string.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<functional> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<limits.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stdlib.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<string> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<unordered_map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define intmax INT_MAX (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define lmax LONG_MAX (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define uintmax UINT_MAX (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ulmax ULONG_MAX (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define llmax LLONG_MAX (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ll long long (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i,a,N) for((i)=(a);(i)<(N);(i)++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rrp(i,N,a) for((i)=(N)-1;(i)>=(a);(i)--) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define llfor ll i,j,k (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sc(a) cin>>a (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pr(a) cout<<a<<endl (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pY puts("YES") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pN puts("NO") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define py puts("Yes") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pn puts("No") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pnn printf("\n") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sort(a) sort(a.begin(),a.end()) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define push(a,b) (a).push_back(b) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define llvec vector<vector<ll>> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define charvec vector<vector<char>> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sizeoof(a,b) (a,vector<ll>(b)) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define llpvec vector<pair<ll,ll>> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
/*繰り上げ除算*/ (Token.Comment.Multiline)
ll (Token.Name)
  (Token.Text.Whitespace)
cei (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
y (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
ans (Token.Name)
= (Token.Operator)
x (Token.Name)
/ (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
! (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
ans (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*最大公約数*/ (Token.Comment.Multiline)
ll (Token.Name)
  (Token.Text.Whitespace)
gcd (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
y (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
y (Token.Name)
? (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
: (Token.Operator)
x (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*最小公倍数*/ (Token.Comment.Multiline)
ll (Token.Name)
  (Token.Text.Whitespace)
lcm (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
y (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
x (Token.Name)
/ (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*n乗*/ (Token.Comment.Multiline)
ll (Token.Name)
  (Token.Text.Whitespace)
llpow (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
ans (Token.Name)
* (Token.Operator)
= (Token.Operator)
x (Token.Name)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*階乗*/ (Token.Comment.Multiline)
ll (Token.Name)
  (Token.Text.Whitespace)
fact (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
rep (Token.Name)
( (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
ans (Token.Name)
* (Token.Operator)
= (Token.Operator)
( (Token.Punctuation)
x (Token.Name)
- (Token.Operator)
i (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*nCr*/ (Token.Comment.Multiline)
ll (Token.Name)
  (Token.Text.Whitespace)
ncr (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
fact (Token.Name)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
fact (Token.Name)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
fact (Token.Name)
( (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
r (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*nPr*/ (Token.Comment.Multiline)
ll (Token.Name)
  (Token.Text.Whitespace)
npr (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
fact (Token.Name)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
fact (Token.Name)
( (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
r (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
/*primejudge*/ (Token.Comment.Multiline)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
prime (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
< (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
false (Token.Name.Builtin)
; (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)
for (Token.Keyword)
( (Token.Punctuation)
i (Token.Name)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)
i (Token.Name)
* (Token.Operator)
i (Token.Name)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
{ (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
% (Token.Operator)
i (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
false (Token.Name.Builtin)
; (Token.Punctuation)
} (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
ans (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
llfor (Token.Name)
; (Token.Punctuation)
///////////////////////////////////////////////////////////
 (Token.Comment.Single)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
l (Token.Name)
, (Token.Punctuation)
m (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
sc (Token.Name)
( (Token.Punctuation)
w (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
sc (Token.Name)
( (Token.Punctuation)
h (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
sc (Token.Name)
( (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
sc (Token.Name)
( (Token.Punctuation)
m (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
ans (Token.Name)
= (Token.Operator)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
float (Token.Keyword.Type)
  (Token.Text.Whitespace)
s (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
float (Token.Keyword.Type)
) (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
float (Token.Keyword.Type)
) (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
2.000000000 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
w (Token.Name)
= (Token.Operator)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
l (Token.Name)
& (Token.Operator)
& (Token.Operator)
h (Token.Name)
= (Token.Operator)
= (Token.Operator)
m (Token.Name)
* (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.10f %d (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
s (Token.Name)
, (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
   (Token.Text.Whitespace)

 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
