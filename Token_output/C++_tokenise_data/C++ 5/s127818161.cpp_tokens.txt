# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<stdio.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
y (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
X (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%lld %lld %lld %lld (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
X (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
Y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
z (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
z (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
y (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
b (Token.Name)
= (Token.Operator)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
X (Token.Name)
= (Token.Operator)
= (Token.Operator)
x (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
& (Token.Operator)
& (Token.Operator)
Y (Token.Name)
= (Token.Operator)
= (Token.Operator)
y (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%lf 1 (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
z (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
X (Token.Name)
= (Token.Operator)
= (Token.Operator)
x (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
& (Token.Operator)
& (Token.Operator)
Y (Token.Name)
/ (Token.Operator)
X (Token.Name)
= (Token.Operator)
= (Token.Operator)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
| (Token.Operator)
| (Token.Operator)
( (Token.Punctuation)
Y (Token.Name)
= (Token.Operator)
y (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
& (Token.Operator)
& (Token.Operator)
Y (Token.Name)
/ (Token.Operator)
X (Token.Name)
= (Token.Operator)
= (Token.Operator)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%lf 1 (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
z (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%lf 0 (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
z (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
