# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
m (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
W (Token.Name)
> (Token.Operator)
> (Token.Operator)
H (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
ans (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
m (Token.Name)
= (Token.Operator)
max (Token.Name)
( (Token.Punctuation)
min (Token.Name)
( (Token.Punctuation)
x (Token.Name)
* (Token.Operator)
H (Token.Name)
, (Token.Punctuation)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
min (Token.Name)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
ans (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
W (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
/*if(min(x*H,(W-x)*H)>min(W*y,W*(H-y))){
    m=min(x*H,(W-x)*H);
    ans=(2*y==H);
  }
  else if(min(x*H,(W-x)*H)<min(W*y,W*(H-y))){
    m=min(W*y,W*(H-y));
    ans=(2*x==W);
  }
  else{
    m=min(x*H,(W-x)*H);
    if(2*x==W||2*y==H)ans=1;
  }
  //m=W*H-m;
  if(x==(W-x))*/ (Token.Comment.Multiline)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
m (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
ans (Token.Name)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
