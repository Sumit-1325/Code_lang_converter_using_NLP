# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
N (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
2e5 (Token.Literal.Number.Float)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
25 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
M (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e6 (Token.Literal.Number.Float)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
25 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
oo (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e9 (Token.Literal.Number.Float)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
mxmsk (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
16 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
OO (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e18 (Token.Literal.Number.Float)
+ (Token.Operator)
25 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define par pair<pair<int,int>, int> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define f first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define s second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d%d%d%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
& (Token.Operator)
w (Token.Name)
, (Token.Punctuation)
& (Token.Operator)
h (Token.Name)
, (Token.Punctuation)
& (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
& (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.20lf %d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
( (Token.Punctuation)
1.0 (Token.Literal.Number.Float)
* (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
w (Token.Name)
& (Token.Operator)
1 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
& (Token.Operator)
& (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
x (Token.Name)
& (Token.Operator)
& (Token.Operator)
h (Token.Name)
& (Token.Operator)
1 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
& (Token.Operator)
& (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
