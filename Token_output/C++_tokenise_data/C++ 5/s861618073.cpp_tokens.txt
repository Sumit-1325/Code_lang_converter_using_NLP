# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define REP(i,n) for(ll i=0, i##_len=(n); i<i##_len; ++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define REPR(i,n) for(ll i = n;i >= 0;--i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define FOR(i,m,n) for(ll i = m, i##_len=(n);i <i##_len; ++i) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define all(x) (x).begin(),(x).end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
inline (Token.Keyword.Reserved)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmax (Token.Name)
( (Token.Punctuation)
T (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
inline (Token.Keyword.Reserved)
  (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
chmin (Token.Name)
( (Token.Punctuation)
T (Token.Name)
& (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
b (Token.Name)
? (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
a (Token.Name)
% (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
: (Token.Operator)
a (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
INF (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e9 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
LLINF (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e16 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
modinv (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
u (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
t (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
t (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
swap (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
u (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
t (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
swap (Token.Name)
( (Token.Punctuation)
u (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
u (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
u (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
u (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
m (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
u (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
void (Token.Keyword.Type)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
double (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
| (Token.Operator)
| (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
| (Token.Operator)
| (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
| (Token.Operator)
| (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.7lf %d (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.7lf %d (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
x (Token.Name)
* (Token.Operator)
w (Token.Name)
< (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
w (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
x (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
h (Token.Name)
* (Token.Operator)
h (Token.Name)
* (Token.Operator)
x (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
w (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
w (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
h (Token.Name)
* (Token.Operator)
h (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
* (Token.Operator)
w (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
* (Token.Operator)
w (Token.Name)
* (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
x (Token.Name)
/ (Token.Operator)
y (Token.Name)
* (Token.Operator)
h (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
w (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
y (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
w (Token.Name)
* (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
y (Token.Name)
* (Token.Operator)
h (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
x (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
y (Token.Name)
* (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
sort (Token.Name)
( (Token.Punctuation)
all (Token.Name)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
s (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
s (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
-2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.7lf %d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
s (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.7lf %d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
s (Token.Name)
. (Token.Punctuation)
size (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
