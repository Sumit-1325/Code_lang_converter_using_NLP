# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
str (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
pii (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
ll (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
pll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
vi (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
pii (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vpii (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
pll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
vpll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
map (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
str (Token.Name)
, (Token.Punctuation)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
mapsi (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
map (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
str (Token.Name)
, (Token.Punctuation)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
iterator (Token.Name)
  (Token.Text.Whitespace)
mapsitr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
map (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
mint (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
map (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
ll (Token.Name)
  (Token.Text.Whitespace)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
mll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
set (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
si (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
set (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
sll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
si (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
iterator (Token.Name)
  (Token.Text.Whitespace)
sitr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
si (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
reverse_iterator (Token.Name)
  (Token.Text.Whitespace)
rsitr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
sll (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
iterator (Token.Name)
  (Token.Text.Whitespace)
sltr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
sll (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
reverse_iterator (Token.Name)
  (Token.Text.Whitespace)
rsltr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define mset multiset (Token.Comment.Preproc)

 (Token.Comment.Preproc)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
mset (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
  (Token.Text.Whitespace)
msi (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
mset (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
msll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
msi (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
iterator (Token.Name)
  (Token.Text.Whitespace)
msitr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
msi (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
reverse_iterator (Token.Name)
  (Token.Text.Whitespace)
msritr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
msll (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
iterator (Token.Name)
  (Token.Text.Whitespace)
msltr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
msll (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
: (Token.Operator)
  (Token.Text.Whitespace)
reverse_iterator (Token.Name)
  (Token.Text.Whitespace)
mslritr (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define mp make_pair (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb push_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pob pop_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pf push_front (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pof pop_front (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define fi first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define se second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define fs first.second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ss second.second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ff first.first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sf second.first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define newl '\n' (Token.Comment.Preproc)

 (Token.Comment.Preproc)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
to_upper (Token.Name.Function)
  (Token.Text.Whitespace)
( (Token.Punctuation)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
  (Token.Text.Whitespace)
97 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
126 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
char (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
-32 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
  (Token.Text.Whitespace)
65 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
90 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
to_lower (Token.Name.Function)
  (Token.Text.Whitespace)
( (Token.Punctuation)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
  (Token.Text.Whitespace)
97 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
126 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
  (Token.Text.Whitespace)
65 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
90 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
char (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
+ (Token.Operator)
32 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
numerize (Token.Name.Function)
  (Token.Text.Whitespace)
( (Token.Punctuation)
char (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
48 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
57 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
- (Token.Operator)
' (Token.Literal.String.Char)
0 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
  (Token.Text.Whitespace)
97 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
126 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
-96 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
  (Token.Text.Whitespace)
65 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
90 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
( (Token.Punctuation)
x (Token.Name)
-64 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
//void IO(){
 (Token.Comment.Single)
//	#ifndef ONLINE_JUDGE
 (Token.Comment.Single)
//	    freopen("input.txt", "r", stdin);
 (Token.Comment.Single)
//	    freopen("output.txt", "w", stdout);
 (Token.Comment.Single)
//	#endif
 (Token.Comment.Single)
//}
 (Token.Comment.Single)
// end of Template
 (Token.Comment.Single)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
z (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
//IO();
 (Token.Comment.Single)
     (Token.Text.Whitespace)
ios_base (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
NULL (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
w (Token.Name)
> (Token.Operator)
> (Token.Operator)
h (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
w (Token.Name)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
= (Token.Operator)
x (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
= (Token.Operator)
= (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.7lf %d (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
ans (Token.Name)
, (Token.Punctuation)
z (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
