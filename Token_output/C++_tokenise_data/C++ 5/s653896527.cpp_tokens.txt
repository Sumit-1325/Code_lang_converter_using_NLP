// include
 (Token.Comment.Single)
// ------------------------------------------------
 (Token.Comment.Single)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<vector> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<math.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
// func
 (Token.Comment.Single)
// ------------------------------------------------
 (Token.Comment.Single)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
CalcSumOfDigit (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
       (Token.Text.Whitespace)
// 各桁の和を計算する。
 (Token.Comment.Single)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
getDigit (Token.Name.Function)
( (Token.Punctuation)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
       (Token.Text.Whitespace)
// 数字の桁数を取得する。
 (Token.Comment.Single)
string (Token.Name)
  (Token.Text.Whitespace)
upper (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
str (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
        (Token.Text.Whitespace)
// 英字を大文字に変換する。
 (Token.Comment.Single)
string (Token.Name)
  (Token.Text.Whitespace)
lower (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
str (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
        (Token.Text.Whitespace)
// 英字を小文字に変換する。
 (Token.Comment.Single)

 (Token.Text.Whitespace)
// define
 (Token.Comment.Single)
// ------------------------------------------------
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define all(a)        (a).begin(),(a).end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rall(a)       (a).rbegin(),(a).rend() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sz(a)         int((a).size()) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i,n)      for(int(i)=0;(i)<(n);(i)++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define repe(i,n)     for(int(i)=0;(i)<=(n);(i)++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define vsort(v)      sort((v).begin(),(v).end()) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rvsort(v)     sort(rall((v))) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define vi            vector<int> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define GCD(a,b)      __gcd((a),(b)) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define LCM(a,b)      (a) (Token.Comment.Preproc)
/ (Token.Comment.Preproc)
GCD((a),(b))*(b) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define kiriage(a,b)  ((a)+(b)-1) (Token.Comment.Preproc)
/ (Token.Comment.Preproc)
(b) (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
INF (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e9 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
unsigned (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ull (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
// code
 (Token.Comment.Single)
// ------------------------------------------------
 (Token.Comment.Single)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
c_x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
c_y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
flg (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
c_x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
c_y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
flg (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
w (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
  (Token.Text.Whitespace)
) (Token.Punctuation)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2.0 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
fixed (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
setprecision (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
flg (Token.Name)
  (Token.Text.Whitespace)
? (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
// funcの実体
 (Token.Comment.Single)
// ------------------------------------------------
 (Token.Comment.Single)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
getDigit (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
10 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
break (Token.Keyword)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
CalcSumOfDigit (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
s (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
s (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
10 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
10 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
s (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
upper (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
str (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
itr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
str (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
itr (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
str (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
; (Token.Punctuation)
  (Token.Text.Whitespace)
itr (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
97 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
122 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
32 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
str (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
string (Token.Name)
  (Token.Text.Whitespace)
lower (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
str (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
itr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
str (Token.Name)
. (Token.Punctuation)
begin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
itr (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
str (Token.Name)
. (Token.Punctuation)
end (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
; (Token.Punctuation)
  (Token.Text.Whitespace)
itr (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
65 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
90 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
* (Token.Operator)
itr (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
32 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
str (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
