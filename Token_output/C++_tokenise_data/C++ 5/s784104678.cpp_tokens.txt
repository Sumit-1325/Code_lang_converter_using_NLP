# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
ld (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define rep(i, n) for (ll i = 0; i < n; i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define FOR(i, a, b) for (ll i = a; i < b; i++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define len(v) ll(v.size()) (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
template (Token.Keyword)
  (Token.Text.Whitespace)
< (Token.Operator)
class (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
cout_vec (Token.Name)
( (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
& (Token.Operator)
vec (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
itr (Token.Name)
: (Token.Operator)
vec (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
itr (Token.Name)
< (Token.Operator)
< (Token.Operator)
' (Token.Literal.String.Char)
  (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
   (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
' (Token.Literal.String.Char)
\n (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
ll (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
P (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
mod (Token.Name)
= (Token.Operator)
1e9 (Token.Literal.Number.Float)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ios (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
w (Token.Name)
> (Token.Operator)
> (Token.Operator)
h (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
w (Token.Name)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
y (Token.Name)
  (Token.Text.Whitespace)
| (Token.Operator)
| (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
+ (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
setprecision (Token.Name)
( (Token.Punctuation)
30 (Token.Literal.Number.Integer)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
double (Token.Keyword.Type)
) (Token.Punctuation)
h (Token.Name)
* (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
' (Token.Literal.String.Char)
  (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
a1 (Token.Name)
, (Token.Punctuation)
a2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a1 (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
h (Token.Name)
, (Token.Punctuation)
a2 (Token.Name)
= (Token.Operator)
y (Token.Name)
* (Token.Operator)
w (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
sum (Token.Name)
= (Token.Operator)
h (Token.Name)
* (Token.Operator)
w (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a1 (Token.Name)
> (Token.Operator)
sum (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
a1 (Token.Name)
= (Token.Operator)
sum (Token.Name)
- (Token.Operator)
a1 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a2 (Token.Name)
> (Token.Operator)
sum (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
a2 (Token.Name)
= (Token.Operator)
sum (Token.Name)
- (Token.Operator)
a2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
           (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
1 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
           (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a1 (Token.Name)
= (Token.Operator)
= (Token.Operator)
a2 (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
           (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
1 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
           (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
           (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
           (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
a1 (Token.Name)
, (Token.Punctuation)
a2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
a1 (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
h (Token.Name)
, (Token.Punctuation)
a2 (Token.Name)
= (Token.Operator)
y (Token.Name)
* (Token.Operator)
w (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
sum (Token.Name)
= (Token.Operator)
h (Token.Name)
* (Token.Operator)
w (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a1 (Token.Name)
> (Token.Operator)
sum (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
a1 (Token.Name)
= (Token.Operator)
sum (Token.Name)
- (Token.Operator)
a1 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a2 (Token.Name)
> (Token.Operator)
sum (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
a2 (Token.Name)
= (Token.Operator)
sum (Token.Name)
- (Token.Operator)
a2 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
setprecision (Token.Name)
( (Token.Punctuation)
30 (Token.Literal.Number.Integer)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
max (Token.Name)
( (Token.Punctuation)
a1 (Token.Name)
, (Token.Punctuation)
a2 (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
' (Token.Literal.String.Char)
  (Token.Literal.String.Char)
' (Token.Literal.String.Char)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a1 (Token.Name)
= (Token.Operator)
= (Token.Operator)
a2 (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
1 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
       (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
