# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
W (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
H (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
W (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
H (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
ans (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ans1 (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ans2 (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ansn1 (Token.Name)
= (Token.Operator)
1e10 (Token.Literal.Number.Float)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ansn2 (Token.Name)
= (Token.Operator)
1e10 (Token.Literal.Number.Float)
, (Token.Punctuation)
  (Token.Text.Whitespace)
tmp_ans (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
tmp_ans1 (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
tmp_ans2 (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ans3 (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
//    if (W < H) {
 (Token.Comment.Single)
//        swap(W, H);
 (Token.Comment.Single)
//        swap(x, y);
 (Token.Comment.Single)
//    }
 (Token.Comment.Single)

 (Token.Text.Whitespace)
//    if (x > W / 2 && y > H / 2) {
 (Token.Comment.Single)
//        x = W - x;
 (Token.Comment.Single)
//        y = H - y;
 (Token.Comment.Single)
//    } else if (x > W / 2) {
 (Token.Comment.Single)
//        x = W - x;
 (Token.Comment.Single)
//    } else if (y > H / 2) {
 (Token.Comment.Single)
//        y = H - y;
 (Token.Comment.Single)
//    } else {
 (Token.Comment.Single)
//        ;
 (Token.Comment.Single)
//    }
 (Token.Comment.Single)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// 縦に分割した時
 (Token.Comment.Single)
     (Token.Text.Whitespace)
ans1 (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
min (Token.Name)
( (Token.Punctuation)
x (Token.Name)
* (Token.Operator)
H (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// 横に分割した時
 (Token.Comment.Single)
     (Token.Text.Whitespace)
ans2 (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
min (Token.Name)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
W (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
// 斜めに分割した時
 (Token.Comment.Single)
//    double Y = (W / 2 * (H / 2 - y)) / (W / 2 - x);
 (Token.Comment.Single)
//    double a = H / 2 - Y;
 (Token.Comment.Single)
     (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
W (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
H (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2.0 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
flag (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
//    if (ans1 == ans && ans2 == ans) {
 (Token.Comment.Single)
//        flag = 1;
 (Token.Comment.Single)
//    }else if (ans1 == ans || ans2 == ans) {
 (Token.Comment.Single)
//        flag = 0;
 (Token.Comment.Single)
//    } else {
 (Token.Comment.Single)
//        flag = 1;
 (Token.Comment.Single)
//    }
 (Token.Comment.Single)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
W (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
H (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
W (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
H (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
flag (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
W (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
| (Token.Operator)
| (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
H (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
flag (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)
  (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
flag (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
//    cout << ans1 << endl;
 (Token.Comment.Single)
//    cout << ans2 << endl;
 (Token.Comment.Single)
     (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
flag (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
