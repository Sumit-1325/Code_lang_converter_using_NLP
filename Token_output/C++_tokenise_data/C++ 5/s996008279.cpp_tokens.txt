# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iostream> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<unordered_map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<bitset> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<math.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<vector> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<set> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<algorithm> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<ctype.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<unordered_set> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<string> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iomanip> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<queue> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<limits> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<map> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<stack> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<iterator> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<cstring> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<deque> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pi 3.141592653589793238 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<chrono> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define MOD 1000000007 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define INF 999999999999999999  (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb push_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ff first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ss second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mt make_tuple (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ll long long (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define f0 get<0> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define f1 get<1> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define f2 get<2> (Token.Comment.Preproc)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
ncr (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
- (Token.Operator)
- (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ans (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
ans (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
max_heapify (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
100 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
l (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
largest (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
l (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
l (Token.Name)
< (Token.Operator)
n (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
l (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
largest (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
l (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
r (Token.Name)
< (Token.Operator)
n (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
r (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
l (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
largest (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
largest (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
k (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
k (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
largest (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
a (Token.Name)
[ (Token.Punctuation)
largest (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
k (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
max_heapify (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
largest (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
power (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
y (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
p (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
res (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
y (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
y (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
res (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
res (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
res (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
square (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
sqrt (Token.Name)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
floor (Token.Name)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
prime (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
modi (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
power (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
m (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
kmp (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
s (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
p (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
int (Token.Keyword.Type)
) (Token.Punctuation)
s (Token.Name)
. (Token.Punctuation)
length (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
p (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
j (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
j (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
j (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
[ (Token.Punctuation)
j (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
j (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
p (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
j (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
zfunc (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
s (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
ll (Token.Name)
) (Token.Punctuation)
s (Token.Name)
. (Token.Punctuation)
length (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
l (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
+ (Token.Operator)
i (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
min (Token.Name)
( (Token.Punctuation)
r (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
l (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
+ (Token.Operator)
+ (Token.Operator)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
l (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
z (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
pair_hash (Token.Name.Class)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
operator (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
( (Token.Punctuation)
const (Token.Keyword)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
> (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
noexcept (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
hash (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
( (Token.Punctuation)
( (Token.Punctuation)
( (Token.Punctuation)
( (Token.Punctuation)
ll (Token.Name)
) (Token.Punctuation)
p (Token.Name)
. (Token.Punctuation)
first (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
32 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
| (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
( (Token.Punctuation)
ll (Token.Name)
) (Token.Punctuation)
p (Token.Name)
. (Token.Punctuation)
second (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
palin (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
s (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
. (Token.Punctuation)
length (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
s (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
true (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
sum (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
sum (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
sum (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
10 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
10 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
sum (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
nCr (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
r (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
p (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
fac (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
r (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
fac (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
fac (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
fac (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
fac (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
modi (Token.Name)
( (Token.Punctuation)
fac (Token.Name)
[ (Token.Punctuation)
r (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
p (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
modi (Token.Name)
( (Token.Punctuation)
fac (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
r (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
p (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
p (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
gcd (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
gcd (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
mod (Token.Name.Function)
( (Token.Punctuation)
string (Token.Name)
  (Token.Text.Whitespace)
num (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
res (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
num (Token.Name)
. (Token.Punctuation)
length (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
res (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
res (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
10 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
ll (Token.Name)
) (Token.Punctuation)
num (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
' (Token.Literal.String.Char)
0 (Token.Literal.String.Char)
' (Token.Literal.String.Char)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
res (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 (Token.Comment.Single)
ll (Token.Name)
  (Token.Text.Whitespace)
parent (Token.Name)
[ (Token.Punctuation)
1000 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
sizer (Token.Name)
[ (Token.Punctuation)
1000 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
findset (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
parent (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
parent (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
findset (Token.Name)
( (Token.Punctuation)
parent (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
parent (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
unionset (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
findset (Token.Name)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
findset (Token.Name)
( (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
sizer (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
sizer (Token.Name)
[ (Token.Punctuation)
b (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
swap (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
sizer (Token.Name)
[ (Token.Punctuation)
b (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
sizer (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
parent (Token.Name)
[ (Token.Punctuation)
b (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 (Token.Comment.Single)
struct (Token.Keyword)
  (Token.Text.Whitespace)
fenwick (Token.Name.Class)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
bit (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
fenwick (Token.Name)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
this (Token.Keyword)
- (Token.Operator)
> (Token.Operator)
n (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
bit (Token.Name)
. (Token.Punctuation)
assign (Token.Name)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
it (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
add (Token.Name)
( (Token.Punctuation)
it (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
[ (Token.Punctuation)
it (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
sum (Token.Name)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
idx (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
idx (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
ret (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
idx (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
idx (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
idx (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
idx (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
ret (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
bit (Token.Name)
[ (Token.Punctuation)
idx (Token.Name)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
ret (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
add (Token.Name)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
idx (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
idx (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
n (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
idx (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
idx (Token.Name)
  (Token.Text.Whitespace)
| (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
idx (Token.Name)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
bit (Token.Name)
[ (Token.Punctuation)
idx (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
bit (Token.Name)
[ (Token.Punctuation)
idx (Token.Name)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
max (Token.Name)
( (Token.Punctuation)
0L (Token.Literal.Number.Float)
L (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
bit (Token.Name)
[ (Token.Punctuation)
idx (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 (Token.Comment.Single)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
//freopen("input.txt", "r", stdin);
 (Token.Comment.Single)
     (Token.Text.Whitespace)
//freopen("output.txt", "w", stdout);
 (Token.Comment.Single)
     (Token.Text.Whitespace)
fast (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
j (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
//cin >> T;
 (Token.Comment.Single)
     (Token.Text.Whitespace)
while (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
T (Token.Name)
- (Token.Operator)
- (Token.Operator)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
h (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
h (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
w (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
w (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
" (Token.Literal.String)
 1 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
             (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
 0 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
         (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
