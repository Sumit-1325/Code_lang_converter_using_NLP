# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define fi first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define se second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define be begin (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define en end (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb push_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define eb emplace_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mp make_pair (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ALL(a) (a).be() , (a).en() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define REP(i,n) for(int (i)=0;(i)<(n);(i)++)         (Token.Comment.Preproc)
//repeat n times
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define REP2(i,s,n) for(int (i)=(s);(i)<(n);(i)++)    (Token.Comment.Preproc)
//repeat from s to n 
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define REPD(i,n) for(int (i)=(n);(i)>=0;(i)--)       (Token.Comment.Preproc)
//repeat from n to 0
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define REPD2(i,s,e) for(int (i)=(s);(i)>=(e);(i)--)  (Token.Comment.Preproc)
//repeat from s to e
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define RANGE(i,v) for(auto &(i):v)                   (Token.Comment.Preproc)
//repeat range
 (Token.Comment.Single)
# (Token.Comment.Preproc)
define ASIZE(a) (sizeof(a)  (Token.Comment.Preproc)
/ (Token.Comment.Preproc)
 sizeof(a[0]))           (Token.Comment.Preproc)
//array size
 (Token.Comment.Single)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
LL (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)
  (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
  (Token.Text.Whitespace)
T (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
Vi (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
V (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
Vll (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
V (Token.Name)
< (Token.Operator)
LL (Token.Name)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
Vs (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
V (Token.Name)
< (Token.Operator)
string (Token.Name)
> (Token.Operator)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
w (Token.Name)
> (Token.Operator)
> (Token.Operator)
h (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
s (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
fixed (Token.Name)
< (Token.Operator)
< (Token.Operator)
setprecision (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
s (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
x (Token.Name)
* (Token.Operator)
2 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
w (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
* (Token.Operator)
2 (Token.Literal.Number.Integer)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
     (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
