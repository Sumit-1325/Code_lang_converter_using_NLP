# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define ll long long int (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pb push_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mp make_pair (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define pll pair<ll,ll> (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define INF LLONG_MAX (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define PI acos(-1) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
MOD (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e9 (Token.Literal.Number.Float)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
7 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define x first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define y second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define all(x) x.begin(),x.end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mem(a,b) memset(a,b,sizeof(a)) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(c,a,b) for(ll c=a;c<b;c++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define IOS ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL); (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define min_heap priority_queue<pll,vector<pll>,greater<pll> > (Token.Comment.Preproc)

 (Token.Comment.Preproc)
ll (Token.Name)
  (Token.Text.Whitespace)
dx4 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
dy4 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
dx8 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
dy8 (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
= (Token.Operator)
{ (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
isvalid (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
y (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
x (Token.Name)
> (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
y (Token.Name)
> (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
x (Token.Name)
< (Token.Operator)
n (Token.Name)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
y (Token.Name)
< (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
isprime (Token.Name)
[ (Token.Punctuation)
1000 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
prime (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
sievetoprime (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
n (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
mem (Token.Name)
( (Token.Punctuation)
isprime (Token.Name)
, (Token.Punctuation)
true (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
p (Token.Name)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)
p (Token.Name)
* (Token.Operator)
p (Token.Name)
< (Token.Operator)
= (Token.Operator)
n (Token.Name)
; (Token.Punctuation)
p (Token.Name)
+ (Token.Operator)
+ (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
isprime (Token.Name)
[ (Token.Punctuation)
p (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
true (Token.Name.Builtin)
) (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
for (Token.Keyword)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
i (Token.Name)
= (Token.Operator)
p (Token.Name)
* (Token.Operator)
p (Token.Name)
; (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
= (Token.Operator)
n (Token.Name)
; (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
= (Token.Operator)
p (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
				 (Token.Text.Whitespace)
isprime (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
false (Token.Name.Builtin)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
lcm (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
/ (Token.Operator)
__gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
* (Token.Operator)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
cmp (Token.Name.Function)
( (Token.Punctuation)
pair (Token.Name)
< (Token.Operator)
string (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
pair (Token.Name)
< (Token.Operator)
string (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
. (Token.Punctuation)
first (Token.Name)
< (Token.Operator)
b (Token.Name)
. (Token.Punctuation)
first (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
. (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
b (Token.Name)
. (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
. (Token.Punctuation)
y (Token.Name)
< (Token.Operator)
b (Token.Name)
. (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
bool (Token.Keyword.Type)
  (Token.Text.Whitespace)
cmp (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
> (Token.Operator)
b (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
solve (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
w (Token.Name)
> (Token.Operator)
> (Token.Operator)
h (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
fixed (Token.Name)
< (Token.Operator)
< (Token.Operator)
setprecision (Token.Name)
( (Token.Punctuation)
9 (Token.Literal.Number.Integer)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
a (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
w (Token.Name)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
) (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
1 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
else (Token.Keyword)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
0 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)

 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
IOS (Token.Name)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
t (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
t (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
//	cin>>t;
 (Token.Comment.Single)
	 (Token.Text.Whitespace)
while (Token.Keyword)
( (Token.Punctuation)
t (Token.Name)
- (Token.Operator)
- (Token.Operator)
) (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
solve (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
