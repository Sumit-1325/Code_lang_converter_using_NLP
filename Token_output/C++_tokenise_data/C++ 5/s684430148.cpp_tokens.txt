# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
pragma GCC optimize("Ofast") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
pragma GCC optimize("unroll-loops") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
pragma GCC optimize ("-ffloat-store")   (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
pragma GCC optimize ("-fno-defer-pop") (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define all(a) a.begin(),a.end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ll long long int (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define ld long double (Token.Comment.Preproc)

 (Token.Comment.Preproc)
ll (Token.Name)
  (Token.Text.Whitespace)
power (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
a (Token.Name)
% (Token.Operator)
m (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
t (Token.Name)
= (Token.Operator)
power (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
m (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
m (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
t (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
t (Token.Name)
* (Token.Operator)
t (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
m (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
b (Token.Name)
& (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
t (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
( (Token.Punctuation)
t (Token.Name)
% (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
a (Token.Name)
% (Token.Operator)
m (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
% (Token.Operator)
m (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
t (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
modInverse (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
power (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
m (Token.Name)
-2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
m (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define ps push_back (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define fs first (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define sc second (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define N 3000005 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define endl "\n" (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define mod 1000000007 (Token.Comment.Preproc)

 (Token.Comment.Preproc)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
ios_base (Token.Name)
: (Token.Operator)
: (Token.Operator)
sync_with_stdio (Token.Name)
( (Token.Punctuation)
false (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
cin (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
NULL (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
cout (Token.Name)
. (Token.Punctuation)
tie (Token.Name)
( (Token.Punctuation)
NULL (Token.Name.Builtin)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
ld (Token.Name)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
w (Token.Name)
> (Token.Operator)
> (Token.Operator)
h (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
fixed (Token.Name)
< (Token.Operator)
< (Token.Operator)
setprecision (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
0.0 (Token.Literal.Number.Float)
& (Token.Operator)
& (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
0.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
| (Token.Operator)
| (Token.Operator)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
0.0 (Token.Literal.Number.Float)
& (Token.Operator)
& (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
| (Token.Operator)
| (Token.Operator)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
w (Token.Name)
& (Token.Operator)
& (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
0.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
| (Token.Operator)
| (Token.Operator)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
w (Token.Name)
& (Token.Operator)
& (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
| (Token.Operator)
| (Token.Operator)
( (Token.Punctuation)
floor (Token.Name)
( (Token.Punctuation)
w (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
ceil (Token.Name)
( (Token.Punctuation)
w (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
& (Token.Operator)
& (Token.Operator)
floor (Token.Name)
( (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
ceil (Token.Name)
( (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
ld (Token.Name)
  (Token.Text.Whitespace)
k (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
( (Token.Punctuation)
ld (Token.Name)
) (Token.Punctuation)
2.0 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
k (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
 0 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
( (Token.Punctuation)
ld (Token.Name)
) (Token.Punctuation)
2.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
) (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
& (Token.Operator)
& (Token.Operator)
( (Token.Punctuation)
( (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
ld (Token.Name)
) (Token.Punctuation)
2.0 (Token.Literal.Number.Float)
) (Token.Punctuation)
= (Token.Operator)
= (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
ld (Token.Name)
  (Token.Text.Whitespace)
k (Token.Name)
, (Token.Punctuation)
l (Token.Name)
, (Token.Punctuation)
f (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
k (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
l (Token.Name)
= (Token.Operator)
y (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
k (Token.Name)
= (Token.Operator)
= (Token.Operator)
l (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
k (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
 1 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
max (Token.Name)
( (Token.Punctuation)
k (Token.Name)
, (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
 0 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
w (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
ld (Token.Name)
) (Token.Punctuation)
2.0 (Token.Literal.Number.Float)
= (Token.Operator)
= (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
ld (Token.Name)
  (Token.Text.Whitespace)
k (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
k (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
k (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
 0 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
ld (Token.Name)
  (Token.Text.Whitespace)
l (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
l (Token.Name)
= (Token.Operator)
y (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
l (Token.Name)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
 0 (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
