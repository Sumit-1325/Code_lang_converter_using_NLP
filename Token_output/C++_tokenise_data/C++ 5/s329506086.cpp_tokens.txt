# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define ALL(l)  (l).begin(),(l).end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rep(i,n) for(int (i)=0;(i)<(n);(i)++) (Token.Comment.Preproc)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
mod (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
   (Token.Text.Whitespace)
1000000007 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
maxn (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1000000000 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
//---------------------------------------------------------------------------------------------------
 (Token.Comment.Single)
using (Token.Keyword)
  (Token.Text.Whitespace)
vi (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
int (Token.Keyword.Type)
> (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
// intの1次元の型に vi という別名をつける
 (Token.Comment.Single)
using (Token.Keyword)
  (Token.Text.Whitespace)
vll (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
// intの1次元の型に vi という別名をつける
 (Token.Comment.Single)
using (Token.Keyword)
  (Token.Text.Whitespace)
vvi (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
vi (Token.Name)
> (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
// intの2次元の型に vvi という別名をつける
 (Token.Comment.Single)
using (Token.Keyword)
  (Token.Text.Whitespace)
vs (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
string (Token.Name)
> (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
// stringの1次元の型に vs という別名をつける
 (Token.Comment.Single)
using (Token.Keyword)
  (Token.Text.Whitespace)
pll (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
pair (Token.Name)
< (Token.Operator)
ll (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
> (Token.Operator)
; (Token.Punctuation)
  (Token.Text.Whitespace)
// これ以降 pii という型名はpair<ll, ll> と同じ意味で使える
 (Token.Comment.Single)
//---------------------------------------------------------------------------------------------------
 (Token.Comment.Single)
  (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
cin (Token.Name)
> (Token.Operator)
> (Token.Operator)
w (Token.Name)
> (Token.Operator)
> (Token.Operator)
h (Token.Name)
> (Token.Operator)
> (Token.Operator)
x (Token.Name)
> (Token.Operator)
> (Token.Operator)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
" (Token.Literal.String)
  (Token.Literal.String)
" (Token.Literal.String)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
= (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
& (Token.Operator)
& (Token.Operator)
y (Token.Name)
= (Token.Operator)
= (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
1 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
cout (Token.Name)
< (Token.Operator)
< (Token.Operator)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
< (Token.Operator)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
    (Token.Text.Whitespace)

 (Token.Text.Whitespace)
