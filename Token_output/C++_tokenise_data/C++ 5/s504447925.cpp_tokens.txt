# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
<bits/stdc++.h> (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)

 (Token.Text.Whitespace)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
n (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
w (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
h (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
y (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
flagx (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
flagy (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
maior (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%d%d%d%d (Token.Literal.String)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
w (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
h (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
& (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
areag (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
areax (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
x (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
h (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
areay (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
w (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
y (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
flagx (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
flagy (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
maior (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
areax (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
areag (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
areax (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
flagx (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
areag (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
areax (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
maior (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
maior (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
areag (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
areax (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
areay (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
areag (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
areay (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
flagy (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
areag (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
areay (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
  (Token.Text.Whitespace)
maior (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
maior (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
areag (Token.Name)
  (Token.Text.Whitespace)
- (Token.Operator)
  (Token.Text.Whitespace)
areay (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
flagy (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
and (Token.Keyword)
  (Token.Text.Whitespace)
flagx (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.6f 1 (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
( (Token.Punctuation)
maior (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)
else (Token.Keyword)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String)
%.6f 0 (Token.Literal.String)
\n (Token.Literal.String.Escape)
" (Token.Literal.String)
, (Token.Punctuation)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
( (Token.Punctuation)
maior (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
