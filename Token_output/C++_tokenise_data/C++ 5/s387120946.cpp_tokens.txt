//↓template↓
 (Token.Comment.Single)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
include (Token.Comment.Preproc)
  (Token.Text.Whitespace)
"bits/stdc++.h" (Token.Comment.PreprocFile)

 (Token.Comment.Preproc)
using (Token.Keyword)
  (Token.Text.Whitespace)
namespace (Token.Keyword)
  (Token.Text.Whitespace)
std (Token.Name.Namespace)
; (Token.Punctuation)

 (Token.Text.Whitespace)
# (Token.Comment.Preproc)
define Would (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define you (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define all(n)  n.begin(),n.end() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
# (Token.Comment.Preproc)
define rall(n) n.rbegin(),n.rend() (Token.Comment.Preproc)

 (Token.Comment.Preproc)
typedef (Token.Keyword)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
ll (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
INF (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e18 (Token.Literal.Number.Float)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
MOD (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1e9 (Token.Literal.Number.Float)
  (Token.Text.Whitespace)
+ (Token.Operator)
  (Token.Text.Whitespace)
7 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
pi (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
acos (Token.Name)
( (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
SIZE (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
17 (Token.Literal.Number.Integer)
; (Token.Punctuation)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
dx (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
} (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
dy (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
-1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
} (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
alp (Token.Name)
[ (Token.Punctuation)
30 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
fac (Token.Name)
[ (Token.Punctuation)
200005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
finv (Token.Name)
[ (Token.Punctuation)
200005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
  (Token.Text.Whitespace)
inv (Token.Name)
[ (Token.Punctuation)
200005 (Token.Literal.Number.Integer)
] (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
ll (Token.Name)
> (Token.Operator)
dij (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
struct (Token.Keyword)
  (Token.Text.Whitespace)
edge (Token.Name.Class)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
to (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
cost (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
vector (Token.Name)
< (Token.Operator)
edge (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
> (Token.Operator)
G (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
mod_pow (Token.Name.Function)
( (Token.Punctuation)
ll (Token.Name)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
b (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
ll (Token.Name)
  (Token.Text.Whitespace)
res (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
  (Token.Text.Whitespace)
mul (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
  (Token.Text.Whitespace)
31 (Token.Literal.Number.Integer)
; (Token.Punctuation)
  (Token.Text.Whitespace)
+ (Token.Operator)
+ (Token.Operator)
i (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
i (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
res (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
mul (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
			 (Token.Text.Whitespace)
res (Token.Name)
  (Token.Text.Whitespace)
% (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
MOD (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
		 (Token.Text.Whitespace)
mul (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
mul (Token.Name)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
mul (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
% (Token.Operator)
  (Token.Text.Whitespace)
MOD (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
res (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
void (Token.Keyword.Type)
  (Token.Text.Whitespace)
addedge (Token.Name.Function)
( (Token.Punctuation)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
from (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
to (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
cost (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
G (Token.Name)
[ (Token.Punctuation)
from (Token.Name)
] (Token.Punctuation)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
to (Token.Name)
, (Token.Punctuation)
cost (Token.Name)
  (Token.Text.Whitespace)
} (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
G (Token.Name)
[ (Token.Punctuation)
to (Token.Name)
] (Token.Punctuation)
. (Token.Punctuation)
push_back (Token.Name)
( (Token.Punctuation)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
from (Token.Name)
, (Token.Punctuation)
cost (Token.Name)
  (Token.Text.Whitespace)
} (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
  (Token.Text.Whitespace)
make_v (Token.Name)
( (Token.Punctuation)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
Ts (Token.Name)
> (Token.Operator)

 (Token.Text.Whitespace)
auto (Token.Keyword)
  (Token.Text.Whitespace)
make_v (Token.Name)
( (Token.Punctuation)
size_t (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
Ts (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
  (Token.Text.Whitespace)
ts (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
return (Token.Keyword)
  (Token.Text.Whitespace)
vector (Token.Name)
< (Token.Operator)
decltype (Token.Keyword)
( (Token.Punctuation)
make_v (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
ts (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
> (Token.Operator)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
make_v (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
( (Token.Punctuation)
ts (Token.Name)
. (Token.Punctuation)
. (Token.Punctuation)
. (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
enable_if (Token.Name.Class)
< (Token.Operator)
is_class (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
value (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
type (Token.Name)

 (Token.Text.Whitespace)
fill_v (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
t (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
t (Token.Name)
  (Token.Text.Whitespace)
= (Token.Operator)
  (Token.Text.Whitespace)
v (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
template (Token.Keyword)
< (Token.Operator)
typename (Token.Keyword)
  (Token.Text.Whitespace)
T (Token.Name.Class)
, (Token.Punctuation)
  (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name.Class)
> (Token.Operator)

 (Token.Text.Whitespace)
typename (Token.Keyword)
  (Token.Text.Whitespace)
enable_if (Token.Name.Class)
< (Token.Operator)
is_class (Token.Name)
< (Token.Operator)
T (Token.Name)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
value (Token.Name)
  (Token.Text.Whitespace)
! (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
> (Token.Operator)
: (Token.Operator)
: (Token.Operator)
type (Token.Name)

 (Token.Text.Whitespace)
fill_v (Token.Name)
( (Token.Punctuation)
T (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
t (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
const (Token.Keyword)
  (Token.Text.Whitespace)
V (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
v (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
for (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
auto (Token.Keyword)
  (Token.Text.Whitespace)
& (Token.Operator)
e (Token.Name)
  (Token.Text.Whitespace)
: (Token.Operator)
  (Token.Text.Whitespace)
t (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
fill_v (Token.Name)
( (Token.Punctuation)
e (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
v (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
//↑template↑
 (Token.Comment.Single)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)

 (Token.Text.Whitespace)
int (Token.Keyword.Type)
  (Token.Text.Whitespace)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
  (Token.Text.Whitespace)
a (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
b (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
c (Token.Name)
, (Token.Punctuation)
  (Token.Text.Whitespace)
d (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cin (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
a (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
c (Token.Name)
  (Token.Text.Whitespace)
> (Token.Operator)
> (Token.Operator)
  (Token.Text.Whitespace)
d (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
setprecision (Token.Name)
( (Token.Punctuation)
20 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
long (Token.Keyword.Type)
  (Token.Text.Whitespace)
double (Token.Keyword.Type)
) (Token.Punctuation)
( (Token.Punctuation)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
  (Token.Text.Whitespace)
* (Token.Operator)
  (Token.Text.Whitespace)
( (Token.Punctuation)
b (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
if (Token.Keyword)
  (Token.Text.Whitespace)
( (Token.Punctuation)
a (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
c (Token.Name)
  (Token.Text.Whitespace)
& (Token.Operator)
& (Token.Operator)
  (Token.Text.Whitespace)
b (Token.Name)
  (Token.Text.Whitespace)
/ (Token.Operator)
  (Token.Text.Whitespace)
2 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
= (Token.Operator)
= (Token.Operator)
  (Token.Text.Whitespace)
d (Token.Name)
) (Token.Punctuation)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
1 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
	 (Token.Text.Whitespace)
else (Token.Keyword)
  (Token.Text.Whitespace)
{ (Token.Punctuation)
  (Token.Text.Whitespace)
cout (Token.Name)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
0 (Token.Literal.Number.Integer)
  (Token.Text.Whitespace)
< (Token.Operator)
< (Token.Operator)
  (Token.Text.Whitespace)
endl (Token.Name)
; (Token.Punctuation)
  (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
} (Token.Punctuation)

 (Token.Text.Whitespace)
