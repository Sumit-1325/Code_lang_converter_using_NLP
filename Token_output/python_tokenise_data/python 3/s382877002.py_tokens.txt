n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
l (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
x (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
- (Token.Operator)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
x (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
{} (Token.Literal.String.Interpol)
' (Token.Literal.String.Single)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
