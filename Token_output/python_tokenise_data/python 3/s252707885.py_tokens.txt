n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
o (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
a (Token.Name)
] (Token.Punctuation)
for (Token.Keyword)
idx (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
w (Token.Name)
= (Token.Operator)
o (Token.Name)
[ (Token.Punctuation)
idx (Token.Name)
] (Token.Punctuation)
o (Token.Name)
[ (Token.Punctuation)
idx (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
o (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
idx (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
o (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
idx (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
w (Token.Name)
for (Token.Keyword)
idx (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
o (Token.Name)
[ (Token.Punctuation)
idx (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
if (Token.Keyword)
idx (Token.Name)
== (Token.Operator)
n (Token.Name)
: (Token.Punctuation)
break (Token.Keyword)
