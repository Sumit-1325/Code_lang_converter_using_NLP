cn (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
try (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
cn (Token.Name)
== (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
cn (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
cn (Token.Name)
== (Token.Operator)
2 (Token.Literal.Number.Integer)
: (Token.Punctuation)
nums (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
nums (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
nums (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
nums (Token.Name)
. (Token.Operator)
reverse (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
nums (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
except (Token.Keyword)
EOFError (Token.Name.Exception)
: (Token.Punctuation)
break (Token.Keyword)
