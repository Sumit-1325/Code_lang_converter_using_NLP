inp (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
_ (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
inpsum (Token.Name)
= (Token.Operator)
sum (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
lambda (Token.Keyword)
ij (Token.Name)
: (Token.Punctuation)
abs (Token.Name.Builtin)
( (Token.Punctuation)
ij (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
+ (Token.Operator)
ij (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
inp (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
not (Token.Operator.Word)
( (Token.Punctuation)
inpsum (Token.Name)
== (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
inp (Token.Name)
) (Token.Punctuation)
or (Token.Operator.Word)
inpsum (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
exit (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
seeds (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
[ (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
inpsum (Token.Name)
== (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
inp (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
<< (Token.Operator)
i (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
32 (Token.Literal.Number.Integer)
) (Token.Punctuation)
] (Token.Punctuation)
# print(inp) (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
, (Token.Punctuation)
reversed (Token.Name.Builtin)
( (Token.Punctuation)
seeds (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
in (Token.Operator.Word)
inp (Token.Name)
: (Token.Punctuation)
for (Token.Keyword)
k (Token.Name)
in (Token.Operator.Word)
reversed (Token.Name.Builtin)
( (Token.Punctuation)
seeds (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
res (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
if (Token.Keyword)
abs (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
> (Token.Operator)
abs (Token.Name.Builtin)
( (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
res (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
R (Token.Literal.String.Single)
' (Token.Literal.String.Single)
x (Token.Name)
- (Token.Operator)
= (Token.Operator)
k (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
res (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
L (Token.Literal.String.Single)
' (Token.Literal.String.Single)
x (Token.Name)
+ (Token.Operator)
= (Token.Operator)
k (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
res (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
U (Token.Literal.String.Single)
' (Token.Literal.String.Single)
y (Token.Name)
- (Token.Operator)
= (Token.Operator)
k (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
res (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
D (Token.Literal.String.Single)
' (Token.Literal.String.Single)
y (Token.Name)
+ (Token.Operator)
= (Token.Operator)
k (Token.Name)
# print((x,y)) (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
res (Token.Name)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
