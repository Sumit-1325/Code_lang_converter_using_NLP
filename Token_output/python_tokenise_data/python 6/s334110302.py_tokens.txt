############################################################################### (Token.Comment.Single)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
from (Token.Keyword.Namespace)
bisect (Token.Name.Namespace)
import (Token.Keyword.Namespace)
bisect_left (Token.Name)
as (Token.Keyword)
binl (Token.Name)
from (Token.Keyword.Namespace)
copy (Token.Name.Namespace)
import (Token.Keyword.Namespace)
copy (Token.Name)
, (Token.Punctuation)
deepcopy (Token.Name)
def (Token.Keyword)
intin (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
input_tuple (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
input_tuple (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
input_tuple (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
return (Token.Keyword)
tuple (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input_tuple (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
intina (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
intinl (Token.Name.Function)
( (Token.Punctuation)
count (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
intin (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
_ (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
count (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
modadd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
global (Token.Keyword)
mod (Token.Name)
return (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
+ (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
mod (Token.Name)
def (Token.Keyword)
modmlt (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
global (Token.Keyword)
mod (Token.Name)
return (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
* (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
mod (Token.Name)
def (Token.Keyword)
lcm (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
while (Token.Keyword)
y (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
x (Token.Name)
= (Token.Operator)
y (Token.Name)
y (Token.Name)
= (Token.Operator)
z (Token.Name)
return (Token.Keyword)
x (Token.Name)
def (Token.Keyword)
get_divisors (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
retlist (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
* (Token.Operator)
* (Token.Operator)
0.5 (Token.Literal.Number.Float)
) (Token.Punctuation)
+ (Token.Operator)
3 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
retlist (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
retlist (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
x (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
i (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
retlist (Token.Name)
def (Token.Keyword)
make_linklist (Token.Name.Function)
( (Token.Punctuation)
xylist (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
linklist (Token.Name)
= (Token.Operator)
{ (Token.Punctuation)
} (Token.Punctuation)
for (Token.Keyword)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
in (Token.Operator.Word)
xylist (Token.Name)
: (Token.Punctuation)
linklist (Token.Name)
. (Token.Operator)
setdefault (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
linklist (Token.Name)
. (Token.Operator)
setdefault (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
linklist (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
linklist (Token.Name)
[ (Token.Punctuation)
b (Token.Name)
] (Token.Punctuation)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
linklist (Token.Name)
def (Token.Keyword)
calc_longest_distance (Token.Name.Function)
( (Token.Punctuation)
linklist (Token.Name)
, (Token.Punctuation)
v (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
distance_list (Token.Name)
= (Token.Operator)
{ (Token.Punctuation)
} (Token.Punctuation)
distance_count (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
distance (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
vlist_previous (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
vlist (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
v (Token.Name)
] (Token.Punctuation)
nodecount (Token.Name)
= (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
linklist (Token.Name)
) (Token.Punctuation)
while (Token.Keyword)
distance_count (Token.Name)
< (Token.Operator)
nodecount (Token.Name)
: (Token.Punctuation)
vlist_next (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
v (Token.Name)
in (Token.Operator.Word)
vlist (Token.Name)
: (Token.Punctuation)
distance_list (Token.Name)
[ (Token.Punctuation)
v (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
distance (Token.Name)
distance_count (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
vlist_next (Token.Name)
. (Token.Operator)
extend (Token.Name)
( (Token.Punctuation)
linklist (Token.Name)
[ (Token.Punctuation)
v (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
distance (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
vlist_to_del (Token.Name)
= (Token.Operator)
vlist_previous (Token.Name)
vlist_previous (Token.Name)
= (Token.Operator)
vlist (Token.Name)
vlist (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
set (Token.Name.Builtin)
( (Token.Punctuation)
vlist_next (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
set (Token.Name.Builtin)
( (Token.Punctuation)
vlist_to_del (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
max_distance (Token.Name)
= (Token.Operator)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
max_v (Token.Name)
= (Token.Operator)
None (Token.Keyword.Constant)
for (Token.Keyword)
v (Token.Name)
, (Token.Punctuation)
distance (Token.Name)
in (Token.Operator.Word)
distance_list (Token.Name)
. (Token.Operator)
items (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
distance (Token.Name)
> (Token.Operator)
max_distance (Token.Name)
: (Token.Punctuation)
max_distance (Token.Name)
= (Token.Operator)
distance (Token.Name)
max_v (Token.Name)
= (Token.Operator)
v (Token.Name)
return (Token.Keyword)
( (Token.Punctuation)
max_distance (Token.Name)
, (Token.Punctuation)
max_v (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
calc_tree_diameter (Token.Name.Function)
( (Token.Punctuation)
linklist (Token.Name)
, (Token.Punctuation)
v (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
_ (Token.Name)
, (Token.Punctuation)
u (Token.Name)
= (Token.Operator)
calc_longest_distance (Token.Name)
( (Token.Punctuation)
linklist (Token.Name)
, (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
distance (Token.Name)
, (Token.Punctuation)
_ (Token.Name)
= (Token.Operator)
calc_longest_distance (Token.Name)
( (Token.Punctuation)
linklist (Token.Name)
, (Token.Punctuation)
u (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
distance (Token.Name)
############################################################################### (Token.Comment.Single)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
n (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
n (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdout (Token.Name)
. (Token.Operator)
write (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
9 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
9 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdout (Token.Name)
. (Token.Operator)
write (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
