import (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
v (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
num1 (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
num2 (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
num2_sam (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
counts (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
num1 (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
v (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
num2 (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
v (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
num2_sam (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
v (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
n1 (Token.Name)
= (Token.Operator)
collections (Token.Name)
. (Token.Operator)
Counter (Token.Name)
( (Token.Punctuation)
num1 (Token.Name)
) (Token.Punctuation)
. (Token.Operator)
most_common (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
num2_sam (Token.Name)
. (Token.Operator)
count (Token.Name)
( (Token.Punctuation)
n1 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
num2_sam (Token.Name)
. (Token.Operator)
remove (Token.Name)
( (Token.Punctuation)
n1 (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
num2_sam (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
n2 (Token.Name)
= (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
num1 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
n2 (Token.Name)
= (Token.Operator)
collections (Token.Name)
. (Token.Operator)
Counter (Token.Name)
( (Token.Punctuation)
num2_sam (Token.Name)
) (Token.Punctuation)
. (Token.Operator)
most_common (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
num2 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
n1 (Token.Name)
!= (Token.Operator)
num1 (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
counts (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
n2 (Token.Name)
!= (Token.Operator)
num2 (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
counts (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
( (Token.Punctuation)
n1 (Token.Name)
== (Token.Operator)
n2 (Token.Name)
) (Token.Punctuation)
and (Token.Operator.Word)
sum (Token.Name.Builtin)
( (Token.Punctuation)
num2 (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
sum (Token.Name.Builtin)
( (Token.Punctuation)
num1 (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
num1 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
sum (Token.Name.Builtin)
( (Token.Punctuation)
counts (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
