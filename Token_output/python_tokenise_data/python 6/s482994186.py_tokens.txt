REPL (Token.Name)
= (Token.Operator)
{ (Token.Punctuation)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
" (Token.Literal.String.Double)
9 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
9 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
} (Token.Punctuation)
num (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
char (Token.Name)
in (Token.Operator.Word)
num (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
REPL (Token.Name)
. (Token.Operator)
get (Token.Name)
( (Token.Punctuation)
char (Token.Name)
, (Token.Punctuation)
char (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
