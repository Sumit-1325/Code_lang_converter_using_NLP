import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
N_str (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
999 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
N (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
N_new (Token.Name)
= (Token.Operator)
N (Token.Name)
while (Token.Keyword)
N (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
N_str (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
N (Token.Name)
% (Token.Operator)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
N (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
N_str (Token.Name)
. (Token.Operator)
reverse (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
N (Token.Name)
= (Token.Operator)
N_new (Token.Name)
if (Token.Keyword)
N_str (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
N_str (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
and (Token.Operator.Word)
N_str (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
N_str (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
break (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
exit (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
