def (Token.Keyword)
slove (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
input (Token.Name.Builtin)
= (Token.Operator)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
s (Token.Name)
= (Token.Operator)
str (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
rstrip (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
\n (Token.Literal.String.Escape)
' (Token.Literal.String.Single)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
* (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
9 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
* (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
9 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
slove (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
