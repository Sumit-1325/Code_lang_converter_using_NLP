def (Token.Keyword)
replace1and9 (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
9 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
return (Token.Keyword)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
return (Token.Keyword)
' (Token.Literal.String.Single)
9 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
n (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
n (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
+ (Token.Operator)
= (Token.Operator)
replace1and9 (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
