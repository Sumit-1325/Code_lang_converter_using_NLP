import (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
v (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
v_int (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
v (Token.Name)
] (Token.Punctuation)
v_odd (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
v_even (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
v_even (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
v_int (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
* (Token.Operator)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
v_odd (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
v_int (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
* (Token.Operator)
2 (Token.Literal.Number.Integer)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
c_odd (Token.Name)
= (Token.Operator)
collections (Token.Name)
. (Token.Operator)
Counter (Token.Name)
( (Token.Punctuation)
v_odd (Token.Name)
) (Token.Punctuation)
c_even (Token.Name)
= (Token.Operator)
collections (Token.Name)
. (Token.Operator)
Counter (Token.Name)
( (Token.Punctuation)
v_even (Token.Name)
) (Token.Punctuation)
max_odd (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
second_odd (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
max_key_odd (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
key (Token.Name)
in (Token.Operator.Word)
c_odd (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
max_odd (Token.Name)
< (Token.Operator)
c_odd (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
second_odd (Token.Name)
= (Token.Operator)
max_odd (Token.Name)
max_odd (Token.Name)
= (Token.Operator)
c_odd (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
max_key_odd (Token.Name)
= (Token.Operator)
key (Token.Name)
elif (Token.Keyword)
second_odd (Token.Name)
< (Token.Operator)
c_odd (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
second_odd (Token.Name)
= (Token.Operator)
c_odd (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
max_even (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
second_even (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
max_key_even (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
key (Token.Name)
in (Token.Operator.Word)
c_even (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
max_even (Token.Name)
< (Token.Operator)
c_even (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
second_even (Token.Name)
= (Token.Operator)
max_even (Token.Name)
max_even (Token.Name)
= (Token.Operator)
c_even (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
max_key_even (Token.Name)
= (Token.Operator)
key (Token.Name)
elif (Token.Keyword)
second_even (Token.Name)
< (Token.Operator)
c_even (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
second_even (Token.Name)
= (Token.Operator)
c_even (Token.Name)
[ (Token.Punctuation)
key (Token.Name)
] (Token.Punctuation)
if (Token.Keyword)
max_key_even (Token.Name)
!= (Token.Operator)
max_key_odd (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
max_even (Token.Name)
- (Token.Operator)
max_odd (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
max_even (Token.Name)
> (Token.Operator)
max_odd (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
max_even (Token.Name)
== (Token.Operator)
second_even (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
max_even (Token.Name)
- (Token.Operator)
max_odd (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
max_even (Token.Name)
- (Token.Operator)
second_odd (Token.Name)
) (Token.Punctuation)
elif (Token.Keyword)
max_even (Token.Name)
< (Token.Operator)
max_odd (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
max_odd (Token.Name)
== (Token.Operator)
second_odd (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
max_odd (Token.Name)
- (Token.Operator)
max_even (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
max_odd (Token.Name)
- (Token.Operator)
second_even (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
second_odd (Token.Name)
> (Token.Operator)
second_even (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
max_even (Token.Name)
- (Token.Operator)
second_odd (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
max_odd (Token.Name)
- (Token.Operator)
second_even (Token.Name)
) (Token.Punctuation)
