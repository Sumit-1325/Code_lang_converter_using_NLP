from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
Counter (Token.Name)
, (Token.Punctuation)
defaultdict (Token.Name)
, (Token.Punctuation)
deque (Token.Name)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
, (Token.Operator)
bisect (Token.Name.Namespace)
, (Token.Operator)
math (Token.Name.Namespace)
, (Token.Operator)
itertools (Token.Name.Namespace)
, (Token.Operator)
string (Token.Name.Namespace)
, (Token.Operator)
queue (Token.Name.Namespace)
from (Token.Keyword.Namespace)
heapq (Token.Name.Namespace)
import (Token.Keyword.Namespace)
heappop (Token.Name)
, (Token.Punctuation)
heappush (Token.Name)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
8 (Token.Literal.Number.Integer)
) (Token.Punctuation)
mod (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
def (Token.Keyword)
inp (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
inpl (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
inpl_str (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
inpln (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
q (Token.Name)
= (Token.Operator)
deque (Token.Name)
( (Token.Punctuation)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
L (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
== (Token.Operator)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
q (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
elif (Token.Keyword)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
== (Token.Operator)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
q (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
q (Token.Name)
: (Token.Punctuation)
q (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
while (Token.Keyword)
q (Token.Name)
: (Token.Punctuation)
L (Token.Name)
+ (Token.Operator)
= (Token.Operator)
q (Token.Name)
. (Token.Operator)
popleft (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
L (Token.Name)
) (Token.Punctuation)
