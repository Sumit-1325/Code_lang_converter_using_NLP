string (Token.Name)
= (Token.Operator)
str (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
str_len (Token.Name)
= (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
string (Token.Name)
) (Token.Punctuation)
out_string (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
for (Token.Keyword)
num (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
str_len (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
string (Token.Name)
[ (Token.Punctuation)
num (Token.Name)
] (Token.Punctuation)
== (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
out_string (Token.Name)
) (Token.Punctuation)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
out_string (Token.Name)
= (Token.Operator)
out_string (Token.Name)
[ (Token.Punctuation)
: (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
out_string (Token.Name)
+ (Token.Operator)
= (Token.Operator)
string (Token.Name)
[ (Token.Punctuation)
num (Token.Name)
] (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
out_string (Token.Name)
) (Token.Punctuation)
