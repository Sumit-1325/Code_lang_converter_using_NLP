import (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
S (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
N (Token.Name)
= (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
S (Token.Name)
) (Token.Punctuation)
D (Token.Name)
= (Token.Operator)
collections (Token.Name)
. (Token.Operator)
deque (Token.Name)
( (Token.Punctuation)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
S (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
== (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
D (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
D (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
S (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
list (Token.Name.Builtin)
( (Token.Punctuation)
D (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
