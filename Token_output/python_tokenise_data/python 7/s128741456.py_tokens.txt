s (Token.Name)
= (Token.Operator)
str (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
t (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
a (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
p (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
s (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
if (Token.Keyword)
p (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
a (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
t (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
" (Token.Literal.String.Double)
0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
p (Token.Name)
- (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
t (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
elif (Token.Keyword)
x (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
if (Token.Keyword)
p (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
a (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
t (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
p (Token.Name)
- (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
t (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
elif (Token.Keyword)
x (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
if (Token.Keyword)
t (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
t (Token.Name)
- (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
p (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
ans (Token.Name)
= (Token.Operator)
str (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
while (Token.Keyword)
i (Token.Name)
< (Token.Operator)
t (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
+ (Token.Operator)
= (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
