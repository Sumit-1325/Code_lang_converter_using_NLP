#入力 (Token.Comment.Single)
a (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
#空のリスト (Token.Comment.Single)
ans (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
c (Token.Name)
in (Token.Operator.Word)
a (Token.Name)
: (Token.Punctuation)
#cが0文字目からaまで (Token.Comment.Single)
if (Token.Keyword)
c (Token.Name)
!= (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
#Bでなければアペンド (Token.Comment.Single)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
c (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
#Bであってさらにリストがからでなければpop (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
#listをくっつけた文字にできる (Token.Comment.Single)
