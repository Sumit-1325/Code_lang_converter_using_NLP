import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
, (Token.Operator)
re (Token.Name.Namespace)
, (Token.Operator)
os (Token.Name.Namespace)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deque (Token.Name)
, (Token.Punctuation)
defaultdict (Token.Name)
, (Token.Punctuation)
Counter (Token.Name)
from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
ceil (Token.Name)
, (Token.Punctuation)
sqrt (Token.Name)
, (Token.Punctuation)
hypot (Token.Name)
, (Token.Punctuation)
factorial (Token.Name)
, (Token.Punctuation)
pi (Token.Name)
, (Token.Punctuation)
sin (Token.Name)
, (Token.Punctuation)
cos (Token.Name)
, (Token.Punctuation)
radians (Token.Name)
, (Token.Punctuation)
floor (Token.Name)
from (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
permutations (Token.Name)
, (Token.Punctuation)
combinations (Token.Name)
, (Token.Punctuation)
product (Token.Name)
, (Token.Punctuation)
accumulate (Token.Name)
from (Token.Keyword.Namespace)
operator (Token.Name.Namespace)
import (Token.Keyword.Namespace)
itemgetter (Token.Name)
, (Token.Punctuation)
mul (Token.Name)
from (Token.Keyword.Namespace)
copy (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deepcopy (Token.Name)
from (Token.Keyword.Namespace)
string (Token.Name.Namespace)
import (Token.Keyword.Namespace)
ascii_lowercase (Token.Name)
, (Token.Punctuation)
ascii_uppercase (Token.Name)
, (Token.Punctuation)
digits (Token.Name)
from (Token.Keyword.Namespace)
fractions (Token.Name.Namespace)
import (Token.Keyword.Namespace)
gcd (Token.Name)
def (Token.Keyword)
input (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
INT (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
MAP (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
S_MAP (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
LIST (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
S_LIST (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
) (Token.Punctuation)
INF (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
inf (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
mod (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
l (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
S (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
!= (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
l (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
and (Token.Operator.Word)
len (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
l (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
and (Token.Operator.Word)
len (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
continue (Token.Keyword)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
