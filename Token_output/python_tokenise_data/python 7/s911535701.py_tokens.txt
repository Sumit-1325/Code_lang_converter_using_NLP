S (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
R (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
S (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
and (Token.Operator.Word)
len (Token.Name.Builtin)
( (Token.Punctuation)
R (Token.Name)
) (Token.Punctuation)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
R (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
x (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
or (Token.Operator.Word)
x (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
R (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
R (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
