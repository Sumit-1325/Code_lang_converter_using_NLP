import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
def (Token.Keyword)
i (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
i2 (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
s (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
str (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
l (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
intl (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
k (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
k (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
lx (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
lambda (Token.Keyword)
x (Token.Name)
: (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
t (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
tuple (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
replace (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
pass (Token.Keyword)
s (Token.Name)
= (Token.Operator)
l (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
moji (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
== (Token.Operator)
" (Token.Literal.String.Double)
0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
moji (Token.Name)
= (Token.Operator)
moji (Token.Name)
+ (Token.Operator)
" (Token.Literal.String.Double)
0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
elif (Token.Keyword)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
== (Token.Operator)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
moji (Token.Name)
= (Token.Operator)
moji (Token.Name)
+ (Token.Operator)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
else (Token.Keyword)
: (Token.Punctuation)
moji (Token.Name)
= (Token.Operator)
moji (Token.Name)
[ (Token.Punctuation)
: (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
moji (Token.Name)
) (Token.Punctuation)
