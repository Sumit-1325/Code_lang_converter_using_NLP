# -*- coding: utf-8 -*- (Token.Comment.Single)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
) (Token.Punctuation)
INF (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
18 (Token.Literal.Number.Integer)
MOD (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
input (Token.Name.Builtin)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
rstrip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
YesNo (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
b (Token.Name)
: (Token.Punctuation)
bool (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
Yes (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
b (Token.Name)
else (Token.Keyword)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
No (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
) (Token.Punctuation)
YESNO (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
b (Token.Name)
: (Token.Punctuation)
bool (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
YES (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
b (Token.Name)
else (Token.Keyword)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
NO (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
) (Token.Punctuation)
int1 (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
x (Token.Name)
: (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
S (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
B (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
if (Token.Keyword)
ans (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
