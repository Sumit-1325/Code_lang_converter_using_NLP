import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
, (Token.Operator)
re (Token.Name.Namespace)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deque (Token.Name)
, (Token.Punctuation)
defaultdict (Token.Name)
, (Token.Punctuation)
Counter (Token.Name)
from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
ceil (Token.Name)
, (Token.Punctuation)
sqrt (Token.Name)
, (Token.Punctuation)
hypot (Token.Name)
, (Token.Punctuation)
factorial (Token.Name)
, (Token.Punctuation)
pi (Token.Name)
, (Token.Punctuation)
sin (Token.Name)
, (Token.Punctuation)
cos (Token.Name)
, (Token.Punctuation)
tan (Token.Name)
, (Token.Punctuation)
asin (Token.Name)
, (Token.Punctuation)
acos (Token.Name)
, (Token.Punctuation)
atan (Token.Name)
, (Token.Punctuation)
radians (Token.Name)
, (Token.Punctuation)
degrees (Token.Name)
, (Token.Punctuation)
log2 (Token.Name)
from (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
accumulate (Token.Name)
, (Token.Punctuation)
permutations (Token.Name)
, (Token.Punctuation)
combinations (Token.Name)
, (Token.Punctuation)
combinations_with_replacement (Token.Name)
, (Token.Punctuation)
product (Token.Name)
, (Token.Punctuation)
groupby (Token.Name)
from (Token.Keyword.Namespace)
operator (Token.Name.Namespace)
import (Token.Keyword.Namespace)
itemgetter (Token.Name)
, (Token.Punctuation)
mul (Token.Name)
from (Token.Keyword.Namespace)
copy (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deepcopy (Token.Name)
from (Token.Keyword.Namespace)
string (Token.Name.Namespace)
import (Token.Keyword.Namespace)
ascii_lowercase (Token.Name)
, (Token.Punctuation)
ascii_uppercase (Token.Name)
, (Token.Punctuation)
digits (Token.Name)
from (Token.Keyword.Namespace)
bisect (Token.Name.Namespace)
import (Token.Keyword.Namespace)
bisect (Token.Name)
, (Token.Punctuation)
bisect_left (Token.Name)
from (Token.Keyword.Namespace)
fractions (Token.Name.Namespace)
import (Token.Keyword.Namespace)
gcd (Token.Name)
from (Token.Keyword.Namespace)
heapq (Token.Name.Namespace)
import (Token.Keyword.Namespace)
heappush (Token.Name)
, (Token.Punctuation)
heappop (Token.Name)
from (Token.Keyword.Namespace)
functools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
reduce (Token.Name)
def (Token.Keyword)
input (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
INT (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
MAP (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
LIST (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
ZIP (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
zip (Token.Name.Builtin)
( (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
MAP (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
_ (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
) (Token.Punctuation)
INF (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
inf (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
mod (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
s (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
!= (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
ans (Token.Name)
!= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
: (Token.Punctuation)
del (Token.Keyword)
ans (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
