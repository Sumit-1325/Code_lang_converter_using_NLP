S (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
S_list (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
S (Token.Name)
) (Token.Punctuation)
answer (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
S_num (Token.Name)
in (Token.Operator.Word)
S_list (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
S_num (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
answer (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
elif (Token.Keyword)
S_num (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
answer (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
elif (Token.Keyword)
not (Token.Operator.Word)
answer (Token.Name)
: (Token.Punctuation)
continue (Token.Keyword)
else (Token.Keyword)
: (Token.Punctuation)
del (Token.Keyword)
answer (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
answer_honmono (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
answer_honmono (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
answer (Token.Name)
) (Token.Punctuation)
