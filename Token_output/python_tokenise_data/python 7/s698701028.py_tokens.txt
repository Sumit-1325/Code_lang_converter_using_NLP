def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
data (Token.Name)
= (Token.Operator)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
row (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
c (Token.Name)
in (Token.Operator.Word)
data (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
c (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
row (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
row (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
continue (Token.Keyword)
row (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
c (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
row (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
