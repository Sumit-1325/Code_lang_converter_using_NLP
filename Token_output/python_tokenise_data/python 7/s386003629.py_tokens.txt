from (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
stdin (Token.Name)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deque (Token.Name)
input (Token.Name.Builtin)
= (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
s (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
rstrip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
d (Token.Name)
= (Token.Operator)
deque (Token.Name)
( (Token.Punctuation)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
s (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
!= (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
d (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
d (Token.Name)
: (Token.Punctuation)
d (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
pass (Token.Keyword)
while (Token.Keyword)
d (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
d (Token.Name)
. (Token.Operator)
popleft (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
