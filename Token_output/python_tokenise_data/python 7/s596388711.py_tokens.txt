s (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
] (Token.Punctuation)
* (Token.Operator)
10 (Token.Literal.Number.Integer)
index (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
ss (Token.Name)
in (Token.Operator.Word)
s (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
ss (Token.Name)
!= (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
ans (Token.Name)
[ (Token.Punctuation)
index (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
ss (Token.Name)
index (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
ans (Token.Name)
[ (Token.Punctuation)
index (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
index (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
index (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
ans (Token.Name)
[ (Token.Punctuation)
index (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
. (Token.Operator)
join (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
