s (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
* (Token.Operator)
[ (Token.Punctuation)
s (Token.Name)
[ (Token.Punctuation)
q (Token.Name)
] (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
[ (Token.Punctuation)
q (Token.Name)
] (Token.Punctuation)
!= (Token.Operator)
" (Token.Literal.String.Double)
B (Token.Literal.String.Double)
" (Token.Literal.String.Double)
else (Token.Keyword)
chr (Token.Name.Builtin)
( (Token.Punctuation)
0x08 (Token.Literal.Number.Hex)
) (Token.Punctuation)
for (Token.Keyword)
q (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
, (Token.Punctuation)
sep (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
