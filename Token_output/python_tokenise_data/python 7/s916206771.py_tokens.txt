nl (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
sl (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
n (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
s (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
res (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
for (Token.Keyword)
c (Token.Name)
in (Token.Operator.Word)
S (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
c (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
res (Token.Name)
+ (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
elif (Token.Keyword)
c (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
res (Token.Name)
+ (Token.Operator)
= (Token.Operator)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
elif (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
res (Token.Name)
) (Token.Punctuation)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
res (Token.Name)
= (Token.Operator)
res (Token.Name)
[ (Token.Punctuation)
: (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
res (Token.Name)
) (Token.Punctuation)
