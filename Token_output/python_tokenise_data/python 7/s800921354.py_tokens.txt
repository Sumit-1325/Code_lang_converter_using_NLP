# /usr/bin/python3 (Token.Comment.Single)
# -*- coding: utf-8 -*- (Token.Comment.Single)
from (Token.Keyword.Namespace)
queue (Token.Name.Namespace)
import (Token.Keyword.Namespace)
Queue (Token.Name)
from (Token.Keyword.Namespace)
queue (Token.Name.Namespace)
import (Token.Keyword.Namespace)
LifoQueue (Token.Name)
as (Token.Keyword)
Stack (Token.Name)
from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
sqrt (Token.Name)
, (Token.Punctuation)
floor (Token.Name)
, (Token.Punctuation)
ceil (Token.Name)
, (Token.Punctuation)
log2 (Token.Name)
from (Token.Keyword.Namespace)
fractions (Token.Name.Namespace)
import (Token.Keyword.Namespace)
gcd (Token.Name)
from (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
permutations (Token.Name)
, (Token.Punctuation)
combinations (Token.Name)
from (Token.Keyword.Namespace)
operator (Token.Name.Namespace)
import (Token.Keyword.Namespace)
itemgetter (Token.Name)
from (Token.Keyword.Namespace)
functools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
cmp_to_key (Token.Name)
__MOD__ (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
) (Token.Punctuation)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
yn (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
YNeos (Token.Literal.String.Single)
' (Token.Literal.String.Single)
judge (Token.Name)
= (Token.Operator)
False (Token.Keyword.Constant)
cnt (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
ans (Token.Name)
= (Token.Operator)
None (Token.Keyword.Constant)
def (Token.Keyword)
lcm (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
* (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
/ (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
intinput (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
mulinputs (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
lineinputs (Token.Name.Function)
( (Token.Punctuation)
func (Token.Name)
= (Token.Operator)
intinput (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
datas (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
try (Token.Keyword)
: (Token.Punctuation)
datas (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
func (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
except (Token.Keyword)
EOFError (Token.Name.Exception)
: (Token.Punctuation)
break (Token.Keyword)
return (Token.Keyword)
datas (Token.Name)
class (Token.Keyword)
ModInt (Token.Name.Class)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
def (Token.Keyword)
__init__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
x (Token.Name)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
__add__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
, (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
int (Token.Name.Builtin)
: (Token.Punctuation)
other (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
+ (Token.Operator)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
ModInt (Token.Name)
: (Token.Punctuation)
return (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
+ (Token.Operator)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
raise (Token.Keyword)
Exception (Token.Name.Exception)
( (Token.Punctuation)
" (Token.Literal.String.Double)
Not Int or Not ModInt (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
def (Token.Keyword)
__sub__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
, (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
int (Token.Name.Builtin)
: (Token.Punctuation)
other (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
- (Token.Operator)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
ModInt (Token.Name)
: (Token.Punctuation)
return (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
- (Token.Operator)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
raise (Token.Keyword)
Exception (Token.Name.Exception)
( (Token.Punctuation)
" (Token.Literal.String.Double)
Not Int or Not ModInt (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
def (Token.Keyword)
__mul__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
, (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
int (Token.Name.Builtin)
: (Token.Punctuation)
other (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
* (Token.Operator)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
ModInt (Token.Name)
: (Token.Punctuation)
return (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
* (Token.Operator)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
raise (Token.Keyword)
Exception (Token.Name.Exception)
( (Token.Punctuation)
" (Token.Literal.String.Double)
Not Int or Not ModInt (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
def (Token.Keyword)
__truediv__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
, (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
int (Token.Name.Builtin)
: (Token.Punctuation)
other (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
* (Token.Operator)
other (Token.Name)
. (Token.Operator)
__modinv (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
ModInt (Token.Name)
: (Token.Punctuation)
return (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
* (Token.Operator)
other (Token.Name)
. (Token.Operator)
__modinv (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
% (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
raise (Token.Keyword)
Exception (Token.Name.Exception)
( (Token.Punctuation)
" (Token.Literal.String.Double)
Not Int or Not ModInt (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
def (Token.Keyword)
__pow__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
, (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
int (Token.Name.Builtin)
: (Token.Punctuation)
other (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
pow (Token.Name.Builtin)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
, (Token.Punctuation)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
, (Token.Punctuation)
__MOD__ (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
type (Token.Name.Builtin)
( (Token.Punctuation)
other (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
ModInt (Token.Name)
: (Token.Punctuation)
return (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__class__ (Token.Name.Variable.Magic)
( (Token.Punctuation)
pow (Token.Name.Builtin)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
, (Token.Punctuation)
other (Token.Name)
. (Token.Operator)
__x (Token.Name)
, (Token.Punctuation)
__MOD__ (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
raise (Token.Keyword)
Exception (Token.Name.Exception)
( (Token.Punctuation)
" (Token.Literal.String.Double)
Not Int or Not ModInt (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
def (Token.Keyword)
__modinv (Token.Name.Function)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
, (Token.Punctuation)
m (Token.Name)
= (Token.Operator)
__MOD__ (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
if (Token.Keyword)
a (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
raise (Token.Keyword)
ZeroDivisionError (Token.Name.Exception)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
m (Token.Name)
) (Token.Punctuation)
!= (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
raise (Token.Keyword)
Exception (Token.Name.Exception)
( (Token.Punctuation)
" (Token.Literal.String.Double)
%s (Token.Literal.String.Interpol)
の逆数は求まりません。 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
% (Token.Operator)
a (Token.Name)
) (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
u (Token.Name)
, (Token.Punctuation)
v (Token.Name)
= (Token.Operator)
m (Token.Name)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
while (Token.Keyword)
b (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
t (Token.Name)
= (Token.Operator)
a (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
b (Token.Name)
; (Token.Punctuation)
a (Token.Name)
- (Token.Operator)
= (Token.Operator)
t (Token.Name)
* (Token.Operator)
b (Token.Name)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
b (Token.Name)
, (Token.Punctuation)
a (Token.Name)
u (Token.Name)
- (Token.Operator)
= (Token.Operator)
t (Token.Name)
* (Token.Operator)
v (Token.Name)
u (Token.Name)
, (Token.Punctuation)
v (Token.Name)
= (Token.Operator)
v (Token.Name)
, (Token.Punctuation)
u (Token.Name)
u (Token.Name)
% (Token.Operator)
= (Token.Operator)
m (Token.Name)
if (Token.Keyword)
u (Token.Name)
< (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
u (Token.Name)
+ (Token.Operator)
= (Token.Operator)
m (Token.Name)
return (Token.Keyword)
u (Token.Name)
def (Token.Keyword)
__int__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__x (Token.Name)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
stk (Token.Name)
= (Token.Operator)
Stack (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
# ret, i = '', 0 (Token.Comment.Single)
# while i < len(S): (Token.Comment.Single)
#     if S[i] == 'B': (Token.Comment.Single)
#         if i <= 1: (Token.Comment.Single)
#             ret = '' (Token.Comment.Single)
#         else: (Token.Comment.Single)
#             ret = ret[:i-1] + ret[i+1:] (Token.Comment.Single)
#     else: (Token.Comment.Single)
#         ret += S[i] (Token.Comment.Single)
#     i += 1 (Token.Comment.Single)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
S (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
== (Token.Operator)
' (Token.Literal.String.Single)
B (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
if (Token.Keyword)
stk (Token.Name)
. (Token.Operator)
empty (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
pass (Token.Keyword)
else (Token.Keyword)
: (Token.Punctuation)
stk (Token.Name)
. (Token.Operator)
get (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
stk (Token.Name)
. (Token.Operator)
put (Token.Name)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
ret (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
while (Token.Keyword)
not (Token.Operator.Word)
stk (Token.Name)
. (Token.Operator)
empty (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
ret (Token.Name)
+ (Token.Operator)
= (Token.Operator)
stk (Token.Name)
. (Token.Operator)
get (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
# 出力 (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
ret (Token.Name)
[ (Token.Punctuation)
: (Token.Punctuation)
: (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
# EOF (Token.Comment.Single)
