N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
_ (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
B (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
A (Token.Name)
. (Token.Operator)
sort (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
d (Token.Name)
= (Token.Operator)
{ (Token.Punctuation)
} (Token.Punctuation)
for (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
A (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
d (Token.Name)
: (Token.Punctuation)
d (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
d (Token.Name)
[ (Token.Punctuation)
a (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
ans1 (Token.Name)
= (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
if (Token.Keyword)
d (Token.Name)
[ (Token.Punctuation)
ans1 (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
: (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
b (Token.Name)
in (Token.Operator.Word)
B (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
b (Token.Name)
== (Token.Operator)
ans1 (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans2 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans1 (Token.Name)
) (Token.Punctuation)
