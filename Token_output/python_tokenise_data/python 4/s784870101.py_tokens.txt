N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A_list (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A_list (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
sort_A (Token.Name)
= (Token.Operator)
sorted (Token.Name.Builtin)
( (Token.Punctuation)
A_list (Token.Name)
, (Token.Punctuation)
reverse (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
) (Token.Punctuation)
k (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
sort_A (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
sort_A (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
!= (Token.Operator)
sort_A (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
A_second (Token.Name)
= (Token.Operator)
sort_A (Token.Name)
[ (Token.Punctuation)
k (Token.Name)
] (Token.Punctuation)
break (Token.Keyword)
if (Token.Keyword)
i (Token.Name)
== (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
sort_A (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
A_second (Token.Name)
= (Token.Operator)
sort_A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
A_list (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
== (Token.Operator)
sort_A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
A_second (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
sort_A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
