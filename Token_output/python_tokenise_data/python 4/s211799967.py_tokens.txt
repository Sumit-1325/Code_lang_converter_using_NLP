import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
input (Token.Name.Builtin)
= (Token.Operator)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
max1 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
max2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
maxindex (Token.Name)
= (Token.Operator)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
> (Token.Operator)
= (Token.Operator)
max1 (Token.Name)
: (Token.Punctuation)
max2 (Token.Name)
= (Token.Operator)
max1 (Token.Name)
max1 (Token.Name)
= (Token.Operator)
a (Token.Name)
maxindex (Token.Name)
= (Token.Operator)
i (Token.Name)
elif (Token.Keyword)
a (Token.Name)
> (Token.Operator)
= (Token.Operator)
max2 (Token.Name)
: (Token.Punctuation)
max2 (Token.Name)
= (Token.Operator)
a (Token.Name)
out (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
max1 (Token.Name)
] (Token.Punctuation)
* (Token.Operator)
n (Token.Name)
out (Token.Name)
[ (Token.Punctuation)
maxindex (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
max2 (Token.Name)
for (Token.Keyword)
m (Token.Name)
in (Token.Operator.Word)
out (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m (Token.Name)
) (Token.Punctuation)
