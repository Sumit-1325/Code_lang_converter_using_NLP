def (Token.Keyword)
submit (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
# read input (Token.Comment.Single)
n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
first (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
second (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
alist (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
alist (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
alist (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
> (Token.Operator)
first (Token.Name)
: (Token.Punctuation)
second (Token.Name)
= (Token.Operator)
first (Token.Name)
first (Token.Name)
= (Token.Operator)
alist (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
elif (Token.Keyword)
alist (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
> (Token.Operator)
second (Token.Name)
: (Token.Punctuation)
second (Token.Name)
= (Token.Operator)
alist (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
alist (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
== (Token.Operator)
first (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
second (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
first (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
submit (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
