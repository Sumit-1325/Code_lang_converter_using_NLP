N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
n (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
A (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
forward (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
n (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
forward (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
backward (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
n (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
backward (Token.Name)
[ (Token.Punctuation)
N (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
N (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
n (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
forward (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
forward (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
n (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
[ (Token.Punctuation)
: (Token.Punctuation)
: (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
backward (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
backward (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
# print(forward) (Token.Comment.Single)
# print(backward) (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
backward (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
n (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
N (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
# print("====") (Token.Comment.Single)
# print(forward[n-1],backward[n+1]) (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
forward (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
backward (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
forward (Token.Name)
[ (Token.Punctuation)
N (Token.Name)
- (Token.Operator)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
