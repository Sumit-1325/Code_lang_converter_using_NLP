# coding: utf-8 (Token.Comment.Single)
# Your code here! (Token.Comment.Single)
n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
sa (Token.Name)
= (Token.Operator)
sorted (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
ma (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
ma_2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
n_ma (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
target (Token.Name)
= (Token.Operator)
sa (Token.Name)
[ (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
- (Token.Operator)
i (Token.Name)
] (Token.Punctuation)
if (Token.Keyword)
target (Token.Name)
== (Token.Operator)
ma (Token.Name)
: (Token.Punctuation)
n_ma (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
ma_2 (Token.Name)
= (Token.Operator)
target (Token.Name)
break (Token.Keyword)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
a (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
== (Token.Operator)
ma (Token.Name)
and (Token.Operator.Word)
n_ma (Token.Name)
> (Token.Operator)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
ma (Token.Name)
) (Token.Punctuation)
elif (Token.Keyword)
i (Token.Name)
== (Token.Operator)
ma (Token.Name)
and (Token.Operator.Word)
n_ma (Token.Name)
== (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
ma_2 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
ma (Token.Name)
) (Token.Punctuation)
