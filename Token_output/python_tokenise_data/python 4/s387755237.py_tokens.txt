import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
, (Token.Operator)
re (Token.Name.Namespace)
, (Token.Operator)
os (Token.Name.Namespace)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deque (Token.Name)
, (Token.Punctuation)
defaultdict (Token.Name)
, (Token.Punctuation)
Counter (Token.Name)
from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
ceil (Token.Name)
, (Token.Punctuation)
sqrt (Token.Name)
, (Token.Punctuation)
hypot (Token.Name)
, (Token.Punctuation)
factorial (Token.Name)
, (Token.Punctuation)
pi (Token.Name)
, (Token.Punctuation)
sin (Token.Name)
, (Token.Punctuation)
cos (Token.Name)
, (Token.Punctuation)
radians (Token.Name)
from (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
permutations (Token.Name)
, (Token.Punctuation)
combinations (Token.Name)
, (Token.Punctuation)
product (Token.Name)
, (Token.Punctuation)
accumulate (Token.Name)
from (Token.Keyword.Namespace)
operator (Token.Name.Namespace)
import (Token.Keyword.Namespace)
itemgetter (Token.Name)
, (Token.Punctuation)
mul (Token.Name)
from (Token.Keyword.Namespace)
copy (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deepcopy (Token.Name)
from (Token.Keyword.Namespace)
string (Token.Name.Namespace)
import (Token.Keyword.Namespace)
ascii_lowercase (Token.Name)
, (Token.Punctuation)
ascii_uppercase (Token.Name)
, (Token.Punctuation)
digits (Token.Name)
from (Token.Keyword.Namespace)
fractions (Token.Name.Namespace)
import (Token.Keyword.Namespace)
gcd (Token.Name)
def (Token.Keyword)
input (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
INT (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
MAP (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
S_MAP (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
LIST (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
S_LIST (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
) (Token.Punctuation)
INF (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
inf (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
mod (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
n (Token.Name)
= (Token.Operator)
INT (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
# a = [INT() for i in range(n)] (Token.Comment.Single)
a (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
INT (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
l (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
# print(a) (Token.Comment.Single)
b (Token.Name)
= (Token.Operator)
sorted (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
reverse (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
) (Token.Punctuation)
# print(a) (Token.Comment.Single)
m1 (Token.Name)
= (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
m2 (Token.Name)
= (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
!= (Token.Operator)
m1 (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m1 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m2 (Token.Name)
) (Token.Punctuation)
# # for i in range(n): (Token.Comment.Single)
#     l = [] (Token.Comment.Single)
#     for j in range(n): (Token.Comment.Single)
#         if i != j: (Token.Comment.Single)
#             l.append(a[j]) (Token.Comment.Single)
#     print(max(l)) (Token.Comment.Single)
#         # print(l) (Token.Comment.Single)
#         # print(max(l)) (Token.Comment.Single)
#     # print(a[0:i], a[i:n]) (Token.Comment.Single)
#     # print(ans) (Token.Comment.Single)
#  (Token.Comment.Single)
