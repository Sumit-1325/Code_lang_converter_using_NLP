def (Token.Keyword)
calc (Token.Name.Function)
( (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
Amax (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
A (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
> (Token.Operator)
Amax (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
Amax (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
Amax (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
Amax (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
a (Token.Name)
elif (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
> (Token.Operator)
Amax (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
Amax (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
a (Token.Name)
result (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
for (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
A (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
== (Token.Operator)
Amax (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
result (Token.Name)
+ (Token.Operator)
= (Token.Operator)
str (Token.Name.Builtin)
( (Token.Punctuation)
Amax (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
' (Token.Literal.String.Single)
\n (Token.Literal.String.Escape)
' (Token.Literal.String.Single)
else (Token.Keyword)
: (Token.Punctuation)
result (Token.Name)
+ (Token.Operator)
= (Token.Operator)
str (Token.Name.Builtin)
( (Token.Punctuation)
Amax (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
' (Token.Literal.String.Single)
\n (Token.Literal.String.Escape)
' (Token.Literal.String.Single)
return (Token.Keyword)
result (Token.Name)
N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
_ (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
calc (Token.Name)
( (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
