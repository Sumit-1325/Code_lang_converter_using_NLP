from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
sqrt (Token.Name)
def (Token.Keyword)
solve (Token.Name.Function)
( (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
D (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
sqrt (Token.Name)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
M (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
D (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
M (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
: (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
D (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
M (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
d (Token.Name)
= (Token.Operator)
i (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
D (Token.Name)
l (Token.Name)
= (Token.Operator)
d (Token.Name)
* (Token.Operator)
D (Token.Name)
m (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
j (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
, (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
+ (Token.Operator)
D (Token.Name)
, (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
!= (Token.Operator)
j (Token.Name)
and (Token.Operator.Word)
A (Token.Name)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
m (Token.Name)
: (Token.Punctuation)
m (Token.Name)
= (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
j (Token.Name)
] (Token.Punctuation)
m0 (Token.Name)
= (Token.Operator)
m (Token.Name)
if (Token.Keyword)
d (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
m (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
m (Token.Name)
, (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
M (Token.Name)
[ (Token.Punctuation)
d (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
d (Token.Name)
> (Token.Operator)
= (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
M (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
m (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
m (Token.Name)
, (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
M (Token.Name)
[ (Token.Punctuation)
: (Token.Punctuation)
d (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
pass (Token.Keyword)
else (Token.Keyword)
: (Token.Punctuation)
#print(d, len(M)) (Token.Comment.Single)
#print("M[:d]", M[:d]) (Token.Comment.Single)
#print("M[d+1:]", M[d+1:]) (Token.Comment.Single)
m (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
m (Token.Name)
, (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
M (Token.Name)
[ (Token.Punctuation)
: (Token.Punctuation)
d (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
M (Token.Name)
[ (Token.Punctuation)
d (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m (Token.Name)
) (Token.Punctuation)
#print("d=%d,"%d, m, max(A[:i]+A[i+1:])) (Token.Comment.Single)
#assert m == max(A[:i]+A[i+1:]) (Token.Comment.Single)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
_ (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
solve (Token.Name)
( (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
#l = list(range(1, 200)) (Token.Comment.Single)
#solve(len(l), l) (Token.Comment.Single)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
