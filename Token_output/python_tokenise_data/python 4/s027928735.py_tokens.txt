# -*- coding: utf-8 -*- (Token.Comment.Single)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
os (Token.Name.Namespace)
import (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
_collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
string (Token.Name.Namespace)
from (Token.Keyword.Namespace)
functools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
lru_cache (Token.Name)
class (Token.Keyword)
cin (Token.Name.Class)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
def (Token.Keyword)
int (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
rstrip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
string (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
rstrip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
mapInt (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
cin (Token.Name)
. (Token.Operator)
string (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
stringList (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
intListList (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
cin (Token.Name)
. (Token.Operator)
mapInt (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
intColsList (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
class (Token.Keyword)
Math (Token.Name.Class)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
b (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
a (Token.Name)
return (Token.Keyword)
Math (Token.Name)
. (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
a (Token.Name)
% (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
lcm (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
* (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
/ (Token.Operator)
Math (Token.Name)
. (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
roundUp (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
- (Token.Operator)
( (Token.Punctuation)
- (Token.Operator)
a (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
toUpperMultiple (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
Math (Token.Name)
. (Token.Operator)
roundUp (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
x (Token.Name)
def (Token.Keyword)
toLowerMultiple (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
x (Token.Name)
def (Token.Keyword)
nearPow2 (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
n (Token.Name)
< (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
n (Token.Name)
& (Token.Operator)
( (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
n (Token.Name)
ret (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
while (Token.Keyword)
( (Token.Punctuation)
n (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
ret (Token.Name)
<< (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
n (Token.Name)
>> (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
return (Token.Keyword)
ret (Token.Name)
MOD (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
1e09 (Token.Literal.Number.Float)
) (Token.Punctuation)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
N (Token.Name)
= (Token.Operator)
cin (Token.Name)
. (Token.Operator)
int (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
cin (Token.Name)
. (Token.Operator)
intColsList (Token.Name)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
m1 (Token.Name)
, (Token.Punctuation)
m2 (Token.Name)
= (Token.Operator)
sorted (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
, (Token.Punctuation)
reverse (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
) (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
sorted (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
, (Token.Punctuation)
reverse (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
) (Token.Punctuation)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
A (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
== (Token.Operator)
m1 (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m2 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m1 (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
