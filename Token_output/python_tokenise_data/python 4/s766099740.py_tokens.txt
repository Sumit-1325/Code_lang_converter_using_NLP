import (Token.Keyword.Namespace)
numpy (Token.Name.Namespace)
as (Token.Keyword)
np (Token.Name.Namespace)
N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
A (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
max1 (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
np (Token.Name)
. (Token.Operator)
array (Token.Name)
( (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
index (Token.Name)
= (Token.Operator)
a (Token.Name)
. (Token.Operator)
argsort (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
[ (Token.Punctuation)
N (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
N (Token.Name)
] (Token.Punctuation)
A2 (Token.Name)
= (Token.Operator)
sorted (Token.Name.Builtin)
( (Token.Punctuation)
set (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
A2 (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
max2 (Token.Name)
= (Token.Operator)
max1 (Token.Name)
elif (Token.Keyword)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
A2 (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
max2 (Token.Name)
= (Token.Operator)
A2 (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
max2 (Token.Name)
= (Token.Operator)
A2 (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
i (Token.Name)
== (Token.Operator)
index (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max2 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max1 (Token.Name)
) (Token.Punctuation)
