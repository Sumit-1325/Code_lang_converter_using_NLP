def (Token.Keyword)
inpl (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
A (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
ma (Token.Name)
= (Token.Operator)
N (Token.Name)
na (Token.Name)
= (Token.Operator)
N (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
A (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
ma (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
na (Token.Name)
= (Token.Operator)
ma (Token.Name)
ma (Token.Name)
= (Token.Operator)
i (Token.Name)
elif (Token.Keyword)
A (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
> (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
na (Token.Name)
] (Token.Punctuation)
: (Token.Punctuation)
na (Token.Name)
= (Token.Operator)
i (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
== (Token.Operator)
ma (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
na (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
ma (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
