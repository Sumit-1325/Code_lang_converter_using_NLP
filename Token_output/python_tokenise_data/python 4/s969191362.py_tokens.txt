N (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
arg (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
* (Token.Operator)
N (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
N (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
arg (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
x (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
x (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
others (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
j (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
N (Token.Name)
, (Token.Punctuation)
i (Token.Name)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
j (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
others (Token.Name)
+ (Token.Operator)
= (Token.Operator)
arg (Token.Name)
[ (Token.Punctuation)
j (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
if (Token.Keyword)
arg (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
!= (Token.Operator)
others (Token.Name)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
: (Token.Punctuation)
x (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
x (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
ans (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
max (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
for (Token.Keyword)
index (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
[ (Token.Punctuation)
index (Token.Name)
] (Token.Punctuation)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
index (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
* (Token.Operator)
ans (Token.Name)
) (Token.Punctuation)
