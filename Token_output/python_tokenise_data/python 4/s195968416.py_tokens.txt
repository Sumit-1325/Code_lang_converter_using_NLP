#C (Token.Comment.Single)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
Counter (Token.Name)
n (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
* (Token.Operator)
n (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
a (Token.Name)
. (Token.Operator)
copy (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
b (Token.Name)
. (Token.Operator)
sort (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
b (Token.Name)
. (Token.Operator)
reverse (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
fi (Token.Name)
= (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
se (Token.Name)
= (Token.Operator)
b (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
a (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
i (Token.Name)
== (Token.Operator)
fi (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
se (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
fi (Token.Name)
) (Token.Punctuation)
