#!/usr/bin/env python (Token.Comment.Hashbang)
# coding: utf-8 (Token.Comment.Single)
def (Token.Keyword)
ri (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
rl (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
rli (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
n (Token.Name)
= (Token.Operator)
ri (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
m1 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
m2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
la (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
ri (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
m1 (Token.Name)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
: (Token.Punctuation)
m2 (Token.Name)
= (Token.Operator)
m1 (Token.Name)
m1 (Token.Name)
= (Token.Operator)
a (Token.Name)
elif (Token.Keyword)
m2 (Token.Name)
< (Token.Operator)
a (Token.Name)
: (Token.Punctuation)
m2 (Token.Name)
= (Token.Operator)
a (Token.Name)
la (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
la (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
== (Token.Operator)
m1 (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m2 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
m1 (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
