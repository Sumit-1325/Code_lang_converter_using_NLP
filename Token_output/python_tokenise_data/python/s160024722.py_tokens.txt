lst (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
200 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
try (Token.Keyword)
: (Token.Punctuation)
lst (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
except (Token.Keyword)
EOFError (Token.Name.Exception)
: (Token.Punctuation)
break (Token.Keyword)
print (Token.Name.Builtin)
( (Token.Punctuation)
* (Token.Operator)
[ (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
sum (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
num (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
num (Token.Name)
in (Token.Operator.Word)
string (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
string (Token.Name)
in (Token.Operator.Word)
lst (Token.Name)
] (Token.Punctuation)
, (Token.Punctuation)
sep (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
\n (Token.Literal.String.Escape)
' (Token.Literal.String.Single)
) (Token.Punctuation)
