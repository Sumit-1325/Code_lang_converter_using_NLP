import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
values (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
line (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
: (Token.Punctuation)
values (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
line (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
digit (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
in (Token.Operator.Word)
values (Token.Name)
: (Token.Punctuation)
sum (Token.Name.Builtin)
= (Token.Operator)
x (Token.Name)
+ (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
digit (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
while (Token.Keyword)
sum (Token.Name.Builtin)
> (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
sum (Token.Name.Builtin)
/ (Token.Operator)
/ (Token.Operator)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
digit (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
digit (Token.Name)
) (Token.Punctuation)
