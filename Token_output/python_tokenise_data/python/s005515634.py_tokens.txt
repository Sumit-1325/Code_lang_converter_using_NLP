while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
try (Token.Keyword)
: (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
except (Token.Keyword)
EOFError (Token.Name.Exception)
: (Token.Punctuation)
break (Token.Keyword)
count (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
k (Token.Name)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
while (Token.Keyword)
k (Token.Name)
> (Token.Operator)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
: (Token.Punctuation)
k (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
count (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
count (Token.Name)
) (Token.Punctuation)
