while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
inl (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
inl (Token.Name)
== (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
: (Token.Punctuation)
break (Token.Keyword)
num (Token.Name)
= (Token.Operator)
inl (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
+ (Token.Operator)
inl (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
num (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
time (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
a (Token.Name)
: (Token.Punctuation)
time (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
time (Token.Name)
