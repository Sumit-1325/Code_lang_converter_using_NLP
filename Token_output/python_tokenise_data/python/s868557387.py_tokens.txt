if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
200 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
break (Token.Keyword)
absum (Token.Name)
= (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
+ (Token.Operator)
a (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
count (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
while (Token.Keyword)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
if (Token.Keyword)
absum (Token.Name)
< (Token.Operator)
10 (Token.Literal.Number.Integer)
: (Token.Punctuation)
break (Token.Keyword)
absum (Token.Name)
= (Token.Operator)
absum (Token.Name)
/ (Token.Operator)
10 (Token.Literal.Number.Integer)
count (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
count (Token.Name)
) (Token.Punctuation)
