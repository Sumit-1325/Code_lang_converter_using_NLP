import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
def (Token.Keyword)
plus_and_check (Token.Name.Function)
( (Token.Punctuation)
list (Token.Name.Builtin)
) (Token.Punctuation)
: (Token.Punctuation)
sum_up (Token.Name)
= (Token.Operator)
sum (Token.Name.Builtin)
( (Token.Punctuation)
list (Token.Name.Builtin)
) (Token.Punctuation)
return (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
sum_up (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
line (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
: (Token.Punctuation)
a (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
answer (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
answer (Token.Name)
= (Token.Operator)
plus_and_check (Token.Name)
( (Token.Punctuation)
a (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
answer (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
answer (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
