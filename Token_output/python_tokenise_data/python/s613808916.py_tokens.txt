import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
def (Token.Keyword)
solve (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
line (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
: (Token.Punctuation)
digit_list (Token.Name)
= (Token.Operator)
line (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
new_list (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
digit_list (Token.Name)
: (Token.Punctuation)
new_list (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
new_list (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
j (Token.Name)
in (Token.Operator.Word)
a (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
str (Token.Name.Builtin)
( (Token.Punctuation)
sum (Token.Name.Builtin)
( (Token.Punctuation)
j (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
' (Token.Literal.String.Single)
\n (Token.Literal.String.Escape)
' (Token.Literal.String.Single)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
solve (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
