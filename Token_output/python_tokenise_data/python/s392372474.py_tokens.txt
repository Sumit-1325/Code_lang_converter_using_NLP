def (Token.Keyword)
solve (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
try (Token.Keyword)
: (Token.Punctuation)
solve (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
except (Token.Keyword)
: (Token.Punctuation)
break (Token.Keyword)
