flag (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
i (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
inNums (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
while (Token.Keyword)
flag (Token.Name)
: (Token.Punctuation)
inNums (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
inNums (Token.Name)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
: (Token.Punctuation)
flag (Token.Name)
= (Token.Operator)
False (Token.Keyword.Constant)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
inNums (Token.Name)
) (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
inNums (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
inNums (Token.Name)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
temp (Token.Name)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
x (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
while (Token.Keyword)
temp (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
x (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
