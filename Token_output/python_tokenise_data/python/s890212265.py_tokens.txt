# coding: utf-8 (Token.Comment.Single)
import (Token.Keyword.Namespace)
fileinput (Token.Name.Namespace)
import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
reslt (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
line (Token.Name)
in (Token.Operator.Word)
fileinput (Token.Name)
. (Token.Operator)
input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
tokens (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
line (Token.Name)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
wa (Token.Name)
= (Token.Operator)
tokens (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
tokens (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
keta (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
math (Token.Name)
. (Token.Operator)
log10 (Token.Name)
( (Token.Punctuation)
wa (Token.Name)
) (Token.Punctuation)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
result (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
keta (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
result (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
[ (Token.Punctuation)
i (Token.Name)
] (Token.Punctuation)
