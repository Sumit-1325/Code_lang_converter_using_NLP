# -*- coding: utf-8 -*- (Token.Comment.Single)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
os (Token.Name.Namespace)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
: (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
s (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
c (Token.Name)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
if (Token.Keyword)
c (Token.Name)
== (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
continue (Token.Keyword)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
7 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
left (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
i (Token.Name)
right (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
( (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
if (Token.Keyword)
left (Token.Name)
< (Token.Operator)
= (Token.Operator)
c (Token.Name)
< (Token.Operator)
right (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
break (Token.Keyword)
