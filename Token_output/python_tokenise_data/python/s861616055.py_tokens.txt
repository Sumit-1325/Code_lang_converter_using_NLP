import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
try (Token.Keyword)
: (Token.Punctuation)
data (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
sum (Token.Name.Builtin)
= (Token.Operator)
data (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
+ (Token.Operator)
data (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
sum_size (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
math (Token.Name)
. (Token.Operator)
log10 (Token.Name)
( (Token.Punctuation)
sum (Token.Name.Builtin)
) (Token.Punctuation)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
sum_size (Token.Name)
) (Token.Punctuation)
except (Token.Keyword)
: (Token.Punctuation)
break (Token.Keyword)
; (Token.Punctuation)
