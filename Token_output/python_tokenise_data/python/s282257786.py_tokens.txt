from (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
stdin (Token.Name)
for (Token.Keyword)
a (Token.Name)
in (Token.Operator.Word)
stdin (Token.Name)
: (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
a (Token.Name)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
sum (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
b (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
c (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
while (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
b (Token.Name)
/ (Token.Operator)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
b (Token.Name)
/ (Token.Operator)
10 (Token.Literal.Number.Integer)
) (Token.Punctuation)
c (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
c (Token.Name)
) (Token.Punctuation)
