def (Token.Keyword)
counts (Token.Name.Function)
( (Token.Punctuation)
num (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
countlist (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
num (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
+ (Token.Operator)
num (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
countlist (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
flag (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
while (Token.Keyword)
flag (Token.Name)
: (Token.Punctuation)
try (Token.Keyword)
: (Token.Punctuation)
counts (Token.Name)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
except (Token.Keyword)
: (Token.Punctuation)
flag (Token.Name)
= (Token.Operator)
False (Token.Keyword.Constant)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
countlist (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
x (Token.Name)
