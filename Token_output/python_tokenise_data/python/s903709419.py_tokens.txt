list (Token.Name.Builtin)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
break (Token.Keyword)
list (Token.Name.Builtin)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
list_sum_N (Token.Name.Function)
( (Token.Punctuation)
list (Token.Name.Builtin)
, (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
not (Token.Operator.Word)
list (Token.Name.Builtin)
== (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
: (Token.Punctuation)
l (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
list (Token.Name.Builtin)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
list (Token.Name.Builtin)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
list (Token.Name.Builtin)
. (Token.Operator)
reverse (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
list (Token.Name.Builtin)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
list (Token.Name.Builtin)
. (Token.Operator)
reverse (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
return (Token.Keyword)
list_sum_N (Token.Name)
( (Token.Punctuation)
list (Token.Name.Builtin)
, (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
return (Token.Keyword)
l (Token.Name)
def (Token.Keyword)
Num_length (Token.Name.Function)
( (Token.Punctuation)
num (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
while (Token.Keyword)
num (Token.Name)
/ (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
x (Token.Name)
> (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
x (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
return (Token.Keyword)
x (Token.Name)
def (Token.Keyword)
NumPlusNum_length (Token.Name.Function)
( (Token.Punctuation)
list (Token.Name.Builtin)
) (Token.Punctuation)
: (Token.Punctuation)
returnList (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
lists (Token.Name)
in (Token.Operator.Word)
list_sum_N (Token.Name)
( (Token.Punctuation)
list (Token.Name.Builtin)
, (Token.Punctuation)
[ (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
returnList (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
Num_length (Token.Name)
( (Token.Punctuation)
lists (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
return (Token.Keyword)
returnList (Token.Name)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
NumPlusNum_length (Token.Name)
( (Token.Punctuation)
list (Token.Name.Builtin)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
x (Token.Name)
