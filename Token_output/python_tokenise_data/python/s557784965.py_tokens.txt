# -*- utf-8 -*- (Token.Comment.Single)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
inp (Token.Name)
= (Token.Operator)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
inp (Token.Name)
== (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
break (Token.Keyword)
i (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
inp (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
i (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
i (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
ans (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
while (Token.Keyword)
s (Token.Name)
> (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
s (Token.Name)
/ (Token.Operator)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
ans (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
ans (Token.Name)
