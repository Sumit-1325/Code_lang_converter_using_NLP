try (Token.Keyword)
: (Token.Punctuation)
data (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
data (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
except (Token.Keyword)
EOFError (Token.Name.Exception)
: (Token.Punctuation)
pass (Token.Keyword)
ans (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
data (Token.Name)
: (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
i (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
100000 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
< (Token.Operator)
= (Token.Operator)
1000000 (Token.Literal.Number.Integer)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
6 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
10000 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
5 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
1000 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
4 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
100 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
3 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
10 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
ans (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
i (Token.Name)
