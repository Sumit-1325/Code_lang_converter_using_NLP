w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
x1 (Token.Name)
= (Token.Operator)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
y1 (Token.Name)
= (Token.Operator)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
s (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
s1 (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
1 (Token.Literal.Number.Integer)
s2 (Token.Name)
= (Token.Operator)
x1 (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
1 (Token.Literal.Number.Integer)
s3 (Token.Name)
= (Token.Operator)
y (Token.Name)
* (Token.Operator)
w (Token.Name)
/ (Token.Operator)
1 (Token.Literal.Number.Integer)
s4 (Token.Name)
= (Token.Operator)
y1 (Token.Name)
* (Token.Operator)
w (Token.Name)
/ (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
s (Token.Name)
== (Token.Operator)
s1 (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
s1 (Token.Name)
elif (Token.Keyword)
s (Token.Name)
== (Token.Operator)
s2 (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
s2 (Token.Name)
elif (Token.Keyword)
s (Token.Name)
== (Token.Operator)
s3 (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
s3 (Token.Name)
elif (Token.Keyword)
s (Token.Name)
== (Token.Operator)
s4 (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
s4 (Token.Name)
cnt (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
s1 (Token.Name)
== (Token.Operator)
ans (Token.Name)
: (Token.Punctuation)
cnt (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
s2 (Token.Name)
== (Token.Operator)
ans (Token.Name)
: (Token.Punctuation)
cnt (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
s3 (Token.Name)
== (Token.Operator)
ans (Token.Name)
: (Token.Punctuation)
cnt (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
s4 (Token.Name)
== (Token.Operator)
ans (Token.Name)
: (Token.Punctuation)
cnt (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans (Token.Name)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
cnt (Token.Name)
> (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
