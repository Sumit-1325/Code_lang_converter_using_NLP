from (Token.Keyword.Namespace)
fractions (Token.Name.Namespace)
import (Token.Keyword.Namespace)
Fraction (Token.Name)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
Counter (Token.Name)
class (Token.Keyword)
RectangleCutting (Token.Name.Class)
: (Token.Punctuation)
def (Token.Keyword)
__init__ (Token.Name.Function.Magic)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
) (Token.Punctuation)
: (Token.Punctuation)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
W (Token.Name)
= (Token.Operator)
W (Token.Name)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
H (Token.Name)
= (Token.Operator)
H (Token.Name)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
x (Token.Name)
= (Token.Operator)
x (Token.Name)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
y (Token.Name)
= (Token.Operator)
y (Token.Name)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
) (Token.Punctuation)
: (Token.Punctuation)
hs (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
H (Token.Name)
* (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
W (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
s (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
p (Token.Name)
in (Token.Operator.Word)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__on_lines (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
s (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
hs (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
sv (Token.Name)
in (Token.Operator.Word)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
__separate_straight (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
s (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
sv (Token.Name)
) (Token.Punctuation)
c (Token.Name)
= (Token.Operator)
Counter (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
c (Token.Name)
[ (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
> (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
def (Token.Keyword)
__on_lines (Token.Name.Function)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
) (Token.Punctuation)
: (Token.Punctuation)
is_on_line (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
# line0の傾き (Token.Comment.Single)
a0 (Token.Name)
= (Token.Operator)
Fraction (Token.Name)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
H (Token.Name)
, (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
W (Token.Name)
) (Token.Punctuation)
# line1の傾き (Token.Comment.Single)
a1 (Token.Name)
= (Token.Operator)
Fraction (Token.Name)
( (Token.Punctuation)
- (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
H (Token.Name)
, (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
W (Token.Name)
) (Token.Punctuation)
# 線上にある時, 2等分可能 (Token.Comment.Single)
# line0について (Token.Comment.Single)
if (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
y (Token.Name)
== (Token.Operator)
a0 (Token.Name)
* (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
x (Token.Name)
: (Token.Punctuation)
is_on_line (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
# line1について (Token.Comment.Single)
if (Token.Keyword)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
y (Token.Name)
== (Token.Operator)
a1 (Token.Name)
* (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
x (Token.Name)
+ (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
H (Token.Name)
: (Token.Punctuation)
is_on_line (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
return (Token.Keyword)
is_on_line (Token.Name)
def (Token.Keyword)
__separate_straight (Token.Name.Function)
( (Token.Punctuation)
self (Token.Name.Builtin.Pseudo)
) (Token.Punctuation)
: (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
H (Token.Name)
* (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
W (Token.Name)
# 縦横で分割する (Token.Comment.Single)
# 縦 (Token.Comment.Single)
sv (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
x (Token.Name)
* (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
H (Token.Name)
if (Token.Keyword)
sv (Token.Name)
== (Token.Operator)
s (Token.Name)
: (Token.Punctuation)
sv (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
# 横 (Token.Comment.Single)
sh (Token.Name)
= (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
y (Token.Name)
* (Token.Operator)
self (Token.Name.Builtin.Pseudo)
. (Token.Operator)
W (Token.Name)
if (Token.Keyword)
sh (Token.Name)
== (Token.Operator)
s (Token.Name)
: (Token.Punctuation)
sh (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
return (Token.Keyword)
[ (Token.Punctuation)
sv (Token.Name)
, (Token.Punctuation)
sh (Token.Name)
] (Token.Punctuation)
rectangleCutting (Token.Name)
= (Token.Operator)
RectangleCutting (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
rectangleCutting (Token.Name)
. (Token.Operator)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
