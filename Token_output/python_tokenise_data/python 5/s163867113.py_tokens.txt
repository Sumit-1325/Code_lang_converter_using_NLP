if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
Num (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
Result1 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
Result2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
Num (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
Num (Token.Name)
[ (Token.Punctuation)
3 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
Result1 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
Num (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
> (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
3 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
Mem1 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
Num (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
* (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
3 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
Mem1 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
Num (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
Num (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
- (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
3 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
Num (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
> (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
Mem2 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
Num (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
* (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
Mem2 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
Num (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
Num (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
- (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
Mem1 (Token.Name)
> (Token.Operator)
Mem2 (Token.Name)
: (Token.Punctuation)
Result1 (Token.Name)
= (Token.Operator)
Mem1 (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
Result1 (Token.Name)
= (Token.Operator)
Mem2 (Token.Name)
if (Token.Keyword)
Num (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
Num (Token.Name)
[ (Token.Punctuation)
3 (Token.Literal.Number.Integer)
] (Token.Punctuation)
== (Token.Operator)
Num (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
Result1 (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
float (Token.Name.Builtin)
( (Token.Punctuation)
Result1 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
float (Token.Name.Builtin)
( (Token.Punctuation)
Result1 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
