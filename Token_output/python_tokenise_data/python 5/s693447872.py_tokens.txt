def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
== (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
x (Token.Name)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
- (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
s_11 (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
s_12 (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
y (Token.Name)
S1 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
s_11 (Token.Name)
, (Token.Punctuation)
s_12 (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
s_21 (Token.Name)
= (Token.Operator)
h (Token.Name)
* (Token.Operator)
x (Token.Name)
s_22 (Token.Name)
= (Token.Operator)
h (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
S2 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
s_21 (Token.Name)
, (Token.Punctuation)
s_22 (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
S1 (Token.Name)
== (Token.Operator)
S2 (Token.Name)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
S (Token.Name)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
S1 (Token.Name)
, (Token.Punctuation)
S2 (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
S (Token.Name)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
