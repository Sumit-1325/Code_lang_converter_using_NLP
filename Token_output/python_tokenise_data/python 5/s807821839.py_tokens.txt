import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
string (Token.Name.Namespace)
import (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
Counter (Token.Name)
def (Token.Keyword)
readints (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
nCr (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
math (Token.Name)
. (Token.Operator)
factorial (Token.Name)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
/ (Token.Operator)
( (Token.Punctuation)
math (Token.Name)
. (Token.Operator)
factorial (Token.Name)
( (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
r (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
math (Token.Name)
. (Token.Operator)
factorial (Token.Name)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
has_duplicates2 (Token.Name.Function)
( (Token.Punctuation)
seq (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
seen (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
item (Token.Name)
in (Token.Operator.Word)
seq (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
not (Token.Operator.Word)
( (Token.Punctuation)
item (Token.Name)
in (Token.Operator.Word)
seen (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
seen (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
item (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
seq (Token.Name)
) (Token.Punctuation)
!= (Token.Operator)
len (Token.Name.Builtin)
( (Token.Punctuation)
seen (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
divisor (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
divisor (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
n (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
n (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
divisor (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
divisor (Token.Name)
# coordinates (Token.Comment.Single)
dx (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
dy (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
tmp (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
W (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
x (Token.Name)
and (Token.Operator.Word)
H (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
tmp (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
{:f} (Token.Literal.String.Interpol)
' (Token.Literal.String.Single)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
tmp (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
exit (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
{:f} (Token.Literal.String.Interpol)
' (Token.Literal.String.Single)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
H (Token.Name)
* (Token.Operator)
W (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
exit (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
