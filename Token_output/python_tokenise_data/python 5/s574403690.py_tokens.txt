w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
x (Token.Name)
and (Token.Operator.Word)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
h (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{:.6f} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
y (Token.Name)
== (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
x (Token.Name)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
( (Token.Punctuation)
- (Token.Operator)
h (Token.Name)
* (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
x (Token.Name)
+ (Token.Operator)
h (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
h (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{:.6f} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
elif (Token.Keyword)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
x (Token.Name)
or (Token.Operator.Word)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
h (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{:.6f} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
y (Token.Name)
- (Token.Operator)
x (Token.Name)
check1 (Token.Name)
= (Token.Operator)
w (Token.Name)
+ (Token.Operator)
b (Token.Name)
check2 (Token.Name)
= (Token.Operator)
- (Token.Operator)
b (Token.Name)
ans (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
check1 (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
check2 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{:.6f} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
