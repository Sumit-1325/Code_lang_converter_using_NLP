# 2019/06/16 (Token.Comment.Single)
# AtCoder Beginner Contest 130 - C (Token.Comment.Single)
# Input (Token.Comment.Single)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
# Case "|" (Token.Comment.Single)
lsq (Token.Name)
= (Token.Operator)
h (Token.Name)
* (Token.Operator)
x (Token.Name)
rsq (Token.Name)
= (Token.Operator)
h (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
wk1 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
lsq (Token.Name)
, (Token.Punctuation)
rsq (Token.Name)
) (Token.Punctuation)
# Case "-" (Token.Comment.Single)
usq (Token.Name)
= (Token.Operator)
y (Token.Name)
* (Token.Operator)
w (Token.Name)
dsq (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
w (Token.Name)
wk2 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
usq (Token.Name)
, (Token.Punctuation)
dsq (Token.Name)
) (Token.Punctuation)
# Case Equal (Token.Comment.Single)
if (Token.Keyword)
wk1 (Token.Name)
== (Token.Operator)
wk2 (Token.Name)
: (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
ans1 (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
wk1 (Token.Name)
, (Token.Punctuation)
wk2 (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
w (Token.Name)
== (Token.Operator)
x (Token.Name)
and (Token.Operator.Word)
h (Token.Name)
== (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
w (Token.Name)
== (Token.Operator)
x (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
h (Token.Name)
== (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans1 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
ans2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
elif (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
y (Token.Name)
and (Token.Operator.Word)
h (Token.Name)
== (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans1 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
ans2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
# elif (h / y) * x == w or (h / y) * (w - x) == w: (Token.Comment.Single)
#    ans1 = (w * h) / 2 (Token.Comment.Single)
#    ans2 = 0 (Token.Comment.Single)
# Output (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans1 (Token.Name)
, (Token.Punctuation)
ans2 (Token.Name)
) (Token.Punctuation)
