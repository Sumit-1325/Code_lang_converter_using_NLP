#!/usr/bin/env python3 (Token.Comment.Hashbang)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
DEBUG (Token.Name)
= (Token.Operator)
False (Token.Keyword.Constant)
def (Token.Keyword)
solve (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
def (Token.Keyword)
read_int_list (Token.Name.Function)
( (Token.Punctuation)
sep (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
rstrip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
sep (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
read_int (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
dprint (Token.Name.Function)
( (Token.Punctuation)
* (Token.Operator)
args (Token.Name)
, (Token.Punctuation)
* (Token.Operator)
* (Token.Operator)
kwargs (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
DEBUG (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
* (Token.Operator)
args (Token.Name)
, (Token.Punctuation)
* (Token.Operator)
* (Token.Operator)
kwargs (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
read_int_list (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
nr_ans (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
center_point (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
if (Token.Keyword)
abs (Token.Name.Builtin)
( (Token.Punctuation)
center_point (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
1e-9 (Token.Literal.Number.Float)
and (Token.Operator.Word)
abs (Token.Name.Builtin)
( (Token.Punctuation)
center_point (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
1e-9 (Token.Literal.Number.Float)
: (Token.Punctuation)
nr_ans (Token.Name)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
%f (Token.Literal.String.Interpol)
%d (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
% (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
nr_ans (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
