r (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
W (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
r (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
H (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
r (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
r (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
r (Token.Name)
[ (Token.Punctuation)
3 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
ans_1 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
H (Token.Name)
* (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
H (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
ans_2 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
ans_1 (Token.Name)
== (Token.Operator)
ans_2 (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
ans_1 (Token.Name)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
!= (Token.Operator)
H (Token.Name)
/ (Token.Operator)
W (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
ans_1 (Token.Name)
, (Token.Punctuation)
ans_2 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
ans_1 (Token.Name)
, (Token.Punctuation)
ans_2 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
