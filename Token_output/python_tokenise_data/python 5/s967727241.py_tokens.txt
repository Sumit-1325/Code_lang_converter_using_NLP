w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
item (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
item (Token.Name)
in (Token.Operator.Word)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
