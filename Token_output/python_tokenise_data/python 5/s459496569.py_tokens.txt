# -*- coding: utf-8 -*- (Token.Comment.Single)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
area (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
if (Token.Keyword)
x (Token.Name)
< (Token.Operator)
W (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
: (Token.Punctuation)
min1 (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
H (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
min1 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
H (Token.Name)
if (Token.Keyword)
y (Token.Name)
< (Token.Operator)
H (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
: (Token.Punctuation)
min2 (Token.Name)
= (Token.Operator)
y (Token.Name)
* (Token.Operator)
W (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
min2 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
W (Token.Name)
ans1 (Token.Name)
= (Token.Operator)
min1 (Token.Name)
if (Token.Keyword)
min1 (Token.Name)
< (Token.Operator)
min2 (Token.Name)
: (Token.Punctuation)
ans1 (Token.Name)
= (Token.Operator)
min2 (Token.Name)
ans2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
min1 (Token.Name)
== (Token.Operator)
min2 (Token.Name)
: (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans1 (Token.Name)
= (Token.Operator)
area (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
ans2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
or (Token.Operator.Word)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
area (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
ans2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
{:.9f} (Token.Literal.String.Interpol)
{} (Token.Literal.String.Interpol)
' (Token.Literal.String.Single)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
ans1 (Token.Name)
, (Token.Punctuation)
ans2 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
