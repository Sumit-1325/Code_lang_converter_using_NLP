from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
defaultdict (Token.Name)
, (Token.Punctuation)
Counter (Token.Name)
from (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
product (Token.Name)
, (Token.Punctuation)
groupby (Token.Name)
, (Token.Punctuation)
count (Token.Name)
, (Token.Punctuation)
permutations (Token.Name)
, (Token.Punctuation)
combinations (Token.Name)
from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
pi (Token.Name)
, (Token.Punctuation)
sqrt (Token.Name)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deque (Token.Name)
from (Token.Keyword.Namespace)
bisect (Token.Name.Namespace)
import (Token.Keyword.Namespace)
bisect (Token.Name)
, (Token.Punctuation)
bisect_left (Token.Name)
, (Token.Punctuation)
bisect_right (Token.Name)
from (Token.Keyword.Namespace)
string (Token.Name.Namespace)
import (Token.Keyword.Namespace)
ascii_lowercase (Token.Name)
from (Token.Keyword.Namespace)
functools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
lru_cache (Token.Name)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10000 (Token.Literal.Number.Integer)
) (Token.Punctuation)
INF (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
inf (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
YES (Token.Name)
, (Token.Punctuation)
Yes (Token.Name)
, (Token.Punctuation)
yes (Token.Name)
, (Token.Punctuation)
NO (Token.Name)
, (Token.Punctuation)
No (Token.Name)
, (Token.Punctuation)
no (Token.Name)
= (Token.Operator)
" (Token.Literal.String.Double)
YES (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
Yes (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
yes (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
NO (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
No (Token.Literal.String.Double)
" (Token.Literal.String.Double)
, (Token.Punctuation)
" (Token.Literal.String.Double)
no (Token.Literal.String.Double)
" (Token.Literal.String.Double)
dy4 (Token.Name)
, (Token.Punctuation)
dx4 (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
dy8 (Token.Name)
, (Token.Punctuation)
dx8 (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
def (Token.Keyword)
inside (Token.Name.Function)
( (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
W (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
y (Token.Name)
< (Token.Operator)
H (Token.Name)
and (Token.Operator.Word)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
= (Token.Operator)
x (Token.Name)
< (Token.Operator)
W (Token.Name)
def (Token.Keyword)
ceil (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
+ (Token.Operator)
b (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
/ (Token.Operator)
/ (Token.Operator)
b (Token.Name)
# 初項s, 交差dのn個の数列の和 (Token.Comment.Single)
def (Token.Keyword)
sum_of_arithmetic_progression (Token.Name.Function)
( (Token.Punctuation)
s (Token.Name)
, (Token.Punctuation)
d (Token.Name)
, (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
n (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
s (Token.Name)
+ (Token.Operator)
( (Token.Punctuation)
n (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
* (Token.Operator)
d (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
# aとbの最大公約数 (Token.Comment.Single)
def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
b (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
a (Token.Name)
return (Token.Keyword)
gcd (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
a (Token.Name)
% (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
# aとbの最小公倍数 (Token.Comment.Single)
def (Token.Keyword)
lcm (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
g (Token.Name)
= (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
a (Token.Name)
/ (Token.Operator)
g (Token.Name)
* (Token.Operator)
b (Token.Name)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
area (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
/ (Token.Operator)
2.0 (Token.Literal.Number.Float)
ans (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
and (Token.Operator.Word)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
area (Token.Name)
, (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
