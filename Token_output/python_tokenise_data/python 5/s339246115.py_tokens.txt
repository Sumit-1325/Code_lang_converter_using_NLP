W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
< (Token.Operator)
W (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
X (Token.Name)
= (Token.Operator)
x (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
X (Token.Name)
= (Token.Operator)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
if (Token.Keyword)
( (Token.Punctuation)
W (Token.Name)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
== (Token.Operator)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
< (Token.Operator)
H (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
Y (Token.Name)
= (Token.Operator)
y (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
Y (Token.Name)
= (Token.Operator)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
if (Token.Keyword)
( (Token.Punctuation)
H (Token.Name)
% (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
y (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
== (Token.Operator)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans2 (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
( (Token.Punctuation)
X (Token.Name)
* (Token.Operator)
H (Token.Name)
> (Token.Operator)
Y (Token.Name)
* (Token.Operator)
W (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans1 (Token.Name)
= (Token.Operator)
X (Token.Name)
* (Token.Operator)
H (Token.Name)
elif (Token.Keyword)
( (Token.Punctuation)
X (Token.Name)
* (Token.Operator)
H (Token.Name)
== (Token.Operator)
Y (Token.Name)
* (Token.Operator)
W (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans1 (Token.Name)
= (Token.Operator)
X (Token.Name)
* (Token.Operator)
H (Token.Name)
ans2 (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
ans1 (Token.Name)
= (Token.Operator)
Y (Token.Name)
* (Token.Operator)
W (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{:.9f} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
ans1 (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
ans2 (Token.Name)
) (Token.Punctuation)
