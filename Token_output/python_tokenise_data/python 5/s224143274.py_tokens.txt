import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
input (Token.Name.Builtin)
= (Token.Operator)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
min_x (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
min_y (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
areas (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
x (Token.Name)
< (Token.Operator)
W (Token.Name)
: (Token.Punctuation)
area_a (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
min_y (Token.Name)
) (Token.Punctuation)
area_b (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
min_y (Token.Name)
) (Token.Punctuation)
areas (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
area_a (Token.Name)
, (Token.Punctuation)
area_b (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
0 (Token.Literal.Number.Integer)
< (Token.Operator)
y (Token.Name)
< (Token.Operator)
H (Token.Name)
: (Token.Punctuation)
area_a (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
min_x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
y (Token.Name)
area_b (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
min_x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
areas (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
area_a (Token.Name)
, (Token.Punctuation)
area_b (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
areas (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
len (Token.Name.Builtin)
( (Token.Punctuation)
set (Token.Name.Builtin)
( (Token.Punctuation)
areas (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
== (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
