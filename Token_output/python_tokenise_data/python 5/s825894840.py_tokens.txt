W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
W_harf (Token.Name)
= (Token.Operator)
W (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
H_harf (Token.Name)
= (Token.Operator)
H (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
or (Token.Operator.Word)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
elif (Token.Keyword)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
H (Token.Name)
* (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
elif (Token.Keyword)
W_harf (Token.Name)
== (Token.Operator)
x (Token.Name)
and (Token.Operator.Word)
H_harf (Token.Name)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
W_harf (Token.Name)
* (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
H (Token.Name)
a_sub (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
- (Token.Operator)
a (Token.Name)
b (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
y (Token.Name)
b_sub (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
- (Token.Operator)
b (Token.Name)
if (Token.Keyword)
abs (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
- (Token.Operator)
a_sub (Token.Name)
) (Token.Punctuation)
> (Token.Operator)
abs (Token.Name.Builtin)
( (Token.Punctuation)
b (Token.Name)
- (Token.Operator)
b_sub (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
b_sub (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
a_sub (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
" (Token.Literal.String.Double)
 0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
