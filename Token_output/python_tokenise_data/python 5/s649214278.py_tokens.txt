W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
x1 (Token.Name)
, (Token.Punctuation)
x2 (Token.Name)
= (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
y1 (Token.Name)
, (Token.Punctuation)
y2 (Token.Name)
= (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
S (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
flag (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
x1 (Token.Name)
== (Token.Operator)
x2 (Token.Name)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
y1 (Token.Name)
== (Token.Operator)
y2 (Token.Name)
) (Token.Punctuation)
v (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
flag (Token.Name)
else (Token.Keyword)
0 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
{} (Token.Literal.String.Interpol)
{} (Token.Literal.String.Interpol)
' (Token.Literal.String.Single)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
S (Token.Name)
, (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
