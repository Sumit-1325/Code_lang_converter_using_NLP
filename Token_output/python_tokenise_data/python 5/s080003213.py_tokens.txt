w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
s1 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
h (Token.Name)
s2 (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
w (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
s1 (Token.Name)
, (Token.Punctuation)
s2 (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
s1 (Token.Name)
== (Token.Operator)
s2 (Token.Name)
else (Token.Keyword)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
