import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
, (Token.Operator)
math (Token.Name.Namespace)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
defaultdict (Token.Name)
, (Token.Punctuation)
deque (Token.Name)
, (Token.Punctuation)
Counter (Token.Name)
from (Token.Keyword.Namespace)
bisect (Token.Name.Namespace)
import (Token.Keyword.Namespace)
bisect_left (Token.Name)
, (Token.Punctuation)
bisect_right (Token.Name)
from (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
combinations (Token.Name)
, (Token.Punctuation)
permutations (Token.Name)
, (Token.Punctuation)
product (Token.Name)
from (Token.Keyword.Namespace)
heapq (Token.Name.Namespace)
import (Token.Keyword.Namespace)
heappush (Token.Name)
, (Token.Punctuation)
heappop (Token.Name)
from (Token.Keyword.Namespace)
functools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
lru_cache (Token.Name)
input (Token.Name.Builtin)
= (Token.Operator)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
rs (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
ri (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
rl (Token.Name)
= (Token.Operator)
lambda (Token.Keyword)
: (Token.Punctuation)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
mod (Token.Name)
= (Token.Operator)
1000000007 (Token.Literal.Number.Integer)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
1000000 (Token.Literal.Number.Integer)
) (Token.Punctuation)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
rl (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
area (Token.Name)
= (Token.Operator)
H (Token.Name)
* (Token.Operator)
W (Token.Name)
* (Token.Operator)
0.5 (Token.Literal.Number.Float)
flag (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
x (Token.Name)
* (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
W (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
* (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
H (Token.Name)
: (Token.Punctuation)
flag (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
area (Token.Name)
, (Token.Punctuation)
flag (Token.Name)
) (Token.Punctuation)
