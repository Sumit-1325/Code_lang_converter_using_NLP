from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
Counter (Token.Name)
from (Token.Keyword.Namespace)
collections (Token.Name.Namespace)
import (Token.Keyword.Namespace)
deque (Token.Name)
from (Token.Keyword.Namespace)
functools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
reduce (Token.Name)
from (Token.Keyword.Namespace)
pprint (Token.Name.Namespace)
import (Token.Keyword.Namespace)
pprint (Token.Name)
import (Token.Keyword.Namespace)
bisect (Token.Name.Namespace)
import (Token.Keyword.Namespace)
copy (Token.Name.Namespace)
import (Token.Keyword.Namespace)
fractions (Token.Name.Namespace)
import (Token.Keyword.Namespace)
itertools (Token.Name.Namespace)
import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
queue (Token.Name.Namespace)
import (Token.Keyword.Namespace)
random (Token.Name.Namespace)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
time (Token.Name.Namespace)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
7 (Token.Literal.Number.Integer)
) (Token.Punctuation)
INF (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
18 (Token.Literal.Number.Integer)
MOD (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
def (Token.Keyword)
LI (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
LF (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
float (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
LS (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
MI (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
II (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
IS (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
C (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
Counter (Token.Name)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
GCD_LIST (Token.Name.Function)
( (Token.Punctuation)
numbers (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
reduce (Token.Name)
( (Token.Punctuation)
fractions (Token.Name)
. (Token.Operator)
gcd (Token.Name)
, (Token.Punctuation)
numbers (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
LCM_LIST (Token.Name.Function)
( (Token.Punctuation)
numbers (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
reduce (Token.Name)
( (Token.Punctuation)
LCM (Token.Name)
, (Token.Punctuation)
numbers (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
LCM (Token.Name.Function)
( (Token.Punctuation)
m (Token.Name)
, (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
( (Token.Punctuation)
m (Token.Name)
* (Token.Operator)
n (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
fractions (Token.Name)
. (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
m (Token.Name)
, (Token.Punctuation)
n (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
MI (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
halfw (Token.Name)
= (Token.Operator)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
halfh (Token.Name)
= (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
ans (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
halfw (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
halfh (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
ans (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
* (Token.Operator)
ans (Token.Name)
) (Token.Punctuation)
