x_input (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
rstrip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
makey (Token.Name.Function)
( (Token.Punctuation)
x_input (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
x_input (Token.Name)
is_only (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
if (Token.Keyword)
x (Token.Name)
> (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
H (Token.Name)
elif (Token.Keyword)
x (Token.Name)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
W (Token.Name)
> (Token.Operator)
= (Token.Operator)
H (Token.Name)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
x (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
x (Token.Name)
+ (Token.Operator)
H (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
W (Token.Name)
+ (Token.Operator)
y (Token.Name)
if (Token.Keyword)
x (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
if (Token.Keyword)
W (Token.Name)
/ (Token.Operator)
x (Token.Name)
== (Token.Operator)
H (Token.Name)
/ (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
is_only (Token.Name)
= (Token.Operator)
False (Token.Keyword.Constant)
return (Token.Keyword)
S (Token.Name)
, (Token.Punctuation)
is_only (Token.Name)
y (Token.Name)
, (Token.Punctuation)
is_only (Token.Name)
= (Token.Operator)
makey (Token.Name)
( (Token.Punctuation)
x_input (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
is_only (Token.Name)
: (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
z (Token.Name)
) (Token.Punctuation)
