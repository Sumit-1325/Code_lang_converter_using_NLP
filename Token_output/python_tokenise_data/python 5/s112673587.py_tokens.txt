# -*- coding: utf-8 -*- (Token.Comment.Single)
#ABC130C (Token.Comment.Single)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
tmp (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
hoge (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
lambda (Token.Keyword)
a (Token.Name)
: (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
tmp (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
w (Token.Name)
= (Token.Operator)
hoge (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
h (Token.Name)
= (Token.Operator)
hoge (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
hoge (Token.Name)
[ (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
hoge (Token.Name)
[ (Token.Punctuation)
3 (Token.Literal.Number.Integer)
] (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
x (Token.Name)
== (Token.Operator)
w (Token.Name)
) (Token.Punctuation)
and (Token.Operator.Word)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
y (Token.Name)
== (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{} (Token.Literal.String.Interpol)
{} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
, (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
