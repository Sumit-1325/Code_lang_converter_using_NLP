# -*- coding: utf-8 -*- (Token.Comment.Single)
"""
Created on Tue May 12 00:13:44 2020

@author: shinba
""" (Token.Literal.String.Doc)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
w (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
or (Token.Operator.Word)
( (Token.Punctuation)
x (Token.Name)
== (Token.Operator)
w (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
exit (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
== (Token.Operator)
h (Token.Name)
/ (Token.Operator)
w (Token.Name)
or (Token.Operator.Word)
y (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
h (Token.Name)
/ (Token.Operator)
w (Token.Name)
: (Token.Punctuation)
#print(y/x,h/w,y/(w-x)) (Token.Comment.Single)
if (Token.Keyword)
y (Token.Name)
/ (Token.Operator)
x (Token.Name)
== (Token.Operator)
h (Token.Name)
/ (Token.Operator)
w (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
/ (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
h (Token.Name)
/ (Token.Operator)
w (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
( (Token.Punctuation)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
exit (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
a1 (Token.Name)
= (Token.Operator)
h (Token.Name)
* (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
a2 (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
a1 (Token.Name)
== (Token.Operator)
a2 (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
a1 (Token.Name)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
a1 (Token.Name)
, (Token.Punctuation)
a2 (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
