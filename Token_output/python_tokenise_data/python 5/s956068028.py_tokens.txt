w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
l (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
h_i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
h (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
for (Token.Keyword)
w_i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
w (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
# 三角形(0, w, y)の面積 (Token.Comment.Single)
#t_wy = (w_i*y) / 2 (Token.Comment.Single)
# 三角形(0, x, h)の面積 (Token.Comment.Single)
#t_xh = (x*h_i) / 2 (Token.Comment.Single)
# 長方形の面積 (Token.Comment.Single)
s_wy (Token.Name)
= (Token.Operator)
w_i (Token.Name)
* (Token.Operator)
y (Token.Name)
s_xh (Token.Name)
= (Token.Operator)
x (Token.Name)
* (Token.Operator)
h_i (Token.Name)
if (Token.Keyword)
w_i (Token.Name)
< (Token.Operator)
= (Token.Operator)
x (Token.Name)
: (Token.Punctuation)
l (Token.Name)
. (Token.Operator)
extend (Token.Name)
( (Token.Punctuation)
[ (Token.Punctuation)
s_wy (Token.Name)
, (Token.Punctuation)
s_xh (Token.Name)
] (Token.Punctuation)
) (Token.Punctuation)
#print('wの面積', t_wy)  (Token.Comment.Single)
#print('hの面積', t_xh) (Token.Comment.Single)
#print('wの長方形', s_wy)  (Token.Comment.Single)
#print('hの長方形', s_xh) (Token.Comment.Single)
#print('w, h', w_i, h_i) (Token.Comment.Single)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
# maxが複数あるか (Token.Comment.Single)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
i (Token.Name)
for (Token.Keyword)
i (Token.Name)
, (Token.Punctuation)
x (Token.Name)
in (Token.Operator.Word)
enumerate (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
> (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
