W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
horizon (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
vertical (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
H (Token.Name)
* (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
H (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
flag (Token.Name)
= (Token.Operator)
False (Token.Keyword.Constant)
# 直線上に存在すれば三角形の面積 (Token.Comment.Single)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
or (Token.Operator.Word)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
or (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{:.6f} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
( (Token.Punctuation)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
0 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
# 直線上にない時 (Token.Comment.Single)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
{:.6f} (Token.Literal.String.Interpol)
' (Token.Literal.String.Single)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
horizon (Token.Name)
, (Token.Punctuation)
vertical (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
end (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
#if horizon == vertical: (Token.Comment.Single)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
W (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
== (Token.Operator)
H (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
1 (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
