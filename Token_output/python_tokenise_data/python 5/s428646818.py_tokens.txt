w (Token.Name)
, (Token.Punctuation)
h (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
w (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
x (Token.Name)
and (Token.Operator.Word)
h (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
result (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
1 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
else (Token.Keyword)
: (Token.Punctuation)
result (Token.Name)
= (Token.Operator)
' (Token.Literal.String.Single)
0 (Token.Literal.String.Single)
' (Token.Literal.String.Single)
s (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
h (Token.Name)
s1 (Token.Name)
= (Token.Operator)
( (Token.Punctuation)
w (Token.Name)
- (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
h (Token.Name)
if (Token.Keyword)
s (Token.Name)
- (Token.Operator)
s1 (Token.Name)
< (Token.Operator)
s1 (Token.Name)
: (Token.Punctuation)
s1 (Token.Name)
= (Token.Operator)
s (Token.Name)
- (Token.Operator)
s1 (Token.Name)
s2 (Token.Name)
= (Token.Operator)
w (Token.Name)
* (Token.Operator)
( (Token.Punctuation)
h (Token.Name)
- (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
s (Token.Name)
- (Token.Operator)
s2 (Token.Name)
< (Token.Operator)
s2 (Token.Name)
: (Token.Punctuation)
s2 (Token.Name)
= (Token.Operator)
s (Token.Name)
- (Token.Operator)
s2 (Token.Name)
max_s (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
s1 (Token.Name)
< (Token.Operator)
= (Token.Operator)
s2 (Token.Name)
: (Token.Punctuation)
max_s (Token.Name)
= (Token.Operator)
s2 (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
max_s (Token.Name)
= (Token.Operator)
s1 (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
str (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
{0:.9f} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
max_s (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
+ (Token.Operator)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
+ (Token.Operator)
result (Token.Name)
) (Token.Punctuation)
