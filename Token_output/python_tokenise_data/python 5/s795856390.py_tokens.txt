W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
- (Token.Operator)
H (Token.Name)
/ (Token.Operator)
W (Token.Name)
* (Token.Operator)
x (Token.Name)
< (Token.Operator)
1e-6 (Token.Literal.Number.Float)
or (Token.Operator.Word)
y (Token.Name)
- (Token.Operator)
( (Token.Punctuation)
- (Token.Operator)
H (Token.Name)
/ (Token.Operator)
W (Token.Name)
* (Token.Operator)
x (Token.Name)
+ (Token.Operator)
H (Token.Name)
) (Token.Punctuation)
< (Token.Operator)
1e-6 (Token.Literal.Number.Float)
: (Token.Punctuation)
area (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
if (Token.Keyword)
W (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
- (Token.Operator)
x (Token.Name)
< (Token.Operator)
1e-6 (Token.Literal.Number.Float)
and (Token.Operator.Word)
H (Token.Name)
/ (Token.Operator)
2 (Token.Literal.Number.Integer)
- (Token.Operator)
y (Token.Name)
< (Token.Operator)
1e-6 (Token.Literal.Number.Float)
: (Token.Punctuation)
num (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
num (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
# elif (x, y)==(W, 0) or (x, y)==(W, H) or (x, y)==(0, H): (Token.Comment.Single)
#     area = W*H/2 (Token.Comment.Single)
#     num = 0 (Token.Comment.Single)
else (Token.Keyword)
: (Token.Punctuation)
x_u (Token.Name)
= (Token.Operator)
W (Token.Name)
- (Token.Operator)
x (Token.Name)
x_d (Token.Name)
= (Token.Operator)
x (Token.Name)
x_pat (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
x_u (Token.Name)
* (Token.Operator)
H (Token.Name)
, (Token.Punctuation)
x_d (Token.Name)
* (Token.Operator)
H (Token.Name)
] (Token.Punctuation)
y_u (Token.Name)
= (Token.Operator)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
y_d (Token.Name)
= (Token.Operator)
H (Token.Name)
- (Token.Operator)
y (Token.Name)
y_pat (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
y_u (Token.Name)
* (Token.Operator)
W (Token.Name)
, (Token.Punctuation)
y_u (Token.Name)
* (Token.Operator)
W (Token.Name)
] (Token.Punctuation)
if (Token.Keyword)
min (Token.Name.Builtin)
( (Token.Punctuation)
x_pat (Token.Name)
) (Token.Punctuation)
> (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
y_pat (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
area (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
x_pat (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
area (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
y_pat (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
min (Token.Name.Builtin)
( (Token.Punctuation)
x_pat (Token.Name)
) (Token.Punctuation)
== (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
y_pat (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
num (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
else (Token.Keyword)
: (Token.Punctuation)
num (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
area (Token.Name)
, (Token.Punctuation)
num (Token.Name)
) (Token.Punctuation)
