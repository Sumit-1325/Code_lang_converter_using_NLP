W (Token.Name)
, (Token.Punctuation)
H (Token.Name)
, (Token.Punctuation)
X (Token.Name)
, (Token.Punctuation)
Y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
C (Token.Name)
= (Token.Operator)
X (Token.Name)
/ (Token.Operator)
W (Token.Name)
D (Token.Name)
= (Token.Operator)
Y (Token.Name)
/ (Token.Operator)
H (Token.Name)
result2 (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
result (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
C (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
D (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
result (Token.Name)
= (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
* (Token.Operator)
0.5 (Token.Literal.Number.Float)
elif (Token.Keyword)
C (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
result (Token.Name)
= (Token.Operator)
D (Token.Name)
* (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
elif (Token.Keyword)
D (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
result (Token.Name)
= (Token.Operator)
C (Token.Name)
* (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
result (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
C (Token.Name)
, (Token.Punctuation)
D (Token.Name)
) (Token.Punctuation)
* (Token.Operator)
W (Token.Name)
* (Token.Operator)
H (Token.Name)
if (Token.Keyword)
X (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
Y (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
if (Token.Keyword)
X (Token.Name)
== (Token.Operator)
Y (Token.Name)
: (Token.Punctuation)
result2 (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
result (Token.Name)
, (Token.Punctuation)
result2 (Token.Name)
) (Token.Punctuation)
