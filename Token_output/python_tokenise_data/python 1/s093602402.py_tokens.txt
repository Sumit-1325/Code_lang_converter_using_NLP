a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
) (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
n (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
n (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
print (Token.Name.Builtin)
i (Token.Name)
break (Token.Keyword)
