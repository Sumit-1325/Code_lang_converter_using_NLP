#include<stdio.h> (Token.Comment.Single)
int (Token.Name.Builtin)
main (Token.Name)
( (Token.Punctuation)
void (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
int (Token.Name.Builtin)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
d (Token.Name)
; (Token.Punctuation)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
%d (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
, (Token.Punctuation)
& (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
scanf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
%d (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
, (Token.Punctuation)
& (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
d (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
while (Token.Keyword)
( (Token.Punctuation)
d (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
d (Token.Name)
; (Token.Punctuation)
d (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)
printf (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
%d (Token.Literal.String.Interpol)
\n (Token.Literal.String.Escape)
" (Token.Literal.String.Double)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
return (Token.Keyword)
0 (Token.Literal.Number.Integer)
; (Token.Punctuation)
} (Token.Punctuation)
