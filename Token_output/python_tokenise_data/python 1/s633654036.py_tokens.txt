import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
a1 (Token.Name)
, (Token.Punctuation)
b1 (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
b (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
a (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
c (Token.Name)
= (Token.Operator)
b (Token.Name)
b (Token.Name)
= (Token.Operator)
a (Token.Name)
% (Token.Operator)
b (Token.Name)
a (Token.Name)
= (Token.Operator)
c (Token.Name)
return (Token.Keyword)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
a1 (Token.Name)
, (Token.Punctuation)
b1 (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
