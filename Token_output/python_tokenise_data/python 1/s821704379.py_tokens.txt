def (Token.Keyword)
converter (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
b (Token.Name)
% (Token.Operator)
a (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
a (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
return (Token.Keyword)
converter (Token.Name)
( (Token.Punctuation)
b (Token.Name)
% (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
sorted (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
x (Token.Name)
in (Token.Operator.Word)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
converter (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
