XY (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
XY (Token.Name)
) (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
XY (Token.Name)
) (Token.Punctuation)
x_dy (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
ans (Token.Name)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
for (Token.Keyword)
d (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
y (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
% (Token.Operator)
d (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
x_dy (Token.Name)
% (Token.Operator)
d (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
d (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
