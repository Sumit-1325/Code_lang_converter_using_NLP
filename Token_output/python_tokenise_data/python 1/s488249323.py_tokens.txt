# -*- coding: utf-8 -*- (Token.Comment.Single)
def (Token.Keyword)
greatest_common_divisor (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
x_divisor (Token.Name)
= (Token.Operator)
{ (Token.Punctuation)
i (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
x (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
y_divisor (Token.Name)
= (Token.Operator)
{ (Token.Punctuation)
i (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
y (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
} (Token.Punctuation)
common_divisor (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
x_divisor (Token.Name)
. (Token.Operator)
intersection (Token.Name)
( (Token.Punctuation)
y_divisor (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
common_divisor (Token.Name)
. (Token.Operator)
sort (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
common_divisor (Token.Name)
. (Token.Operator)
pop (Token.Name)
( (Token.Punctuation)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
to_xy (Token.Name.Function)
( (Token.Punctuation)
v (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
c (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
c (Token.Name)
in (Token.Operator.Word)
v (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
to_xy (Token.Name)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
greatest_common_divisor (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
