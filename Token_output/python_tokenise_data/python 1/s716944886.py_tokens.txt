import (Token.Keyword.Namespace)
re (Token.Name.Namespace)
def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
return (Token.Keyword)
x (Token.Name)
if (Token.Keyword)
x (Token.Name)
< (Token.Operator)
y (Token.Name)
and (Token.Operator.Word)
y (Token.Name)
% (Token.Operator)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
x (Token.Name)
if (Token.Keyword)
x (Token.Name)
> (Token.Operator)
y (Token.Name)
and (Token.Operator.Word)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
y (Token.Name)
maximum (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
m (Token.Name)
= (Token.Operator)
maximum (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
[ (Token.Punctuation)
31 (Token.Literal.Number.Integer)
, (Token.Punctuation)
29 (Token.Literal.Number.Integer)
, (Token.Punctuation)
23 (Token.Literal.Number.Integer)
, (Token.Punctuation)
19 (Token.Literal.Number.Integer)
, (Token.Punctuation)
17 (Token.Literal.Number.Integer)
, (Token.Punctuation)
13 (Token.Literal.Number.Integer)
, (Token.Punctuation)
11 (Token.Literal.Number.Integer)
, (Token.Punctuation)
7 (Token.Literal.Number.Integer)
, (Token.Punctuation)
5 (Token.Literal.Number.Integer)
, (Token.Punctuation)
3 (Token.Literal.Number.Integer)
, (Token.Punctuation)
2 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
maximum (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
m (Token.Name)
= (Token.Operator)
maximum (Token.Name)
/ (Token.Operator)
i (Token.Name)
break (Token.Keyword)
r (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
m (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
r (Token.Name)
= (Token.Operator)
i (Token.Name)
return (Token.Keyword)
r (Token.Name)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
re (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
, (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
