a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
c (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
while (Token.Keyword)
True (Token.Keyword.Constant)
: (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
i (Token.Name)
+ (Token.Operator)
2 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
" (Token.Literal.String.Double)
a = (Token.Literal.String.Double)
{} (Token.Literal.String.Interpol)
, x =  (Token.Literal.String.Double)
{} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
. (Token.Operator)
format (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
% (Token.Operator)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
if (Token.Keyword)
b (Token.Name)
% (Token.Operator)
x (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
c (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
/ (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
b (Token.Name)
/ (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
break (Token.Keyword)
if (Token.Keyword)
i (Token.Name)
== (Token.Operator)
a (Token.Name)
- (Token.Operator)
1 (Token.Literal.Number.Integer)
: (Token.Punctuation)
break (Token.Keyword)
s (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
for (Token.Keyword)
j (Token.Name)
in (Token.Operator.Word)
c (Token.Name)
: (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
s (Token.Name)
* (Token.Operator)
j (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
