def (Token.Keyword)
euclideanAlg (Token.Name.Function)
( (Token.Punctuation)
n (Token.Name)
, (Token.Punctuation)
m (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
r (Token.Name)
= (Token.Operator)
n (Token.Name)
% (Token.Operator)
m (Token.Name)
if (Token.Keyword)
r (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
m (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
return (Token.Keyword)
euclideanAlg (Token.Name)
( (Token.Punctuation)
m (Token.Name)
, (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
A (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
euclideanAlg (Token.Name)
( (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
