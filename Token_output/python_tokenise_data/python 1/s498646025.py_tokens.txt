# -*- coding: utf-8 -*- (Token.Comment.Single)
import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
if (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
version_info (Token.Name)
. (Token.Operator)
minor (Token.Name)
> (Token.Operator)
= (Token.Operator)
5 (Token.Literal.Number.Integer)
: (Token.Punctuation)
from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
gcd (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
from (Token.Keyword.Namespace)
fractions (Token.Name.Namespace)
import (Token.Keyword.Namespace)
gcd (Token.Name)
def (Token.Keyword)
input (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
list2d (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
c (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
[ (Token.Punctuation)
c (Token.Name)
] (Token.Punctuation)
* (Token.Operator)
b (Token.Name)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
list3d (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
c (Token.Name)
, (Token.Punctuation)
d (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
[ (Token.Punctuation)
[ (Token.Punctuation)
d (Token.Name)
] (Token.Punctuation)
* (Token.Operator)
c (Token.Name)
for (Token.Keyword)
j (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
] (Token.Punctuation)
def (Token.Keyword)
ceil (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
- (Token.Operator)
( (Token.Punctuation)
- (Token.Operator)
x (Token.Name)
/ (Token.Operator)
/ (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
INT (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
int (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
MAP (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
LIST (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
Yes (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
Yes (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
def (Token.Keyword)
No (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
No (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
def (Token.Keyword)
YES (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
YES (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
def (Token.Keyword)
NO (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
NO (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
sys (Token.Name)
. (Token.Operator)
setrecursionlimit (Token.Name)
( (Token.Punctuation)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
) (Token.Punctuation)
INF (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
' (Token.Literal.String.Single)
inf (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
MOD (Token.Name)
= (Token.Operator)
10 (Token.Literal.Number.Integer)
* (Token.Operator)
* (Token.Operator)
9 (Token.Literal.Number.Integer)
+ (Token.Operator)
7 (Token.Literal.Number.Integer)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
MAP (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
