x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
] (Token.Punctuation)
num (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
> (Token.Operator)
= (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
for (Token.Keyword)
zzz (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
z (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
z (Token.Name)
% (Token.Operator)
zzz (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
x (Token.Name)
% (Token.Operator)
zzz (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
num (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
zzz (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
num (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
elif (Token.Keyword)
y (Token.Name)
> (Token.Operator)
x (Token.Name)
: (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
y (Token.Name)
% (Token.Operator)
x (Token.Name)
for (Token.Keyword)
zzz (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
z (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
z (Token.Name)
% (Token.Operator)
zzz (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
% (Token.Operator)
zzz (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
num (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
zzz (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
num (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
