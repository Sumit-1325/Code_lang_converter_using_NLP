def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
i (Token.Name)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
temp (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
while (Token.Keyword)
( (Token.Punctuation)
i (Token.Name)
< (Token.Operator)
= (Token.Operator)
b (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
b (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
temp (Token.Name)
!= (Token.Operator)
i (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
temp (Token.Name)
= (Token.Operator)
temp (Token.Name)
* (Token.Operator)
i (Token.Name)
while (Token.Keyword)
( (Token.Punctuation)
a (Token.Name)
% (Token.Operator)
temp (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
b (Token.Name)
% (Token.Operator)
temp (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
temp (Token.Name)
> (Token.Operator)
5 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
a (Token.Name)
/ (Token.Operator)
temp (Token.Name)
b (Token.Name)
= (Token.Operator)
b (Token.Name)
/ (Token.Operator)
temp (Token.Name)
i (Token.Name)
= (Token.Operator)
i (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
temp (Token.Name)
l (Token.Name)
= (Token.Operator)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
> (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
, (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
l (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
