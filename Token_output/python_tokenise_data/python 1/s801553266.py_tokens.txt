# -*- coding: utf-8 -*- (Token.Comment.Single)
from (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
stdin (Token.Name)
def (Token.Keyword)
greatest_common_divisor3 (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
xx (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
yy (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
v1 (Token.Name)
= (Token.Operator)
xx (Token.Name)
% (Token.Operator)
yy (Token.Name)
#print("{} {}".format(yy, v1))  # TODO delete (Token.Comment.Single)
if (Token.Keyword)
yy (Token.Name)
< (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
or (Token.Operator.Word)
v1 (Token.Name)
< (Token.Operator)
= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
max (Token.Name.Builtin)
( (Token.Punctuation)
yy (Token.Name)
, (Token.Punctuation)
v1 (Token.Name)
) (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
return (Token.Keyword)
greatest_common_divisor3 (Token.Name)
( (Token.Punctuation)
yy (Token.Name)
, (Token.Punctuation)
v1 (Token.Name)
) (Token.Punctuation)
x_y (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
greatest_common_divisor3 (Token.Name)
( (Token.Punctuation)
x_y (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
x_y (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
