Z (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
X (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
Z (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
Y (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
Z (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
while (Token.Keyword)
( (Token.Punctuation)
X (Token.Name)
!= (Token.Operator)
Y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
X (Token.Name)
> (Token.Operator)
Y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
R (Token.Name)
= (Token.Operator)
X (Token.Name)
- (Token.Operator)
Y (Token.Name)
X (Token.Name)
= (Token.Operator)
Y (Token.Name)
Y (Token.Name)
= (Token.Operator)
R (Token.Name)
elif (Token.Keyword)
( (Token.Punctuation)
X (Token.Name)
< (Token.Operator)
Y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
R (Token.Name)
= (Token.Operator)
Y (Token.Name)
- (Token.Operator)
X (Token.Name)
Y (Token.Name)
= (Token.Operator)
R (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
Y (Token.Name)
) (Token.Punctuation)
