# ALDS1_1_B - Greatest Common Divisor (Token.Comment.Single)
def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
: (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
y (Token.Name)
: (Token.Punctuation)
int (Token.Name.Builtin)
) (Token.Punctuation)
- (Token.Operator)
> (Token.Operator)
int (Token.Name.Builtin)
: (Token.Punctuation)
while (Token.Keyword)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
return (Token.Keyword)
y (Token.Name)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
A (Token.Name)
, (Token.Punctuation)
B (Token.Name)
= (Token.Operator)
tuple (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
ans (Token.Name)
= (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
A (Token.Name)
, (Token.Punctuation)
B (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
ans (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
