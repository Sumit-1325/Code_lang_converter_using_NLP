x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
lg (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
sm (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
div (Token.Name)
= (Token.Operator)
True (Token.Keyword.Constant)
while (Token.Keyword)
div (Token.Name)
: (Token.Punctuation)
lg_temp (Token.Name)
= (Token.Operator)
sm (Token.Name)
sm (Token.Name)
= (Token.Operator)
lg (Token.Name)
% (Token.Operator)
sm (Token.Name)
lg (Token.Name)
= (Token.Operator)
lg_temp (Token.Name)
if (Token.Keyword)
sm (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
div (Token.Name)
= (Token.Operator)
False (Token.Keyword.Constant)
return (Token.Keyword)
lg_temp (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
