def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
x (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
return (Token.Keyword)
gcd (Token.Name)
( (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
l (Token.Name)
, (Token.Punctuation)
r (Token.Name)
= (Token.Operator)
tuple (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
' (Token.Literal.String.Single)
' (Token.Literal.String.Single)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
l (Token.Name)
, (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
