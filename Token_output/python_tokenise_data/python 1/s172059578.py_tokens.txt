def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
a_x (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
a_y (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
x (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
a_x (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
y (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
a_y (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
a_cd (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
set (Token.Name.Builtin)
( (Token.Punctuation)
a_x (Token.Name)
) (Token.Punctuation)
. (Token.Operator)
intersection (Token.Name)
( (Token.Punctuation)
set (Token.Name.Builtin)
( (Token.Punctuation)
a_y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
return (Token.Keyword)
max (Token.Name.Builtin)
( (Token.Punctuation)
a_cd (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
> (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
tmp (Token.Name)
= (Token.Operator)
x (Token.Name)
x (Token.Name)
= (Token.Operator)
y (Token.Name)
y (Token.Name)
= (Token.Operator)
tmp (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
% (Token.Operator)
x (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
