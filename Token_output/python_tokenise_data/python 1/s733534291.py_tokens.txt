def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
< (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
# x,y = y,x はswap(値の交換)を表す (Token.Comment.Single)
while (Token.Keyword)
y (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
r (Token.Name)
= (Token.Operator)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
x (Token.Name)
= (Token.Operator)
y (Token.Name)
y (Token.Name)
= (Token.Operator)
r (Token.Name)
return (Token.Keyword)
x (Token.Name)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
gcd (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
# ユークリッドの互除法により最大公約数: GreatestCommonDivisorを求める (Token.Comment.Single)
# 以下のようなアルゴリズムはn回の割り算を行う必要があるため、大きな数に対しては時間内に出力を得ることはできない (Token.Comment.Single)
# gcd(x, y) (Token.Comment.Single)
#     n = min(x, y) (Token.Comment.Single)
#     for d = n downto 1 (Token.Comment.Single)
#         if x と y がともに d で割り切れる (Token.Comment.Single)
#             return d (Token.Comment.Single)
# ユークリッドの互除法による最大公約数の判定 (Token.Comment.Single)
# gcd(x, y) (Token.Comment.Single)
#     if x < y (Token.Comment.Single)
#         swap(x, y) (Token.Comment.Single)
#     while y > 0 (Token.Comment.Single)
#         r = x % y (Token.Comment.Single)
#         x = y (Token.Comment.Single)
#         y = r (Token.Comment.Single)
#     return x (Token.Comment.Single)
# ユークリッドの互除法 (Token.Comment.Single)
# a = bq + r (Token.Comment.Single)
# 74 = 54*1+20 (Token.Comment.Single)
# 54 = 20*2+14 (Token.Comment.Single)
# 20 = 14*1+6 (Token.Comment.Single)
# 14 = 6*2+2 (Token.Comment.Single)
# 6 = 2*3+0 (Token.Comment.Single)
# 一行に複数入力 (Token.Comment.Single)
# >> > a, b = map(int, input().split())  # 標準入力を行う (Token.Comment.Single)
# 33 66 (Token.Comment.Single)
# >> > print(a) (Token.Comment.Single)
# 33 (Token.Comment.Single)
# >> > print(b) (Token.Comment.Single)
# 66 (Token.Comment.Single)
