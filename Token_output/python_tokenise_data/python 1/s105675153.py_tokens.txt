import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
= (Token.Operator)
tuple (Token.Name.Builtin)
( (Token.Punctuation)
[ (Token.Punctuation)
int (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
] (Token.Punctuation)
) (Token.Punctuation)
min (Token.Name.Builtin)
= (Token.Operator)
a (Token.Name)
if (Token.Keyword)
a (Token.Name)
< (Token.Operator)
b (Token.Name)
else (Token.Keyword)
b (Token.Name)
divisor (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
i (Token.Name)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
while (Token.Keyword)
i (Token.Name)
< (Token.Operator)
math (Token.Name)
. (Token.Operator)
sqrt (Token.Name)
( (Token.Punctuation)
min (Token.Name.Builtin)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
b (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
a (Token.Name)
/ (Token.Operator)
i (Token.Name)
b (Token.Name)
= (Token.Operator)
b (Token.Name)
/ (Token.Operator)
i (Token.Name)
divisor (Token.Name)
= (Token.Operator)
divisor (Token.Name)
* (Token.Operator)
i (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
i (Token.Name)
= (Token.Operator)
i (Token.Name)
+ (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
( (Token.Punctuation)
divisor (Token.Name)
) (Token.Punctuation)
