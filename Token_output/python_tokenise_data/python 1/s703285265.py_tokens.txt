import (Token.Keyword.Namespace)
java (Token.Name.Namespace)
. (Token.Name.Namespace)
util (Token.Name.Namespace)
. (Token.Name.Namespace)
Scanner (Token.Name.Namespace)
; (Token.Punctuation)
/ (Token.Operator)
/ (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
= (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
% (Token.Operator)
y (Token.Name)
) (Token.Punctuation)
public (Token.Name)
class (Token.Keyword)
Main (Token.Name.Class)
{ (Token.Punctuation)
public (Token.Name)
static (Token.Name)
void (Token.Name)
main (Token.Name)
( (Token.Punctuation)
String (Token.Name)
[ (Token.Punctuation)
] (Token.Punctuation)
args (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
Scanner (Token.Name)
scanner (Token.Name)
= (Token.Operator)
new (Token.Name)
Scanner (Token.Name)
( (Token.Punctuation)
System (Token.Name)
. (Token.Operator)
in (Token.Operator.Word)
) (Token.Punctuation)
; (Token.Punctuation)
int (Token.Name.Builtin)
a (Token.Name)
= (Token.Operator)
scanner (Token.Name)
. (Token.Operator)
nextInt (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
int (Token.Name.Builtin)
b (Token.Name)
= (Token.Operator)
scanner (Token.Name)
. (Token.Operator)
nextInt (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
scanner (Token.Name)
. (Token.Operator)
close (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
System (Token.Name)
. (Token.Operator)
out (Token.Name)
. (Token.Operator)
println (Token.Name)
( (Token.Punctuation)
helper (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
; (Token.Punctuation)
} (Token.Punctuation)
public (Token.Name)
static (Token.Name)
int (Token.Name.Builtin)
helper (Token.Name)
( (Token.Punctuation)
int (Token.Name.Builtin)
a (Token.Name)
, (Token.Punctuation)
int (Token.Name.Builtin)
b (Token.Name)
) (Token.Punctuation)
{ (Token.Punctuation)
if (Token.Keyword)
( (Token.Punctuation)
b (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
{ (Token.Punctuation)
return (Token.Keyword)
a (Token.Name)
; (Token.Punctuation)
} (Token.Punctuation)
else (Token.Keyword)
{ (Token.Punctuation)
return (Token.Keyword)
helper (Token.Name)
( (Token.Punctuation)
b (Token.Name)
, (Token.Punctuation)
b (Token.Name)
% (Token.Operator)
a (Token.Name)
) (Token.Punctuation)
; (Token.Punctuation)
} (Token.Punctuation)
} (Token.Punctuation)
} (Token.Punctuation)
