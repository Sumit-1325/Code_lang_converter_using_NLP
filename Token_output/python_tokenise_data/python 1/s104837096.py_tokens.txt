a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
gcd (Token.Name.Function)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
z (Token.Name)
= (Token.Operator)
max (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
% (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
z (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
return (Token.Keyword)
[ (Token.Punctuation)
min (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
return (Token.Keyword)
gcd (Token.Name)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
z (Token.Name)
) (Token.Punctuation)
L (Token.Name)
= (Token.Operator)
gcd (Token.Name)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
K (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
reversed (Token.Name.Builtin)
( (Token.Punctuation)
( (Token.Punctuation)
range (Token.Name.Builtin)
( (Token.Punctuation)
1 (Token.Literal.Number.Integer)
, (Token.Punctuation)
L (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
a (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
b (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
K (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
K (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
