x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
raw_input (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
print (Token.Name.Builtin)
x (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
> (Token.Operator)
x (Token.Name)
: (Token.Punctuation)
tmp (Token.Name)
= (Token.Operator)
x (Token.Name)
x (Token.Name)
= (Token.Operator)
y (Token.Name)
y (Token.Name)
= (Token.Operator)
tmp (Token.Name)
i (Token.Name)
= (Token.Operator)
2 (Token.Literal.Number.Integer)
ans (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
al (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
] (Token.Punctuation)
while (Token.Keyword)
i (Token.Name)
* (Token.Operator)
i (Token.Name)
< (Token.Operator)
= (Token.Operator)
x (Token.Name)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
al (Token.Name)
. (Token.Operator)
append (Token.Name)
( (Token.Punctuation)
i (Token.Name)
) (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
x (Token.Name)
/ (Token.Operator)
i (Token.Name)
y (Token.Name)
= (Token.Operator)
y (Token.Name)
/ (Token.Operator)
i (Token.Name)
continue (Token.Keyword)
i (Token.Name)
+ (Token.Operator)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
len (Token.Name.Builtin)
( (Token.Punctuation)
al (Token.Name)
) (Token.Punctuation)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
for (Token.Keyword)
j (Token.Name)
in (Token.Operator.Word)
al (Token.Name)
: (Token.Punctuation)
ans (Token.Name)
* (Token.Operator)
= (Token.Operator)
j (Token.Name)
print (Token.Name.Builtin)
ans (Token.Name)
