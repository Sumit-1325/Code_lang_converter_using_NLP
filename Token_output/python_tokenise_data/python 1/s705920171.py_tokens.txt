def (Token.Keyword)
test (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
inputs (Token.Name)
= (Token.Operator)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
if (Token.Keyword)
inputs (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
> (Token.Operator)
inputs (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
inputs (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
inputs (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
else (Token.Keyword)
: (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
inputs (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
inputs (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
while (Token.Keyword)
b (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
r (Token.Name)
= (Token.Operator)
a (Token.Name)
% (Token.Operator)
b (Token.Name)
a (Token.Name)
= (Token.Operator)
b (Token.Name)
b (Token.Name)
= (Token.Operator)
r (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
test (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
