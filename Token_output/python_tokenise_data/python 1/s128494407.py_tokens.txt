from (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
import (Token.Keyword.Namespace)
stdin (Token.Name)
def (Token.Keyword)
stdinput (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
return (Token.Keyword)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
strip (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
def (Token.Keyword)
main (Token.Name.Function)
( (Token.Punctuation)
) (Token.Punctuation)
: (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
stdinput (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
min (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
, (Token.Punctuation)
max (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
) (Token.Punctuation)
while (Token.Keyword)
b (Token.Name)
% (Token.Operator)
a (Token.Name)
!= (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
a (Token.Name)
, (Token.Punctuation)
b (Token.Name)
= (Token.Operator)
b (Token.Name)
% (Token.Operator)
a (Token.Name)
, (Token.Punctuation)
a (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
a (Token.Name)
) (Token.Punctuation)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
' (Token.Literal.String.Single)
__main__ (Token.Literal.String.Single)
' (Token.Literal.String.Single)
: (Token.Punctuation)
main (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
