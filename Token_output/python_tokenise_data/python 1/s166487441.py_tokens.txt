import (Token.Keyword.Namespace)
sys (Token.Name.Namespace)
line (Token.Name)
= (Token.Operator)
sys (Token.Name)
. (Token.Operator)
stdin (Token.Name)
. (Token.Operator)
readline (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
line (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
" (Token.Literal.String.Double)
" (Token.Literal.String.Double)
) (Token.Punctuation)
x (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
x (Token.Name)
) (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
int (Token.Name.Builtin)
( (Token.Punctuation)
y (Token.Name)
) (Token.Punctuation)
divide (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
if (Token.Keyword)
x (Token.Name)
> (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
y (Token.Name)
= (Token.Operator)
y (Token.Name)
% (Token.Operator)
x (Token.Name)
if (Token.Keyword)
x (Token.Name)
== (Token.Operator)
y (Token.Name)
: (Token.Punctuation)
divide (Token.Name)
= (Token.Operator)
x (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
for (Token.Keyword)
i (Token.Name)
in (Token.Operator.Word)
range (Token.Name.Builtin)
( (Token.Punctuation)
2 (Token.Literal.Number.Integer)
, (Token.Punctuation)
y (Token.Name)
+ (Token.Operator)
2 (Token.Literal.Number.Integer)
) (Token.Punctuation)
: (Token.Punctuation)
if (Token.Keyword)
x (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
and (Token.Operator.Word)
y (Token.Name)
% (Token.Operator)
i (Token.Name)
== (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
divide (Token.Name)
= (Token.Operator)
divide (Token.Name)
* (Token.Operator)
i (Token.Name)
x (Token.Name)
= (Token.Operator)
x (Token.Name)
/ (Token.Operator)
i (Token.Name)
y (Token.Name)
= (Token.Operator)
y (Token.Name)
/ (Token.Operator)
i (Token.Name)
i (Token.Name)
= (Token.Operator)
1 (Token.Literal.Number.Integer)
print (Token.Name.Builtin)
divide (Token.Name)
