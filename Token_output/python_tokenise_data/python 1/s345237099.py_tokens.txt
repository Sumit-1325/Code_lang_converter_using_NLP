A (Token.Name)
= (Token.Operator)
[ (Token.Punctuation)
list (Token.Name.Builtin)
( (Token.Punctuation)
map (Token.Name.Builtin)
( (Token.Punctuation)
int (Token.Name.Builtin)
, (Token.Punctuation)
s (Token.Name)
. (Token.Operator)
split (Token.Name)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
for (Token.Keyword)
s (Token.Name)
in (Token.Operator.Word)
open (Token.Name.Builtin)
( (Token.Punctuation)
0 (Token.Literal.Number.Integer)
) (Token.Punctuation)
] (Token.Punctuation)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
= (Token.Operator)
A (Token.Name)
[ (Token.Punctuation)
0 (Token.Literal.Number.Integer)
] (Token.Punctuation)
, (Token.Punctuation)
A (Token.Name)
[ (Token.Punctuation)
1 (Token.Literal.Number.Integer)
] (Token.Punctuation)
if (Token.Keyword)
y (Token.Name)
> (Token.Operator)
x (Token.Name)
: (Token.Punctuation)
l (Token.Name)
, (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
y (Token.Name)
, (Token.Punctuation)
x (Token.Name)
else (Token.Keyword)
: (Token.Punctuation)
l (Token.Name)
, (Token.Punctuation)
s (Token.Name)
= (Token.Operator)
x (Token.Name)
, (Token.Punctuation)
y (Token.Name)
while (Token.Keyword)
l (Token.Name)
% (Token.Operator)
s (Token.Name)
> (Token.Operator)
0 (Token.Literal.Number.Integer)
: (Token.Punctuation)
m (Token.Name)
= (Token.Operator)
l (Token.Name)
% (Token.Operator)
s (Token.Name)
l (Token.Name)
= (Token.Operator)
s (Token.Name)
s (Token.Name)
= (Token.Operator)
m (Token.Name)
print (Token.Name.Builtin)
( (Token.Punctuation)
s (Token.Name)
) (Token.Punctuation)
