import (Token.Keyword.Namespace)
math (Token.Name.Namespace)
def (Token.Keyword)
calculate_circle (Token.Name.Function)
( (Token.Punctuation)
r (Token.Name)
: (Token.Punctuation)
float (Token.Name.Builtin)
) (Token.Punctuation)
- (Token.Operator)
> (Token.Operator)
( (Token.Punctuation)
float (Token.Name.Builtin)
, (Token.Punctuation)
float (Token.Name.Builtin)
) (Token.Punctuation)
: (Token.Punctuation)
S (Token.Name)
= (Token.Operator)
r (Token.Name)
* (Token.Operator)
r (Token.Name)
* (Token.Operator)
math (Token.Name)
. (Token.Operator)
pi (Token.Name)
around (Token.Name)
= (Token.Operator)
2.0 (Token.Literal.Number.Float)
* (Token.Operator)
r (Token.Name)
* (Token.Operator)
math (Token.Name)
. (Token.Operator)
pi (Token.Name)
return (Token.Keyword)
S (Token.Name)
, (Token.Punctuation)
around (Token.Name)
r (Token.Name)
= (Token.Operator)
float (Token.Name.Builtin)
( (Token.Punctuation)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
) (Token.Punctuation)
s (Token.Name)
, (Token.Punctuation)
a (Token.Name)
= (Token.Operator)
calculate_circle (Token.Name)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
f (Token.Literal.String.Affix)
" (Token.Literal.String.Double)
{ (Token.Literal.String.Interpol)
s (Token.Name)
: (Token.Literal.String.Interpol)
.30f (Token.Literal.String.Double)
} (Token.Literal.String.Interpol)
{ (Token.Literal.String.Interpol)
a (Token.Name)
: (Token.Literal.String.Interpol)
.30f (Token.Literal.String.Double)
} (Token.Literal.String.Interpol)
" (Token.Literal.String.Double)
) (Token.Punctuation)
