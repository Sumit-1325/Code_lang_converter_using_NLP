from (Token.Keyword.Namespace)
math (Token.Name.Namespace)
import (Token.Keyword.Namespace)
pi (Token.Name)
def (Token.Keyword)
circle (Token.Name.Function)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
: (Token.Punctuation)
print (Token.Name.Builtin)
( (Token.Punctuation)
r (Token.Name)
* (Token.Operator)
r (Token.Name)
* (Token.Operator)
pi (Token.Name)
, (Token.Punctuation)
2 (Token.Literal.Number.Integer)
* (Token.Operator)
pi (Token.Name)
* (Token.Operator)
r (Token.Name)
) (Token.Punctuation)
return (Token.Keyword)
0 (Token.Literal.Number.Integer)
if (Token.Keyword)
__name__ (Token.Name.Variable.Magic)
== (Token.Operator)
" (Token.Literal.String.Double)
__main__ (Token.Literal.String.Double)
" (Token.Literal.String.Double)
: (Token.Punctuation)
r (Token.Name)
= (Token.Operator)
input (Token.Name.Builtin)
( (Token.Punctuation)
) (Token.Punctuation)
ret (Token.Name)
= (Token.Operator)
circle (Token.Name)
( (Token.Punctuation)
float (Token.Name.Builtin)
( (Token.Punctuation)
r (Token.Name)
) (Token.Punctuation)
) (Token.Punctuation)
