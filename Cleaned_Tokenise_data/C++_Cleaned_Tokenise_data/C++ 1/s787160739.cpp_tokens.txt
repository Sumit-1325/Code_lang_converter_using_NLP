# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stdio.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) d (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) b (Token.Name) , (Token.Punctuation) c (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) a (Token.Name) , (Token.Punctuation) & (Token.Operator) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) b (Token.Name) > (Token.Operator) a (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) c (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) c (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) d (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) d (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)