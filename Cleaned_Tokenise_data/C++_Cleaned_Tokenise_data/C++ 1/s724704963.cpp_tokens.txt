# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define GET_MACRO(_1,_2,_3,_4,_5,_6,NAME,...) NAME (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr(...) cerr<< GET_MACRO(__VA_ARGS__,pr6,pr5,pr4,pr3,pr2,pr1)(__VA_ARGS__) <<endl (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr1(a) (#a)<<"="<<(a)<<" " (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr2(a,b) pr1(a)<<pr1(b) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr3(a,b,c) pr1(a)<<pr2(b,c) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr4(a,b,c,d) pr1(a)<<pr3(b,c,d) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr5(a,b,c,d,e) pr1(a)<<pr4(b,c,d,e) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr6(a,b,c,d,e,f) pr1(a)<<pr5(b,c,d,e,f) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr7(a,b,c,d,e,f,g) pr1(a)<<pr6(b,c,d,e,f,g) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pr8(a,b,c,d,e,f,g,h) pr1(a)<<pr7(b,c,d,e,f,g,h) (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) Int (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) Double (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) Int (Token.Name)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) 1L (Token.Literal.Number.Float) L (Token.Name) < (Token.Operator) < (Token.Operator) 55 (Token.Literal.Number.Integer) ) (Token.Punctuation) + (Token.Operator) 1e9 (Token.Literal.Number.Float) ; (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Comment.Single) const (Token.Keyword)   (Token.Text.Whitespace) Int (Token.Name)   (Token.Text.Whitespace) mod (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) 1e9 (Token.Literal.Number.Float) ) (Token.Punctuation) + (Token.Operator) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) Double (Token.Name)   (Token.Text.Whitespace) EPS (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e-8 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) Double (Token.Name)   (Token.Text.Whitespace) PI (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 6.0 (Token.Literal.Number.Float)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) asin (Token.Name) ( (Token.Punctuation) ( (Token.Punctuation) Double (Token.Name) ) (Token.Punctuation) 0.5 (Token.Literal.Number.Float) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) P (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) Int (Token.Name) , (Token.Punctuation) Int (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) tuple (Token.Name) < (Token.Operator) Int (Token.Name) , (Token.Punctuation) Int (Token.Name) , (Token.Punctuation) Int (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) Max (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) max (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) Min (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) min (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) o (Token.Name) , (Token.Punctuation) P (Token.Name)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) o (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) ( (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p (Token.Name) . (Token.Punctuation) first (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) , (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p (Token.Name) . (Token.Punctuation) second (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) ) (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) o (Token.Name) , (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) t (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) o (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) ( (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) get (Token.Name) < (Token.Operator) 0 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) t (Token.Name) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) , (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) get (Token.Name) < (Token.Operator) 1 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) t (Token.Name) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) , (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) get (Token.Name) < (Token.Operator) 2 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) t (Token.Name) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) ) (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) istream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) istream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation) P (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) i (Token.Name) > (Token.Operator) > (Token.Operator) p (Token.Name) . (Token.Punctuation) first (Token.Name) > (Token.Operator) > (Token.Operator) p (Token.Name) . (Token.Punctuation) second (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) o (Token.Name) , (Token.Punctuation) vector (Token.Name) < (Token.Operator) auto (Token.Keyword) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) Int (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) t (Token.Name) : (Token.Operator) a (Token.Name) ) (Token.Punctuation) o (Token.Name) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ? (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) : (Token.Operator) " (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) t (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) o (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) istream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) istream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation) vector (Token.Name) < (Token.Operator) auto (Token.Keyword) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) & (Token.Operator) t (Token.Name) : (Token.Operator) a (Token.Name) ) (Token.Punctuation) i (Token.Name) > (Token.Operator) > (Token.Operator) t (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) prArr (Token.Name) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) = (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) { (Token.Punctuation) Int (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) t (Token.Name) : (Token.Operator) a (Token.Name) ) (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ? (Token.Operator) s (Token.Name) : (Token.Operator) " (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) t (Token.Name) ; (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) ios_base (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) fixed (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) setprecision (Token.Name) ( (Token.Punctuation) 12 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) k (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) k (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) b (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)