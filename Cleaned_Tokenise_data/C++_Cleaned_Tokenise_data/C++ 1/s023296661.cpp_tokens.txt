# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stdio.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) r (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) x (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation) & (Token.Operator) y (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) while0 (Token.Name) ( (Token.Punctuation) r (Token.Name) > (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) r (Token.Name) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) x (Token.Name) = (Token.Operator) r (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) y (Token.Name) = (Token.Operator) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) r (Token.Name) > (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) r (Token.Name) = (Token.Operator) y (Token.Name) % (Token.Operator) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) y (Token.Name) = (Token.Operator) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) x (Token.Name) = (Token.Operator) r (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) y (Token.Name) ; (Token.Punctuation) i (Token.Name) > (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) - (Token.Operator) - (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)