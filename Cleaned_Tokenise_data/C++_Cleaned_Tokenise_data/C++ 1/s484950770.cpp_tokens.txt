# (Token.Comment.Preproc) ifdef LOCAL (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) pragma GCC optimize ("O0") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) pragma GCC optimize ("O3") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) : (Token.Operator) : (Token.Operator) placeholders (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e9 (Token.Literal.Number.Float)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) INF_LL (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e18 (Token.Literal.Number.Float)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define __overload3(_1, _2, _3, name,...) name (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(...) __overload3(__VA_ARGS__, repFromUntil, repUntil, repeat)(__VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repeat(times) repFromUntil(__name, 0, times) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repUntil(name, times) repFromUntil(name, 0, times) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repFromUntil(name, from, until) for (int name = from, name##__until = (until); name < name##__until; name++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repFromTo(name, from, to) repFromUntil(name, from, to + 1) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repr(...) __overload3(__VA_ARGS__, reprFromUntil, reprUntil, repeat)(__VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define reprUntil(name, times) reprFromUntil(name, 0, times) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define reprFromUntil(name, from, until) for (int name = until - 1, name##__from = (from); name >= name##__from; name--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define reprFromTo(name, from, to) reprFromUntil(name, from, to + 1) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define debugos cout (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) ifdef LOCAL (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug(v) {printf("L%d %s > ",__LINE__,#v);debugos<<(v)<<endl;} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debugv(v) {printf("L%d %s > ",__LINE__,#v);for(auto e:(v)){debugos<<e<<" ";}debugos<<endl;} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debuga(m,w) {printf("L%d %s > ",__LINE__,#m);for(int x=0;x<(w);x++){debugos<<(m)[x]<<" ";}debugos<<endl;} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debugaa(m,h,w) {printf("L%d %s >\n",__LINE__,#m);for(int y=0;y<(h);y++){for(int x=0;x<(w);x++){debugos<<(m)[y][x]<<" ";}debugos<<endl;}} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug(v) {} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debugv(v) {} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debuga(m,w) {} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debugaa(m,h,w) {} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define newl "\n" (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define all(iter) begin(iter), end(iter) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) if defined(_WIN32) || defined(_WIN64) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define getchar_unlocked _getchar_nolock (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define putchar_unlocked _putchar_nolock (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) elif defined(__GNUC__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define getchar_unlocked getchar (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define putchar_unlocked putchar (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) var (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) var (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) MyScanner (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) public (Token.Keyword) : (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) input_integer (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) sign (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) getchar_unlocked (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) cc (Token.Name) < (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char)   (Token.Text.Whitespace) | (Token.Operator) | (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) < (Token.Operator) cc (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) getchar_unlocked (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) cc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) - (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)   (Token.Text.Whitespace) sign (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) getchar_unlocked (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 3 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) sign (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) c (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) getchar_unlocked (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyScanner (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) char (Token.Keyword.Type) & (Token.Operator)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) c (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyScanner (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) int (Token.Keyword.Type) & (Token.Operator)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) input_integer (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) ( (Token.Punctuation) var (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyScanner (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) ll (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) input_integer (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) ( (Token.Punctuation) var (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyScanner (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) string (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) getchar_unlocked (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) isvisiblechar (Token.Name) ( (Token.Punctuation) cc (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) getchar_unlocked (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) isvisiblechar (Token.Name) ( (Token.Punctuation) cc (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) cc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) getchar_unlocked (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) var (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) cc (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) private (Token.Keyword) : (Token.Operator)  (Token.Text.Whitespace)        (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) isvisiblechar (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) c (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) c (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) c (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) MyPrinter (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) public (Token.Keyword) : (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) output_integer (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) putchar_unlocked (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) putchar_unlocked (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) - (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) - (Token.Operator) var (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) char (Token.Keyword.Type)   (Token.Text.Whitespace) stack (Token.Name) [ (Token.Punctuation) 32 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) stack_p (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) stack (Token.Name) [ (Token.Punctuation) stack_p (Token.Name) + (Token.Operator) + (Token.Operator) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) var (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) 10 (Token.Literal.Number.Integer) ) (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) var (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 10 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) stack_p (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) putchar_unlocked (Token.Name) ( (Token.Punctuation) stack (Token.Name) [ (Token.Punctuation) - (Token.Operator) - (Token.Operator) stack_p (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyPrinter (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) char (Token.Keyword.Type)   (Token.Text.Whitespace) c (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) putchar_unlocked (Token.Name) ( (Token.Punctuation) c (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyPrinter (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) output_integer (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) ( (Token.Punctuation) var (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyPrinter (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) var (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) output_integer (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) ( (Token.Punctuation) var (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyPrinter (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) char (Token.Keyword.Type) * (Token.Operator)   (Token.Text.Whitespace) str_p (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) * (Token.Operator) str_p (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) putchar_unlocked (Token.Name) ( (Token.Punctuation) * (Token.Operator) ( (Token.Punctuation) str_p (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyPrinter (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type) * (Token.Operator)   (Token.Text.Whitespace) str_p (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) * (Token.Operator) str_p (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) putchar_unlocked (Token.Name) ( (Token.Punctuation) * (Token.Operator) ( (Token.Punctuation) str_p (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) MyPrinter (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) string (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type) * (Token.Operator)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) . (Token.Punctuation) c_str (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type) * (Token.Operator)   (Token.Text.Whitespace) l (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) p (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) l (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) putchar_unlocked (Token.Name) ( (Token.Punctuation) * (Token.Operator) p (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) MyScanner (Token.Name)   (Token.Text.Whitespace) IN (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) MyPrinter (Token.Name)   (Token.Text.Whitespace) OUT (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) OUT (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) __gcd (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) ( (Token.Punctuation) IN (Token.Name) , (Token.Punctuation) IN (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) newl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)