# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define int long long (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator) pint (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) vint (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) pint (Token.Name) > (Token.Operator) vpint (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fi first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define se second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(v) (v).begin(),(v).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i,n) for(int i=0;i<(n);i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define reps(i,f,n) for(int i=(f);i<(n);i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++) (Token.Comment.Preproc)  (Token.Comment.Preproc) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) U (Token.Name.Class) > (Token.Operator) void (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) t (Token.Name) , (Token.Punctuation) U (Token.Name)   (Token.Text.Whitespace) f (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) t (Token.Name) > (Token.Operator) f (Token.Name) ) (Token.Punctuation) t (Token.Name) = (Token.Operator) f (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) U (Token.Name.Class) > (Token.Operator) void (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) t (Token.Name) , (Token.Punctuation) U (Token.Name)   (Token.Text.Whitespace) f (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) t (Token.Name) < (Token.Operator) f (Token.Name) ) (Token.Punctuation) t (Token.Name) = (Token.Operator) f (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name) ? (Token.Operator) gcd (Token.Name) ( (Token.Punctuation) b (Token.Name) , (Token.Punctuation) a (Token.Name) % (Token.Operator) b (Token.Name) ) (Token.Punctuation) : (Token.Operator) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) x (Token.Name) > (Token.Operator) > (Token.Operator) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) gcd (Token.Name) ( (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)