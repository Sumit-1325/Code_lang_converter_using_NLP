# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) < (Token.Operator) y (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) swap (Token.Name) ( (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) x (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) > (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) - (Token.Operator) - (Token.Operator)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) % (Token.Operator) i (Token.Name) + (Token.Operator) y (Token.Name) % (Token.Operator) i (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)