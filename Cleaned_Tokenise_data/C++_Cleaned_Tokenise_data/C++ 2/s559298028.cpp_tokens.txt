# (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define REP(i, a) for(int i=0;i<(int)a;++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) pi (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 3.141592653589793 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) r (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) L (Token.Name.Function) ( (Token.Punctuation) double (Token.Keyword.Type)   (Token.Text.Whitespace) r (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) pi (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) r (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) S (Token.Name.Function) ( (Token.Punctuation) double (Token.Keyword.Type)   (Token.Text.Whitespace) r (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) pi (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) r (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) r (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) solver (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) r (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %lf %lf (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation)   (Token.Text.Whitespace) S (Token.Name) ( (Token.Punctuation) r (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) L (Token.Name) ( (Token.Punctuation) r (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) solver (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)