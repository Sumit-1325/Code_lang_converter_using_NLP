# (Token.Comment.Preproc) import<cstdio> (Token.Comment.Preproc)  (Token.Comment.Preproc) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) b (Token.Name) , (Token.Punctuation) s (Token.Name) ; (Token.Punctuation) while (Token.Keyword) ( (Token.Punctuation) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d%d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) a (Token.Name) , (Token.Punctuation) & (Token.Operator) b (Token.Name) ) (Token.Punctuation) ! (Token.Operator) = (Token.Operator) EOF (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) a (Token.Name) + (Token.Operator) = (Token.Operator) b (Token.Name) , (Token.Punctuation) s (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) while (Token.Keyword) ( (Token.Punctuation) a (Token.Name) > (Token.Operator) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) s (Token.Name) + (Token.Operator) + (Token.Operator) , (Token.Punctuation) a (Token.Name) / (Token.Operator) = (Token.Operator) 10 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)