# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) judge (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 1000000 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 100000 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 6 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 10000 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 5 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 1000 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 4 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 100 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 3 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 10 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) j (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) [ (Token.Punctuation) 200 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) j (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) x (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) judge (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) j (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) # (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) j (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)