# (Token.Comment.Preproc) include (Token.Comment.Preproc) <stdio.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a1 (Token.Name) [ (Token.Punctuation) 200 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) b (Token.Name) [ (Token.Punctuation) 200 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) f (Token.Name) , (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) a (Token.Name) , (Token.Punctuation) g (Token.Name) , (Token.Punctuation) k (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) cin (Token.Name) > (Token.Operator) > (Token.Operator) f (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) a1 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) , (Token.Punctuation) & (Token.Operator) b (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) j (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) j (Token.Name) < (Token.Operator) i (Token.Name) ; (Token.Punctuation) j (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) a1 (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation) + (Token.Operator) b (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) g (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) ; (Token.Punctuation) g (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) & (Token.Operator) & (Token.Operator) g (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) 0 (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) a (Token.Name) / (Token.Operator) 10 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) k (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) k (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) k (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)