# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) cnt (Token.Name) , (Token.Punctuation) a (Token.Name) , (Token.Punctuation) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) std (Token.Name) : (Token.Operator) : (Token.Operator) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) > (Token.Operator) > (Token.Operator) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 10 (Token.Literal.Number.Integer) , (Token.Punctuation) cnt (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) ; (Token.Punctuation) i (Token.Name) * (Token.Operator) = (Token.Operator) 10 (Token.Literal.Number.Integer) , (Token.Punctuation) cnt (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ( (Token.Punctuation) a (Token.Name) + (Token.Operator) b (Token.Name) ) (Token.Punctuation) / (Token.Operator) i (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name) < (Token.Operator) < (Token.Operator) cnt (Token.Name) < (Token.Operator) < (Token.Operator) ' (Token.Literal.String.Char) \n (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)