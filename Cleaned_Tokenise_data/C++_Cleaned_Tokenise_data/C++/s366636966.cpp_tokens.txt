 (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cctype> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdlib> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) LL (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)    (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) VI (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)    (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) PII (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)    (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) VII (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)    (Token.Text.Whitespace) map (Token.Name) < (Token.Operator) string (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) MSI (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single) # (Token.Comment.Preproc) define ALL(a)  (a).begin(),(a).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MK make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PB push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define SZ(a) int((a).size()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define EXIST(s,e) ((s).find(e)!=(s).end()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define SORT(c) sort((c).begin(),(c).end()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define COUT(a) cout<<a<<endl (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single) # (Token.Comment.Preproc) define FOR(i,a,b) for(int i=(a);i<(b);++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REP(i,n)  FOR(i,0,n) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single) # (Token.Comment.Preproc) define dump(x)  cerr << #x << " = " << (x) << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define dumpl(c) REP(i,SZ(c))cerr<<#c<<i<<"="<<(c[i])<<endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) MOD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1000000007 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation) c (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) > (Token.Operator) > (Token.Operator) c (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) COUT (Token.Name) ( (Token.Punctuation) to_string (Token.Name) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) . (Token.Punctuation) length (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) ifdef _DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc) 	 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) endif  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)