import (Token.Keyword)   (Token.Text.Whitespace) java (Token.Name) . (Token.Punctuation) util (Token.Name) . (Token.Punctuation) * (Token.Operator) ; (Token.Punctuation) public (Token.Keyword)   (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) Main (Token.Name.Class) { (Token.Punctuation) public (Token.Keyword)   (Token.Text.Whitespace) static (Token.Keyword)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) String (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) Scanner (Token.Name)   (Token.Text.Whitespace) s (Token.Name) = (Token.Operator) new (Token.Keyword)   (Token.Text.Whitespace) Scanner (Token.Name) ( (Token.Punctuation) System (Token.Name) . (Token.Punctuation) in (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) t (Token.Name) = (Token.Operator) s (Token.Name) . (Token.Punctuation) nextInt (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) t (Token.Name) - (Token.Operator) - (Token.Operator) > (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) int (Token.Keyword.Type) [ (Token.Punctuation) ] (Token.Punctuation) l (Token.Name) = (Token.Operator) new (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type) [ (Token.Punctuation) 3 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) 3 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) l (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) s (Token.Name) . (Token.Punctuation) nextInt (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) Arrays (Token.Name) . (Token.Punctuation) sort (Token.Name) ( (Token.Punctuation) l (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) System (Token.Name) . (Token.Punctuation) out (Token.Name) . (Token.Punctuation) println (Token.Name) ( (Token.Punctuation) l (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) * (Token.Operator) l (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) + (Token.Operator) l (Token.Name) [ (Token.Punctuation) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) * (Token.Operator) l (Token.Name) [ (Token.Punctuation) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) l (Token.Name) [ (Token.Punctuation) 2 (Token.Literal.Number.Integer) ] (Token.Punctuation) * (Token.Operator) l (Token.Name) [ (Token.Punctuation) 2 (Token.Literal.Number.Integer) ] (Token.Punctuation) ? (Token.Operator) " (Token.Literal.String) YES (Token.Literal.String) " (Token.Literal.String) : (Token.Operator) " (Token.Literal.String) NO (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation) } (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)