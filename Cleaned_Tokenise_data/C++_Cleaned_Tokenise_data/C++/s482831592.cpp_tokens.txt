# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stdio.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) l (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) l (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) 200 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) " (Token.Literal.String) %d %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) a (Token.Name) , (Token.Punctuation) & (Token.Operator) b (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) j (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) true (Token.Name.Builtin)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 10 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)                 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)            (Token.Text.Whitespace) j (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)            (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) " (Token.Literal.String) %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) j (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) l (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)