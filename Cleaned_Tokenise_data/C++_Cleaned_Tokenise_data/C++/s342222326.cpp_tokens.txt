# (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define N 200 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) b (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) > (Token.Operator) > (Token.Operator) b (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) n (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) > (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) > (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) < (Token.Operator) = (Token.Operator) 1000000 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) < (Token.Operator) = (Token.Operator) 1000000 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)  	 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	  (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) + (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	  (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) a (Token.Name) > (Token.Operator) = (Token.Operator) 10 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace) 	 	 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) / (Token.Operator) 10 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  	 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) n (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  	 (Token.Text.Whitespace)  (Token.Text.Whitespace)  	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)