# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d%d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) EOF (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) c (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) + (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) cnt (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) do (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) c (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 10 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) cnt (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation) while (Token.Keyword) ( (Token.Punctuation) c (Token.Name) > (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation)   (Token.Text.Whitespace) cnt (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)