# (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <array> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) array (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) 6 (Token.Literal.Number.Integer) > (Token.Operator)   (Token.Text.Whitespace) t (Token.Name) { (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) 10 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 100 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 1000 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 10000 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 100000 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 1000000 (Token.Literal.Number.Integer) } (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) sum (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace) sum (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) result (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) find_if (Token.Name) ( (Token.Punctuation) t (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) t (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) [ (Token.Punctuation) sum (Token.Name) ] (Token.Punctuation) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) sum (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) output (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) result (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) t (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 		  (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) output (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)