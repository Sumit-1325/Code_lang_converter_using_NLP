# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stack> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <deque> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <utility> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <functional> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <sstream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdio> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdlib> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cctype> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstring> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <ctime> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <climits> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cassert> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) toInt (Token.Name.Function) ( (Token.Punctuation) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) istringstream (Token.Name)   (Token.Text.Whitespace) sin (Token.Name) ( (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) sin (Token.Name) > (Token.Operator) > (Token.Operator) v (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) toString (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) ostringstream (Token.Name)   (Token.Text.Whitespace) sout (Token.Name) ; (Token.Punctuation) sout (Token.Name) < (Token.Operator) < (Token.Operator) x (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) sout (Token.Name) . (Token.Punctuation) str (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) vi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) string (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vs (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) pii (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define ALL(a) (a).begin(),(a).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define RALL(a) (a).rbegin(),(a).rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define EXIST(s,e) ((s).find(e)!=(s).end()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR(i,a,b) for(int i=(a);i<(b);++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REP(i,n) FOR(i,0,n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define EACH(t,i,c) for(t::iterator i=(c).begin(); i!=(c).end(); ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) EPS (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e-10 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) PI (Token.Name)    (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) acos (Token.Name) ( (Token.Punctuation) -1.0 (Token.Literal.Number.Float) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) cin (Token.Name) . (Token.Punctuation) eof (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) > (Token.Operator) > (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) toString (Token.Name) ( (Token.Punctuation) a (Token.Name) + (Token.Operator) b (Token.Name) ) (Token.Punctuation) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)