 (Token.Comment.Single) # (Token.Comment.Preproc) pragma GCC optimize("Ofast") (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cassert> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstring> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stack> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <deque> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <tuple> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <climits> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdlib> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i,n) for(int i=0;i<(n);++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define reps(i,n) for(int i=1;i<=(n);++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(x) (x).begin(),(x).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pii pair<int,int> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define int int64_t (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define double long double (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Fixed fixed << setprecision(10) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define moke_pair make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) constexpr (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace) constexpr (Token.Keyword)   (Token.Text.Whitespace) int64_t (Token.Keyword.Type)   (Token.Text.Whitespace) LINF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace) constexpr (Token.Keyword)   (Token.Text.Whitespace) int64_t (Token.Keyword.Type)   (Token.Text.Whitespace) mod1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1000000007 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) constexpr (Token.Keyword)   (Token.Text.Whitespace) int64_t (Token.Keyword.Type)   (Token.Text.Whitespace) mod2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 998244353 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) constexpr (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dx (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) constexpr (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dy (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) A (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) B (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) A (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) B (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) true (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) A (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) B (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) A (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) B (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) true (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) min_heap (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) priority_queue (Token.Name) < (Token.Operator) T (Token.Name) , (Token.Punctuation) vector (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator) , (Token.Punctuation) greater (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) max_heap (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) priority_queue (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) U (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) umap (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) unordered_map (Token.Name) < (Token.Operator) T (Token.Name) , (Token.Punctuation) U (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) int64_t (Token.Keyword.Type)   (Token.Text.Whitespace) updiv (Token.Name.Function) ( (Token.Punctuation) int64_t (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation) int64_t (Token.Keyword.Type)   (Token.Text.Whitespace) d (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) d (Token.Name)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) square (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) b (Token.Name) , (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) lcm (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) nullptr (Token.Keyword) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ios_base (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) cuml (Token.Name) ( (Token.Punctuation) n (Token.Name) + (Token.Operator) 5 (Token.Literal.Number.Integer) ) (Token.Punctuation) , (Token.Punctuation) cumr (Token.Name) ( (Token.Punctuation) n (Token.Name) + (Token.Operator) 5 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cuml (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) , (Token.Punctuation) cuml (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cumr (Token.Name) [ (Token.Punctuation) n (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) - (Token.Operator) - (Token.Operator) i (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cumr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) cumr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) reps (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) cuml (Token.Name) [ (Token.Punctuation) i (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) cumr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) \n (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)