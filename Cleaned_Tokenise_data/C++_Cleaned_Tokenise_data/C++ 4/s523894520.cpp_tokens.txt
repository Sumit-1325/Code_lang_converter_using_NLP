# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cassert> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cctype> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdio> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdlib> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstring> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <ctime> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <fstream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <sstream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bitset> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <complex> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <functional> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <limits> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <numeric> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <tuple> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <utility> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <array> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <deque> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <forward_list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stack> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define popcount __builtin_popcountll (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FORS(i, s, n) for (int i = (s); i < (n); ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR(i, n) FORS(i, 0, n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FI(n) FOR(i, n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ALL(x) (x).begin(), (x).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define RALL(x) (x).rbegin(), (x).rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MP(x,y) make_pair((x),(y)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PB(x) push_back((x)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define SZ(c) int((c).size()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR_SETTED_BIT(bit, mask) for (int bit = 0; (mask) >> bit; ++bit) if (1&(mask >> bit)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR_NONZERO_SUBMASK(submask, mask) for (int submask=(mask); submask; submask=(submask-1)&(mask)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PI (3.141592653589793L) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MODULO ((ll)1e9+7LL) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) pi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) pll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) ld (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ld (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) pld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) vi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) ld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) pi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vpi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) pll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vpll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) pld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vpld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) list (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) li (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) list (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) lll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) list (Token.Name) < (Token.Operator) ld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) lld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) list (Token.Name) < (Token.Operator) pi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) lpi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) list (Token.Name) < (Token.Operator) pll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) lpll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) list (Token.Name) < (Token.Operator) pld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) lpld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vpi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvpi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vpll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvpll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vpld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvpld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) li (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vli (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) lll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vlll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) lld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vlld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) lpi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vlpi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) lpll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vlpll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) lpld (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vlpld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) si (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) sll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) pi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) spi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) pll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) spll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator)   (Token.Text.Whitespace) list (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) AdjacencyLists (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vvll (Token.Name)   (Token.Text.Whitespace) AdjacencyMatrix (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) sqr (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) sqr (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) sqr (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) T (Token.Name)   (Token.Text.Whitespace) binpow (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) sqr (Token.Name) ( (Token.Punctuation) binpow (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation) * (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) binpow (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) modulo (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) sqr (Token.Name) ( (Token.Punctuation) binpow (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) modulo (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) modulo (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) modulo (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) y (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x1 (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) d (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) b (Token.Name) % (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x1 (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y1 (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) y1 (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) b (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) x1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) d (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) phi (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) result (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 2 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) * (Token.Operator) i (Token.Name) < (Token.Operator) = (Token.Operator) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) result (Token.Name)   (Token.Text.Whitespace) - (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) result (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) result (Token.Name)   (Token.Text.Whitespace) - (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) result (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) result (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) vll (Token.Name)   (Token.Text.Whitespace) inverseAll (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) m (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vll (Token.Name)   (Token.Text.Whitespace) r (Token.Name.Function) ( (Token.Punctuation) m (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) r (Token.Name) [ (Token.Punctuation) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 2 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) < (Token.Operator) m (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) r (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) m (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) m (Token.Name) / (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) r (Token.Name) [ (Token.Punctuation) m (Token.Name) % (Token.Operator) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) m (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) m (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) r (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) lcm (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) llrand (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) lsbToFill (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) sizeof (Token.Keyword) ( (Token.Punctuation) ll (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 3 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) bitsFilledInIteration (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) popcount (Token.Name) ( (Token.Punctuation) RAND_MAX (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) number (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) lsbFilled (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) lsbFilled (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) lsbToFill (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) lsbFilled (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) bitsFilledInIteration (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) number (Token.Name)   (Token.Text.Whitespace) ^ (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) ( (Token.Punctuation) ( (Token.Punctuation) ll (Token.Name) ) (Token.Punctuation) rand (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) lsbFilled (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) number (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) numeric_limits (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) : (Token.Operator) : (Token.Operator) max (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) llrand (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) begin (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) end (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) begin (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) llrand (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) end (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) begin (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) Dinic (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) Edge (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) u (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) cap (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) flow (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) Edge (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) Edge (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) u (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) cap (Token.Name) ) (Token.Punctuation) : (Token.Operator)   (Token.Text.Whitespace) u (Token.Name) ( (Token.Punctuation) u (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) ( (Token.Punctuation) v (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) cap (Token.Name) ( (Token.Punctuation) cap (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) flow (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) Edge (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) E (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) g (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) pt (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) Dinic (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) ) (Token.Punctuation) : (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ( (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) E (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) g (Token.Name) ( (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) d (Token.Name) ( (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) pt (Token.Name) ( (Token.Punctuation) N (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) AddEdge (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) u (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) cap (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) u (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) E (Token.Name) . (Token.Punctuation) emplace_back (Token.Name) ( (Token.Punctuation) Edge (Token.Name) ( (Token.Punctuation) u (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) cap (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) g (Token.Name) [ (Token.Punctuation) u (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) emplace_back (Token.Name) ( (Token.Punctuation) E (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) E (Token.Name) . (Token.Punctuation) emplace_back (Token.Name) ( (Token.Punctuation) Edge (Token.Name) ( (Token.Punctuation) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) u (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) g (Token.Name) [ (Token.Punctuation) v (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) emplace_back (Token.Name) ( (Token.Punctuation) E (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) BFS (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) S (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) T (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) queue (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) ( (Token.Punctuation) { (Token.Punctuation) S (Token.Name) } (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) fill (Token.Name) ( (Token.Punctuation) d (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) d (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) N (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) S (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) q (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) u (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) u (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) T (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) k (Token.Name) : (Token.Operator)   (Token.Text.Whitespace) g (Token.Name) [ (Token.Punctuation) u (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) Edge (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) e (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) E (Token.Name) [ (Token.Punctuation) k (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) e (Token.Name) . (Token.Punctuation) flow (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) e (Token.Name) . (Token.Punctuation) cap (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) e (Token.Name) . (Token.Punctuation) v (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) e (Token.Name) . (Token.Punctuation) u (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) e (Token.Name) . (Token.Punctuation) v (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) e (Token.Name) . (Token.Punctuation) u (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) emplace (Token.Name) ( (Token.Punctuation) e (Token.Name) . (Token.Punctuation) v (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) T (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) N (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) DFS (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) u (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) flow (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) u (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) | (Token.Operator) | (Token.Operator)   (Token.Text.Whitespace) flow (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) flow (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) & (Token.Operator) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pt (Token.Name) [ (Token.Punctuation) u (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) g (Token.Name) [ (Token.Punctuation) u (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) Edge (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) e (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) E (Token.Name) [ (Token.Punctuation) g (Token.Name) [ (Token.Punctuation) u (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) Edge (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) oe (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) E (Token.Name) [ (Token.Punctuation) g (Token.Name) [ (Token.Punctuation) u (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ^ (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) d (Token.Name) [ (Token.Punctuation) e (Token.Name) . (Token.Punctuation) v (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) e (Token.Name) . (Token.Punctuation) u (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) amt (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) e (Token.Name) . (Token.Punctuation) cap (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) e (Token.Name) . (Token.Punctuation) flow (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) flow (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) amt (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) flow (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) amt (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) flow (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) pushed (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) DFS (Token.Name) ( (Token.Punctuation) e (Token.Name) . (Token.Punctuation) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) amt (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) e (Token.Name) . (Token.Punctuation) flow (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pushed (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) oe (Token.Name) . (Token.Punctuation) flow (Token.Name)   (Token.Text.Whitespace) - (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pushed (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) pushed (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) MaxFlow (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) S (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) T (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) total (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) BFS (Token.Name) ( (Token.Punctuation) S (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) fill (Token.Name) ( (Token.Punctuation) pt (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) pt (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) flow (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) DFS (Token.Name) ( (Token.Punctuation) S (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) total (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) flow (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) total (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) vll (Token.Name)   (Token.Text.Whitespace) Dijkstra (Token.Name.Function) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) AdjacencyLists (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) g (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vll (Token.Name)   (Token.Text.Whitespace) d (Token.Name) ( (Token.Punctuation) SZ (Token.Name) ( (Token.Punctuation) g (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) numeric_limits (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) : (Token.Operator) : (Token.Operator) max (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) priority_queue (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) s (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) emplace (Token.Name) ( (Token.Punctuation) -0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ! (Token.Operator) q (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) q (Token.Name) . (Token.Punctuation) top (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) . (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) q (Token.Name) . (Token.Punctuation) top (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) . (Token.Punctuation) second (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) v (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) top (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) . (Token.Punctuation) second (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) & (Token.Operator) cw (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) g (Token.Name) [ (Token.Punctuation) v (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) d (Token.Name) [ (Token.Punctuation) v (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) cw (Token.Name) . (Token.Punctuation) second (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) cw (Token.Name) . (Token.Punctuation) first (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) cw (Token.Name) . (Token.Punctuation) first (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) [ (Token.Punctuation) v (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) cw (Token.Name) . (Token.Punctuation) second (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) emplace (Token.Name) ( (Token.Punctuation) - (Token.Operator) d (Token.Name) [ (Token.Punctuation) cw (Token.Name) . (Token.Punctuation) first (Token.Name) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) cw (Token.Name) . (Token.Punctuation) first (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) d (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) BinarySearchIterator (Token.Name.Class)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) public (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) iterator (Token.Name) < (Token.Operator) std (Token.Name) : (Token.Operator) : (Token.Operator) forward_iterator_tag (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) bool (Token.Keyword.Type) > (Token.Operator)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) value (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) iterator_traits (Token.Name.Class) < (Token.Operator) BinarySearchIterator (Token.Name) > (Token.Operator) : (Token.Operator) : (Token.Operator) difference_type (Token.Name)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) BinarySearchIterator (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) it (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) value (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) it (Token.Name) . (Token.Punctuation) value (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) BinarySearchIterator (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) value (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) * (Token.Operator) this (Token.Keyword) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) BinarySearchIterator (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) it (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) value (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) it (Token.Name) . (Token.Punctuation) value (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) operator (Token.Keyword) * (Token.Operator) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ALPHA (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)  (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) AhoCorasick (Token.Name.Class)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) public (Token.Keyword) : (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) static (Token.Keyword)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ILLEGAL_INDEX (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) static (Token.Keyword)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ROOT (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) Node (Token.Name.Class)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) leaf (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) parent (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) parentCharacter (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) link (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) next (Token.Name) [ (Token.Punctuation) ALPHA (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) go (Token.Name) [ (Token.Punctuation) ALPHA (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) outputFunction (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) Node (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) parent (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ILLEGAL_INDEX (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) parentCharacter (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ALPHA (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) : (Token.Operator)  (Token.Text.Whitespace)              (Token.Text.Whitespace) leaf (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) ( (Token.Punctuation) parent (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parentCharacter (Token.Name) ( (Token.Punctuation) parentCharacter (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) link (Token.Name) ( (Token.Punctuation) ILLEGAL_INDEX (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) outputFunction (Token.Name) ( (Token.Punctuation) ILLEGAL_INDEX (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) fill_n (Token.Name) ( (Token.Punctuation) next (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ALPHA (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ILLEGAL_INDEX (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) fill_n (Token.Name) ( (Token.Punctuation) go (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ALPHA (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ILLEGAL_INDEX (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) Node (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) Node (Token.Name) > (Token.Operator) ( (Token.Punctuation) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) AhoCorasick (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) AhoCorasick (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) maxStatesNumber (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) tree (Token.Name) . (Token.Punctuation) reserve (Token.Name) ( (Token.Punctuation) maxStatesNumber (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) Iterator (Token.Name.Class)   (Token.Text.Whitespace) > (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) add (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) length (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) Iterator (Token.Name)   (Token.Text.Whitespace) begin (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ROOT (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) length (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ILLEGAL_INDEX (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) next (Token.Name) [ (Token.Punctuation) begin (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) next (Token.Name) [ (Token.Punctuation) begin (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) SZ (Token.Name) ( (Token.Punctuation) tree (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) Node (Token.Name) ( (Token.Punctuation) vertex (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) begin (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) next (Token.Name) [ (Token.Punctuation) begin (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) leaf (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) getLink (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) vertex (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ILLEGAL_INDEX (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) link (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ROOT (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) | (Token.Operator) | (Token.Operator)   (Token.Text.Whitespace) ROOT (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) parent (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) link (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ROOT (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) link (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) go (Token.Name) ( (Token.Punctuation) getLink (Token.Name) ( (Token.Punctuation) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) parent (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) parentCharacter (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) link (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) go (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) vertex (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) character (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) character (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) character (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) ALPHA (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ILLEGAL_INDEX (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) go (Token.Name) [ (Token.Punctuation) character (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ILLEGAL_INDEX (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) next (Token.Name) [ (Token.Punctuation) character (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) go (Token.Name) [ (Token.Punctuation) character (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ROOT (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) ROOT (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) go (Token.Name) ( (Token.Punctuation) getLink (Token.Name) ( (Token.Punctuation) vertex (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) character (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) go (Token.Name) [ (Token.Punctuation) character (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) next (Token.Name) [ (Token.Punctuation) character (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) go (Token.Name) [ (Token.Punctuation) character (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) getOutputFunction (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) vertex (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ILLEGAL_INDEX (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) outputFunction (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) leaf (Token.Name)   (Token.Text.Whitespace) | (Token.Operator) | (Token.Operator)   (Token.Text.Whitespace) ROOT (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) outputFunction (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vertex (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) outputFunction (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) getOutputFunction (Token.Name) ( (Token.Punctuation) getLink (Token.Name) ( (Token.Punctuation) vertex (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) vertex (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) outputFunction (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ALPHA (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) AhoCorasick (Token.Name) < (Token.Operator) ALPHA (Token.Name) > (Token.Operator) : (Token.Operator) : (Token.Operator) ILLEGAL_INDEX (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ALPHA (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) AhoCorasick (Token.Name) < (Token.Operator) ALPHA (Token.Name) > (Token.Operator) : (Token.Operator) : (Token.Operator) ROOT (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) UnionFind (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vi (Token.Name)   (Token.Text.Whitespace) parent (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vi (Token.Name)   (Token.Text.Whitespace) rank (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) UnionFind (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) rank (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) find_set (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) v (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) v (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) v (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) find_set (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) parent (Token.Name) [ (Token.Punctuation) v (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) union_sets (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) find_set (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) find_set (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) rank (Token.Name) [ (Token.Punctuation) a (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) b (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) swap (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) b (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) rank (Token.Name) [ (Token.Punctuation) a (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) b (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) rank (Token.Name) [ (Token.Punctuation) a (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) argc (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) argv (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ios (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) srand (Token.Name) ( (Token.Punctuation) ( (Token.Punctuation) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type) ) (Token.Punctuation) time (Token.Name) ( (Token.Punctuation) NULL (Token.Name.Builtin) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) vll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) FI (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) m1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) min (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) FORS (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) m1 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) m1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) m1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) m2 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) FI (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) m1 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) m1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)