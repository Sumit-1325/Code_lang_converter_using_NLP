# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)    (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation) j (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) max (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) max2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) N (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) N (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) comp (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) max (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) max (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) max (Token.Name)    (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) max2 (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) j (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) max (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) j (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) max2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) max (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) max2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) j (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) max2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) max (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) max2 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) max (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)