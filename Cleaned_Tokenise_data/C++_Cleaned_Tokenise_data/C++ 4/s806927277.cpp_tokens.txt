# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)   (Token.Comment.Single)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) comparejobs (Token.Name.Function) ( (Token.Punctuation) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) j1 (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) j2 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) j1 (Token.Name) . (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) j2 (Token.Name) . (Token.Punctuation) first (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) j1 (Token.Name) . (Token.Punctuation) second (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) j2 (Token.Name) . (Token.Punctuation) second (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) j1 (Token.Name) . (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) j2 (Token.Name) . (Token.Punctuation) first (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) Numbs (Token.Name) ( (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) t1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) m1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) ind1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) t1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) Numbs (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) t1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) m1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) t1 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) m1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) t1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ind1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) Numbs (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ind1 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) Numbs (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ind1 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) m1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword) { (Token.Punctuation) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) m2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)