# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define int long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fastio ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define mod 1e9 (Token.Comment.Preproc)  (Token.Comment.Preproc) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) 100005 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) b (Token.Name) [ (Token.Punctuation) 100005 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int32_t (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) n (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) { (Token.Punctuation) 	 (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) b (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation) a (Token.Name) + (Token.Operator) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) n (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) b (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -2 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 						 (Token.Text.Whitespace)  (Token.Text.Whitespace)