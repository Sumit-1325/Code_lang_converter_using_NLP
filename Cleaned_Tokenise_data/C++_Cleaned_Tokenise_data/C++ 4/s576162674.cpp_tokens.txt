# (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) _ (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 200005 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) _ (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) B (Token.Name) [ (Token.Punctuation) _ (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) fm (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) sm (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) B (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) > (Token.Operator) fm (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) fm (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) B (Token.Name) , (Token.Punctuation) B (Token.Name) + (Token.Operator) N (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) f (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) B (Token.Name) [ (Token.Punctuation) N (Token.Name) -2 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) fm (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) f (Token.Name) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) id (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) B (Token.Name) [ (Token.Punctuation) id (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) fm (Token.Name) & (Token.Operator) & (Token.Operator) id (Token.Name) > (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) id (Token.Name) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) B (Token.Name) [ (Token.Punctuation) id (Token.Name) ] (Token.Punctuation) ! (Token.Operator) = (Token.Operator) fm (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) sm (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) B (Token.Name) [ (Token.Punctuation) id (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) < (Token.Operator) fm (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) fm (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword)  (Token.Text.Whitespace)         (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) f (Token.Name) = (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) fm (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword)  (Token.Text.Whitespace)             (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) sm (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace)  (Token.Text.Whitespace)         (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)         (Token.Text.Whitespace)  (Token.Text.Whitespace)     (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)