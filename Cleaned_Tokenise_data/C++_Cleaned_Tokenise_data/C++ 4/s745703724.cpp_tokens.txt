# (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <cstdlib> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <cstdint> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i, n) for(int i = 0; i < (int)(n); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep_r(i, n) for(int i = n-1; i >= 0; i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep1(i, n) for(int i = 1; i <= (int)(n); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(x) (x).begin(),(x).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define SZ(x) ((ll)(x).size()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define bit(n) (1LL<<(n)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define UNIQUE(v) v.erase( unique(v.begin(), v.end()), v.end() ); (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define INF bit(60) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mod 1000000007 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) < (Token.Operator) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) b (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) b (Token.Name) < (Token.Operator) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) b (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) uif (Token.Name) = (Token.Operator) uint_fast64_t (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name) = (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) qp (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) ans (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) do (Token.Keyword) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) b (Token.Name) & (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ans (Token.Name) = (Token.Operator) 1l (Token.Literal.Number.Float) l (Token.Name) * (Token.Operator) ans (Token.Name) * (Token.Operator) a (Token.Name) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation) a (Token.Name) = (Token.Operator) 1l (Token.Literal.Number.Float) l (Token.Name) * (Token.Operator) a (Token.Name) * (Token.Operator) a (Token.Name) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation) } (Token.Punctuation) while (Token.Keyword) ( (Token.Punctuation) b (Token.Name) > (Token.Operator) > (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) ans (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) qp (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) mo (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) ans (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) do (Token.Keyword) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) b (Token.Name) & (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ans (Token.Name) = (Token.Operator) 1l (Token.Literal.Number.Float) l (Token.Name) * (Token.Operator) ans (Token.Name) * (Token.Operator) a (Token.Name) % (Token.Operator) mo (Token.Name) ; (Token.Punctuation) a (Token.Name) = (Token.Operator) 1l (Token.Literal.Number.Float) l (Token.Name) * (Token.Operator) a (Token.Name) * (Token.Operator) a (Token.Name) % (Token.Operator) mo (Token.Name) ; (Token.Punctuation) } (Token.Punctuation) while (Token.Keyword) ( (Token.Punctuation) b (Token.Name) > (Token.Operator) > (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) ans (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name) ? (Token.Operator) gcd (Token.Name) ( (Token.Punctuation) b (Token.Name) , (Token.Punctuation) a (Token.Name) % (Token.Operator) b (Token.Name) ) (Token.Punctuation) : (Token.Operator) a (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dx (Token.Name) [ (Token.Punctuation) 4 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dy (Token.Name) [ (Token.Punctuation) 4 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) { (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define FACSIZE 2002 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) invfac (Token.Name) [ (Token.Punctuation) FACSIZE (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) fac (Token.Name) [ (Token.Punctuation) FACSIZE (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_pow (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_add (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_mul (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_div (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_fact (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_invfact (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) void (Token.Keyword.Type) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) multiset (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) ms (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ms (Token.Name) . (Token.Punctuation) insert (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name) : (Token.Operator) a (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) itr (Token.Name) = (Token.Operator) lower_bound (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) begin (Token.Name) ( (Token.Punctuation) ms (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ms (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ms (Token.Name) . (Token.Punctuation) erase (Token.Name) ( (Token.Punctuation) itr (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) * (Token.Operator) max_element (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) begin (Token.Name) ( (Token.Punctuation) ms (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ms (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ms (Token.Name) . (Token.Punctuation) insert (Token.Name) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_pow (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) r (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) r (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) r (Token.Name) = (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) r (Token.Name) % (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) t (Token.Name) = (Token.Operator) mod_pow (Token.Name) ( (Token.Punctuation) x (Token.Name) , (Token.Punctuation) r (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) t (Token.Name) * (Token.Operator) t (Token.Name)   (Token.Text.Whitespace) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) t (Token.Name) = (Token.Operator) mod_pow (Token.Name) ( (Token.Punctuation) x (Token.Name) , (Token.Punctuation) r (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) k (Token.Name) = (Token.Operator)   (Token.Text.Whitespace) t (Token.Name) * (Token.Operator) t (Token.Name)   (Token.Text.Whitespace) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) k (Token.Name) * (Token.Operator) x (Token.Name) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_add (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) + (Token.Operator) b (Token.Name) ) (Token.Punctuation) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_mul (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) * (Token.Operator) b (Token.Name) ) (Token.Punctuation) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_div (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) mod_mul (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation) mod_pow (Token.Name) ( (Token.Punctuation) b (Token.Name) , (Token.Punctuation) mod (Token.Name) -2 (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_fact (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) fac (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) fac (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) mod_mul (Token.Name) ( (Token.Punctuation) fac (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) , (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)    (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_invfact (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) invfac (Token.Name) [ (Token.Punctuation) n (Token.Name) ] (Token.Punctuation) = (Token.Operator)   (Token.Text.Whitespace) mod_pow (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) fac (Token.Name) [ (Token.Punctuation) n (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) , (Token.Punctuation) mod (Token.Name) -2 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) n (Token.Name) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) > (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) - (Token.Operator) - (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) invfac (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) mod_mul (Token.Name) ( (Token.Punctuation) invfac (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)