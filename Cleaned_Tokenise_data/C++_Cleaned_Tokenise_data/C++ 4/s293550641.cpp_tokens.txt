# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation) arr (Token.Name) [ (Token.Punctuation) 200 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) < (Token.Operator) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) < (Token.Operator) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name) = (Token.Operator) = (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) as: (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name) = (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) > (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 2 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 2 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) = (Token.Operator) = (Token.Operator) ( (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) > (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) -2 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) -2 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) > (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)