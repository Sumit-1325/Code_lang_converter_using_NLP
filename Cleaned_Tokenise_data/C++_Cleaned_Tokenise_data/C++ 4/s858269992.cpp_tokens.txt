# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i,N) for(int i=0;i<N;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) A (Token.Name) ( (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) B (Token.Name) = (Token.Operator) A (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) B (Token.Name) . (Token.Punctuation) rbegin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation) B (Token.Name) . (Token.Punctuation) rend (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) N (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) B (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) B (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) a (Token.Name) = (Token.Operator) B (Token.Name) [ (Token.Punctuation) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) a (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)