 (Token.Comment.Single) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define endl "\n" (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define lli long long int (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) lli (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)   	 (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)   	 (Token.Text.Whitespace) lli (Token.Name)   (Token.Text.Whitespace) p (Token.Name) , (Token.Punctuation) ma (Token.Name) = (Token.Operator) -999999 (Token.Literal.Number.Integer) , (Token.Punctuation) sma (Token.Name) = (Token.Operator) -999999 (Token.Literal.Number.Integer) , (Token.Punctuation) k (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) lli (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) ar (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)   	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) lli (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) n (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)       	 (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) p (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ar (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)       	 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) p (Token.Name) > (Token.Operator) ma (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           	 (Token.Text.Whitespace) ma (Token.Name) = (Token.Operator) p (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) k (Token.Name) = (Token.Operator) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       	 (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) lli (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) n (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) > (Token.Operator) sma (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) sma (Token.Name) < (Token.Operator) ma (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) sma (Token.Name) = (Token.Operator) ar (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) sma (Token.Name) < (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) sma (Token.Name) = (Token.Operator) ma (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)   	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) lli (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) n (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)       	 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ma (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           	 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) sma (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       	 (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           	 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) ma (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)