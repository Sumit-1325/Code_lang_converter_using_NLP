# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace)  (Token.Comment.Single) # (Token.Comment.Preproc) if DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) debug (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) value (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cerr (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) value (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) Ts (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) debug (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) value (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Ts (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) args (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cerr (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) value (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ,  (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) debug (Token.Name) ( (Token.Punctuation) args (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define dbg(...)                              \ (Token.Comment.Preproc)  (Token.Comment.Preproc)   do {                                        \ (Token.Comment.Preproc)  (Token.Comment.Preproc)     cerr << #__VA_ARGS__ << ": ";             \ (Token.Comment.Preproc)  (Token.Comment.Preproc)     debug(__VA_ARGS__);                       \ (Token.Comment.Preproc)  (Token.Comment.Preproc)     cerr << " (L" << __LINE__ << ")" << endl; \ (Token.Comment.Preproc)  (Token.Comment.Preproc)   } while (0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define dbg(...) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) read_from_cin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) Ts (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) read_from_cin (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) value (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Ts (Token.Name) & (Token.Operator) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) args (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) value (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) read_from_cin (Token.Name) ( (Token.Punctuation) args (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define in(type, ...) \ (Token.Comment.Preproc)  (Token.Comment.Preproc)   type __VA_ARGS__;   \ (Token.Comment.Preproc)  (Token.Comment.Preproc)   read_from_cin(__VA_ARGS__); (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) write_to_cout (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) value (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) value (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) Ts (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) write_to_cout (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) value (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) Ts (Token.Name) & (Token.Operator) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) args (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) value (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char)   (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) write_to_cout (Token.Name) ( (Token.Punctuation) args (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define out(...) write_to_cout(__VA_ARGS__); (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define all(x) (x).begin(), (x).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i, n) for (int i = 0; i < (int)(n); ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) multiset (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) greater (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) insert (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) erase (Token.Name) ( (Token.Punctuation) s (Token.Name) . (Token.Punctuation) find (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) * (Token.Operator) s (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) insert (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)