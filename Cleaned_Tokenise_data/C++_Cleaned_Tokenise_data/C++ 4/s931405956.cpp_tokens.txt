# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) int32 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) int_fast32_t (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) int64 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) int_fast64_t (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int32 (Token.Name)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e9 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int32 (Token.Name)   (Token.Text.Whitespace) MOD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e9 (Token.Literal.Number.Float) + (Token.Operator) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int64 (Token.Name)   (Token.Text.Whitespace) LLINF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e18 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define YES(n) cout << ((n) ? "YES\n" : "NO\n"  ) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Yes(n) cout << ((n) ? "Yes\n" : "No\n"  ) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ANS(n) cout << (n) << "\n" (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REP(i,n) for(int64 i=0;i<(n);++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR(i,a,b) for(int64 i=(a);i<(b);i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FORR(i,a,b) for(int64 i=(a);i>=(b);i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ALL(obj) (obj).begin(),(obj).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pii pair<int32,int32> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pll pair<int64,int64> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb(a) push_back(a) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ios (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int32 (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) pii (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) REP (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int32 (Token.Name)   (Token.Text.Whitespace) ai (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) ai (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pii (Token.Name) ( (Token.Punctuation) ai (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) ALL (Token.Name) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) greater (Token.Name) < (Token.Operator) pii (Token.Name) > (Token.Operator) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) REP (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) REP (Token.Name) ( (Token.Punctuation) j (Token.Name) , (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) second (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)