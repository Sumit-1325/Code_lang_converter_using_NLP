# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define ll long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define f first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define s second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define go ios::sync_with_stdio(0); cin.tie(0); cout.tie(0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mem(arr,v) memset(arr,v,sizeof(arr)) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) arr (Token.Name) [ (Token.Punctuation) 2000005 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) arr2 (Token.Name) [ (Token.Punctuation) 2000005 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) t (Token.Name) , (Token.Punctuation) mx (Token.Name) = (Token.Operator) INT_MIN (Token.Name) , (Token.Punctuation) cnt (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) t (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) t (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) arr2 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) > (Token.Operator) mx (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)               (Token.Text.Whitespace) cnt (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)               (Token.Text.Whitespace) mx (Token.Name) = (Token.Operator) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) mx (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)               (Token.Text.Whitespace) cnt (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) arr2 (Token.Name) , (Token.Punctuation) arr2 (Token.Name) + (Token.Operator) t (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) cnt (Token.Name) > (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) t (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)               (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) mx (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)       (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace)  (Token.Comment.Single)           (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) t (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)               (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) arr (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) mx (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) arr2 (Token.Name) [ (Token.Punctuation) t (Token.Name) -2 (Token.Literal.Number.Integer) ] (Token.Punctuation) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)               (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)               (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) mx (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)