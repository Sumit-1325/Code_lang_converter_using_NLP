# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) 200010 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) max (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) max_ind (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) max2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) max (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) max_ind (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) max2 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) max2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) max_ind (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)