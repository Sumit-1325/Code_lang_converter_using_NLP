# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)   (Token.Comment.Single)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define int long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define quickie ios_base::sync_with_stdio(false); cin.tie(NULL); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i, a, b) for(int i=a; i<b; i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep1(i, a, b) for(int i=a; i<=b; i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repp(i, a, b) for(int i=b-1; i>=a; i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fi first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define se second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define SZ(x) ((int)(x).size()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define db double (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mi map<int, int> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mc map<char, int> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ms map<string, int> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define vi vector<int> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define qi queue<int> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MI(x) power(x, mod-2) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define test int t; cin >> t; (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Comment.Single) # (Token.Comment.Preproc) define mod 998244353  (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) power (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) quickie (Token.Name)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) n (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) mx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vi (Token.Name)   (Token.Text.Whitespace) v (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) mx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) mx (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) insert (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) v (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) mx (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) : (Token.Operator) : (Token.Operator) iterator (Token.Name)   (Token.Text.Whitespace) lower (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) lower (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) lower_bound (Token.Name) ( (Token.Punctuation) v (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) mx (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) u (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) lower (Token.Name) - (Token.Operator) v (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) u (Token.Name) - (Token.Operator) - (Token.Operator)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) mx (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) u (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) mx (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) power (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) res (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) res (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) res (Token.Name) * (Token.Operator) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) > (Token.Operator) > (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name) * (Token.Operator) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) res (Token.Name) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) b (Token.Name) % (Token.Operator) a (Token.Name) , (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)