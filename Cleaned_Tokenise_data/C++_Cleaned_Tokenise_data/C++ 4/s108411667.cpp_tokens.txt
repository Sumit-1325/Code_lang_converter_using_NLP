 (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdio> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstring> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bitset> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <deque> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <complex> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <random> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cassert> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <fstream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <utility> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <functional> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define popcount __builtin_popcount (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i,x) for(long long i=0;i<x;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repn(i,x) for(long long i=1;i<=x;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rrep(i,x) for(long long i=x-1;i>=0;i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rrepn(i,x) for(long long i=x;i>1;i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REP(i,n,x) for(long long i=n;i<x;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REPN(i,n,x) for(long long i=n+1;i<x;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define pr printf (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define re return (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mod 1000000007 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Comment.Single) # (Token.Comment.Preproc) define INF 1e18+5 (Token.Comment.Preproc)  (Token.Comment.Single) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) PI (Token.Name) = (Token.Operator) 3.14159265358979323846 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define fi first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define se second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MAX(a,b) (((a)>(b))?(a):(b)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MIN(a,b) (((a)<(b))?(a):(b)) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) P (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) vector (Token.Name) < (Token.Operator) pair (Token.Name) < (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) prime_factorize (Token.Name) ( (Token.Punctuation) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) pair (Token.Name) < (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) p (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) num (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) num (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) p (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) res (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) make_pair (Token.Name) ( (Token.Punctuation) p (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) num (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) res (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) make_pair (Token.Name) ( (Token.Punctuation) n (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) vector (Token.Name) < (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) calc_divisor (Token.Name) ( (Token.Punctuation) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) * (Token.Operator) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) res (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) j (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) j (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) res (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) j (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) res (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) res (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) y (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) ret (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) int (Token.Keyword.Type)   (Token.Text.Whitespace) lcm (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) int (Token.Keyword.Type)   (Token.Text.Whitespace) lcm (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) lcm (Token.Name) ( (Token.Punctuation) ret (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) vector (Token.Name) < (Token.Operator) pair (Token.Name) < (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) , (Token.Punctuation) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) g (Token.Name) [ (Token.Punctuation) 200020 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) 200020 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) used (Token.Name) [ (Token.Punctuation) 200020 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) dp (Token.Name) [ (Token.Punctuation) 100005 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ios (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) A (Token.Name) , (Token.Punctuation) B (Token.Name) , (Token.Punctuation) C (Token.Name) , (Token.Punctuation) H (Token.Name) , (Token.Punctuation) K (Token.Name) , (Token.Punctuation) M (Token.Name) , (Token.Punctuation) N (Token.Name) , (Token.Punctuation) Q (Token.Name) , (Token.Punctuation) T (Token.Name) , (Token.Punctuation) W (Token.Name) , (Token.Punctuation) X (Token.Name) , (Token.Punctuation) Y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) dA (Token.Name) , (Token.Punctuation) dB (Token.Name) , (Token.Punctuation) dC (Token.Name) , (Token.Punctuation) dH (Token.Name) , (Token.Punctuation) dK (Token.Name) , (Token.Punctuation) dM (Token.Name) , (Token.Punctuation) dN (Token.Name) , (Token.Punctuation) dQ (Token.Name) , (Token.Punctuation) dT (Token.Name) , (Token.Punctuation) dW (Token.Name) , (Token.Punctuation) dX (Token.Name) , (Token.Punctuation) dY (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ans (Token.Name) , (Token.Punctuation) sum (Token.Name) , (Token.Punctuation) cnt (Token.Name) , (Token.Punctuation) cnt1 (Token.Name) , (Token.Punctuation) flg (Token.Name) , (Token.Punctuation) flg1 (Token.Name) , (Token.Punctuation) flg2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) max (Token.Name) , (Token.Punctuation) max1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) min (Token.Name) , (Token.Punctuation) min1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) wk (Token.Name) , (Token.Punctuation) wk1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) max (Token.Name) = (Token.Operator) max1 (Token.Name) = (Token.Operator) min (Token.Name) = (Token.Operator) min1 (Token.Name) = (Token.Operator) wk (Token.Name) = (Token.Operator) wk1 (Token.Name) = (Token.Operator) sum (Token.Name) = (Token.Operator) ans (Token.Name) = (Token.Operator) cnt (Token.Name) = (Token.Operator) cnt1 (Token.Name) = (Token.Operator) flg (Token.Name) = (Token.Operator) flg1 (Token.Name) = (Token.Operator) flg2 (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) dwk (Token.Name) , (Token.Punctuation) dwk1 (Token.Name) , (Token.Punctuation) dsum (Token.Name) , (Token.Punctuation) dsum1 (Token.Name) , (Token.Punctuation) dans (Token.Name) , (Token.Punctuation) dans1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) dwk (Token.Name) = (Token.Operator) dwk1 (Token.Name) = (Token.Operator) dsum (Token.Name) = (Token.Operator) dsum1 (Token.Name) = (Token.Operator) dans (Token.Name) = (Token.Operator) dans1 (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) map (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) greater (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) mp (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) v (Token.Name) ( (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) mp (Token.Name) [ (Token.Punctuation) v (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ] (Token.Punctuation) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) max2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) p (Token.Name) : (Token.Operator) mp (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) p (Token.Name) . (Token.Punctuation) se (Token.Name) = (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) flg (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) flg (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) max (Token.Name) = (Token.Operator) p (Token.Name) . (Token.Punctuation) fi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) flg (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) p (Token.Name) . (Token.Punctuation) se (Token.Name) > (Token.Operator) = (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) max (Token.Name) = (Token.Operator) p (Token.Name) . (Token.Punctuation) fi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) max2 (Token.Name) = (Token.Operator) p (Token.Name) . (Token.Punctuation) fi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) N (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) max (Token.Name) = (Token.Operator) = (Token.Operator) v (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) flg (Token.Name) = (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) pr (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %lld (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) max2 (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) pr (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %lld (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) max (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) re (Token.Name)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace)  (Token.Comment.Single) 		 (Token.Text.Whitespace)  (Token.Comment.Single)     	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single) 	 (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) re (Token.Name)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)