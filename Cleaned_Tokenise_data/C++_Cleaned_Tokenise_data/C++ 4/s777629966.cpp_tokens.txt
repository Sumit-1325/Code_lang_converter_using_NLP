# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) ios_base (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) X (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) MAX_LEFT (Token.Name) [ (Token.Punctuation) 200009 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) MAX_RIGHT (Token.Name) [ (Token.Punctuation) 200009 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) 200009 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) MAX_LEFT (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) MAX_LEFT (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) MAX_LEFT (Token.Name) [ (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) MAX_RIGHT (Token.Name) [ (Token.Punctuation) N (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1e9 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator) - (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) MAX_RIGHT (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) MAX_RIGHT (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) MAX_RIGHT (Token.Name) [ (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) A (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) N (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) MAX_LEFT (Token.Name) [ (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) MAX_RIGHT (Token.Name) [ (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) \n (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)