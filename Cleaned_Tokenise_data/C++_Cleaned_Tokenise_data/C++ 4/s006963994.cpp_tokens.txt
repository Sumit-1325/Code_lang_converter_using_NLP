typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) A (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) size_t (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) Fill (Token.Name) ( (Token.Punctuation) A (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) & (Token.Operator) array (Token.Name) ) (Token.Punctuation) [ (Token.Punctuation) N (Token.Name) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) val (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) fill (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) ( (Token.Punctuation) T (Token.Name) * (Token.Operator) ) (Token.Punctuation) array (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ( (Token.Punctuation) T (Token.Name) * (Token.Operator) ) (Token.Punctuation) ( (Token.Punctuation) array (Token.Name) + (Token.Operator) N (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) val (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) 200010 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) b (Token.Name) [ (Token.Punctuation) 200010 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) b (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation) a (Token.Name) + (Token.Operator) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -2 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) b (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) n (Token.Name) -2 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)