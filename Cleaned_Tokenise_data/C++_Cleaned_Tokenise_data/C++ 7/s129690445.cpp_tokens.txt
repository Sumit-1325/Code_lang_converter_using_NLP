# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i,n) for (int i = 0; i < (n); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repf(i,a,b) for (int i = (a); i < (b); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repi(i,a,b) for (int i = (a); i <= (b); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repr(i,a,b) for (int i = (a); i >= (b); i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(x) (x).begin(),(x).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rall(x) (x).rbegin(),(x).rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug(x)  cout << #x << " = " << (x) << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) uint (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vi (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vvi (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vi (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) pii (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) char (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vvc (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vc (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vs (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) string (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) tiii (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) tuple (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) ans (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) c (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) c (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) c (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) c (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) s (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) pop_back (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)