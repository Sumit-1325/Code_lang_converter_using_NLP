# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) deque (Token.Name) < (Token.Operator) char (Token.Keyword.Type) > (Token.Operator) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) char (Token.Keyword.Type)   (Token.Text.Whitespace) c (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %c (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) c (Token.Name) ) (Token.Punctuation) & (Token.Operator) & (Token.Operator) c (Token.Name) ! (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) \n (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) c (Token.Name) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) s (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) pop_back (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) c (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) s (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) s (Token.Name) . (Token.Punctuation) front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) pop_front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)