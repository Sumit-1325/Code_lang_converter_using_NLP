                 (Token.Text.Whitespace) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)                  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) # (Token.Comment.Preproc) define INPUT()              freopen("input.txt", "r", stdin) (Token.Comment.Preproc)  (Token.Comment.Preproc)                  (Token.Text.Whitespace) # (Token.Comment.Preproc) define OUTPUT()             freopen("output.txt", "w", stdout) (Token.Comment.Preproc)  (Token.Comment.Preproc)                  (Token.Text.Whitespace) # (Token.Comment.Preproc) define F                    first (Token.Comment.Preproc)  (Token.Comment.Preproc)                  (Token.Text.Whitespace) # (Token.Comment.Preproc) define S                    second (Token.Comment.Preproc)  (Token.Comment.Preproc)              (Token.Text.Whitespace)  (Token.Comment.Single)                  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) T (Token.Name)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) y (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) % (Token.Operator) y (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) euclideanDistance (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) y1 (Token.Name)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) y2 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) sqrt (Token.Name) ( (Token.Punctuation) ( (Token.Punctuation)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) y1 (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) y2 (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) y1 (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) y2 (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) digitSum (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) sum (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) while (Token.Keyword) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) sum (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) 10 (Token.Literal.Number.Integer) , (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 10 (Token.Literal.Number.Integer) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) sum (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace)  (Token.Comment.Single)                  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ull (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace)  (Token.Comment.Single)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e+9 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) INFLL (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e+18 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) EPS (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e-9 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) PI (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) acos (Token.Name) ( (Token.Punctuation) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) knightDir (Token.Name) [ (Token.Punctuation) 8 (Token.Literal.Number.Integer) ] (Token.Punctuation) [ (Token.Punctuation) 2 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) { (Token.Punctuation) -2 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) , (Token.Punctuation) { (Token.Punctuation) -2 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) } (Token.Punctuation) , (Token.Punctuation) { (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 2 (Token.Literal.Number.Integer) } (Token.Punctuation) , (Token.Punctuation) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 2 (Token.Literal.Number.Integer) } (Token.Punctuation) , (Token.Punctuation) { (Token.Punctuation) 2 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) , (Token.Punctuation) { (Token.Punctuation) 2 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) } (Token.Punctuation) , (Token.Punctuation) { (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) -2 (Token.Literal.Number.Integer) } (Token.Punctuation) , (Token.Punctuation) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -2 (Token.Literal.Number.Integer) } (Token.Punctuation) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                         (Token.Text.Whitespace)  (Token.Comment.Single)                         (Token.Text.Whitespace)  (Token.Comment.Single)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dx (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dy (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace)  (Token.Comment.Single)                  (Token.Text.Whitespace)  (Token.Comment.Single)                  (Token.Text.Whitespace) # (Token.Comment.Preproc) define MAX         1000005 (Token.Comment.Preproc)  (Token.Comment.Preproc)                  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) MOD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 998244353 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) arr (Token.Name) [ (Token.Punctuation) MAX (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) len (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) length (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) stack (Token.Name) < (Token.Operator) char (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) ans (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) len (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                                  (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                                  (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                                  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) ans (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                                  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                                      (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) ans (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) top (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) reverse (Token.Name) ( (Token.Punctuation) a (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation) a (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) a (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)