# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ff first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ss second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sz size() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(a) a.begin(), a.end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define allr(a) a.rbegin(), a.rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mod 1000000007 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define _for(it, a) \ (Token.Comment.Preproc)  (Token.Comment.Preproc)   for (__typeof(a.begin()) it = a.begin(); it != a.end(); ++it) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) res (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) sz (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) n (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) res (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) n (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) res (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)        (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) res (Token.Name) . (Token.Punctuation) sz (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) res (Token.Name) . (Token.Punctuation) erase (Token.Name) ( (Token.Punctuation) - (Token.Operator) - (Token.Operator) res (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) res (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)