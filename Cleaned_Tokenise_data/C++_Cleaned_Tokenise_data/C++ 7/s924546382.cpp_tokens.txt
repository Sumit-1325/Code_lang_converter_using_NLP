# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdio> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstring> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) char (Token.Keyword.Type)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) 10005 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation) ans (Token.Name) [ (Token.Punctuation) 10005 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) top (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %s (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) strlen (Token.Name) ( (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ! (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) top (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ans (Token.Name) [ (Token.Punctuation) top (Token.Name) ] (Token.Punctuation) = (Token.Operator) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) top (Token.Name) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) = (Token.Operator) top (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %c (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) ans (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)