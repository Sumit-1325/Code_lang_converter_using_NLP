# (Token.Comment.Preproc) include (Token.Comment.Preproc) <cstdio> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <stdlib.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <cstring> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) maxn (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) 1e6 (Token.Literal.Number.Float) + (Token.Operator) 5 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) INF (Token.Name) = (Token.Operator)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) mod (Token.Name) = (Token.Operator) 10007 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) char (Token.Keyword.Type)   (Token.Text.Whitespace) s1 (Token.Name) [ (Token.Punctuation) 102 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) s2 (Token.Name) [ (Token.Punctuation) 1020 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) head (Token.Name) , (Token.Punctuation) tail (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) s1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) head (Token.Name) = (Token.Operator) 500 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) tail (Token.Name) = (Token.Operator) 501 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) memset (Token.Name) ( (Token.Punctuation) s2 (Token.Name) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) sizeof (Token.Keyword) ( (Token.Punctuation) s2 (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) strlen (Token.Name) ( (Token.Punctuation) s1 (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s1 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) s2 (Token.Name) [ (Token.Punctuation) head (Token.Name) ] (Token.Punctuation) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) head (Token.Name) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s1 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) s2 (Token.Name) [ (Token.Punctuation) tail (Token.Name) ] (Token.Punctuation) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) tail (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s1 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) flag (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) j (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) j (Token.Name) < (Token.Operator) = (Token.Operator) 1010 (Token.Literal.Number.Integer) ; (Token.Punctuation) j (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s2 (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation) > (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) flag (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) flag (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tail (Token.Name) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) s2 (Token.Name) [ (Token.Punctuation) tail (Token.Name) ] (Token.Punctuation) = (Token.Operator) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) = (Token.Operator) 1010 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s2 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ! (Token.Operator) = (Token.Operator) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation)    (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) s2 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)