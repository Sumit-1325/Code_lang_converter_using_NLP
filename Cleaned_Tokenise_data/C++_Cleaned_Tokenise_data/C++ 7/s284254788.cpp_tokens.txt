# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <numeric> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _cin (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) } (Token.Punctuation)   (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Head (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) class (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) Tail (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _cin (Token.Name) ( (Token.Punctuation) Head (Token.Name) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) head (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Tail (Token.Name) & (Token.Operator) & (Token.Operator) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) tail (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) head (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) _cin (Token.Name) ( (Token.Punctuation) forward (Token.Name) < (Token.Operator) Tail (Token.Name) > (Token.Operator) ( (Token.Punctuation) tail (Token.Name) ) (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _cout (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Head (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) class (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) Tail (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _cout (Token.Name) ( (Token.Punctuation) Head (Token.Name) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) head (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Tail (Token.Name) & (Token.Operator) & (Token.Operator) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) tail (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) head (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) _cout (Token.Name) ( (Token.Punctuation) forward (Token.Name) < (Token.Operator) Tail (Token.Name) > (Token.Operator) ( (Token.Punctuation) tail (Token.Name) ) (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define For(i, n) for(int i = 0; i < (n); i ++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Rep(n) For(_, n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Range(c) c.begin(), c.end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define RevRange(c) c.rbegin(), c.rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Contains(c, x) (find(Range(c), x) != c.end()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Sort(a) sort(Range(a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define DeSort(a) sort(RevRange(a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Reverse(c) reverse(Range(c)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Vec2(T, n, m, xs) vector<vector<T>> xs(n, vector<T>(m)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Sum(a) accumulate(Range(a), 0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cusum(T, n, xs, sxs) vector<T> sxs(n+1); For(i, n) sxs[i+1] = sxs[i] + xs[i] (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cin(T, ...) T __VA_ARGS__; _cin(__VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cins(T, n, xs) vector<T> xs(n); For(i, n) cin >> xs[i] (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cins2(T, n, xs, ys) vector<T> xs(n), ys(n); For(i, n) cin >> xs[i] >> ys[i] (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cins3(T, n, xs, ys, zs) vector<T> xs(n), ys(n), zs(n); For(i, n) cin >> xs[i] >> ys[i] >> zs[i] (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cinss(T, n, m, xs) Vec2(T, n, m, xs); For(i, n) For(j, m) cin >> xs[i][j] (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cinm(T, n, map) unordered_map<T, int> map; Rep(n){ Cin(T, x); map[x] ++; } (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Cout(...) _cout(__VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Couts(xs) for(const auto &e : xs) cout << e << "\n"; cout << "\n" (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Coutyn(cond) Cout((cond) ? "yes" : "no") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define CoutYn(cond) Cout((cond) ? "Yes" : "No") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define CoutYN(cond) Cout((cond) ? "YES" : "NO") (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) void (Token.Keyword.Type) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) Cin (Token.Name) ( (Token.Punctuation) string (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) For (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type) ) (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) true (Token.Name.Builtin) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) erase (Token.Name) ( (Token.Punctuation) s (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type) ) (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) -1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) erase (Token.Name) ( (Token.Punctuation) s (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) Cout (Token.Name) ( (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)