# (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) vi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) pi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define F first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define S second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PB push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MP make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define what_is(x) cerr << #x << " is " << x << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MT make_tuple (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define eb emplace_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end))) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define REP(i,a,b) for (int i = a; i <= b; i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR(i,n) for (int i=0;i < n ; i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); } (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) err (Token.Name.Function) ( (Token.Punctuation) istream_iterator (Token.Name) < (Token.Operator) string (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) it (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) Args (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) err (Token.Name) ( (Token.Punctuation) istream_iterator (Token.Name) < (Token.Operator) string (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) it (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Args (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) args (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cerr (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) * (Token.Operator) it (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  =  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) err (Token.Name) ( (Token.Punctuation) + (Token.Operator) + (Token.Operator) it (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) args (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) vector (Token.Name) < (Token.Operator) char (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) length (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) v (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) v (Token.Name) . (Token.Punctuation) PB (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) v (Token.Name) . (Token.Punctuation) PB (Token.Name) ( (Token.Punctuation) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) v (Token.Name) . (Token.Punctuation) pop_back (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) v (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)