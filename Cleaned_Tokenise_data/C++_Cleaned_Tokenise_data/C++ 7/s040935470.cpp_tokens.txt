# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single) # (Token.Comment.Preproc) define Scd(x) scanf("%d", &x) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Scd2(x,y) scanf("%d%d", &x, &y) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Scd3(x,y,z) scanf("%d%d%d", &x, &y, &z) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define Scll(x) scanf("%llu", &x) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Scll2(x,y) scanf("%llu%llu", &x, &y) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Scll3(x,y,z) scanf("%llu%llu%llu", &x, &y, &z) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define Scc(c) scanf("%c", &c); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Scs(s) scanf("%s", s); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Scstr(s) scanf("%s", &s); (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single) # (Token.Comment.Preproc) define EPS (1e-7) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define INF (1e9) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PI (acos(-1)) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single) # (Token.Comment.Preproc) define Rep(x,y) for(int x = 0; x < y; x++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Repe(x,y,z) for(int x = z; x < y; x++) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) char (Token.Keyword.Type)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) 10 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) Scs (Token.Name) ( (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) ans (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) Rep (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation) strlen (Token.Name) ( (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char)   (Token.Text.Whitespace) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) ans (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) pop_back (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) " (Token.Literal.String) %s (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation)   (Token.Text.Whitespace) ans (Token.Name) . (Token.Punctuation) c_str (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)