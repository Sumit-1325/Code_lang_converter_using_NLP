# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <math.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <limits> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <assert.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i,n) for(int i=0;i<n;++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rrep(i,n) for(int i=n-1;i>=0;--i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define yesno(flg) if(flg){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MAX_N 1002 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define i197 1000000007 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) P1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) Pi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) double (Token.Keyword.Type) , (Token.Punctuation) Pi (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) Pdi (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator) Pli (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) P1 (Token.Name) , (Token.Punctuation) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) P2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) INF (Token.Name) = (Token.Operator) 10000000000000000001 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) edge (Token.Name.Class) { (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) to (Token.Name) , (Token.Punctuation) cost (Token.Name) ; (Token.Punctuation) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dy (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) = (Token.Operator) { (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dx (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) = (Token.Operator) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) Road (Token.Name.Class) { (Token.Punctuation) double (Token.Keyword.Type)   (Token.Text.Whitespace) cost (Token.Name) ; (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) b (Token.Name) ; (Token.Punctuation) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) pos (Token.Name.Class) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation) y (Token.Name) , (Token.Punctuation) cost (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) s2 (Token.Name) [ (Token.Punctuation) 11 (Token.Literal.Number.Integer) ] (Token.Punctuation) = (Token.Operator) { (Token.Punctuation) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) t (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) s2 (Token.Name) [ (Token.Punctuation) t (Token.Name) ] (Token.Punctuation) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) s2 (Token.Name) [ (Token.Punctuation) t (Token.Name) ] (Token.Punctuation) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) & (Token.Operator) & (Token.Operator) t (Token.Name) > (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) t (Token.Name) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) | (Token.Operator) | (Token.Operator) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) t (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) t (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) s2 (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)