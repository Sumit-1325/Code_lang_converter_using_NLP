# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define REP(i,n) for(int i=0;i<(n);i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REAP(i,a,n) for(int i=(a);i<(n);i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define YES cout<<"Yes"<<endl (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define NO cout<<"No"<<endl (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fr first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sc second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define All(v) v.begin(),v.end() (Token.Comment.Preproc)  (Token.Comment.Preproc) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) char (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) REP (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) str (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ! (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) str (Token.Name) . (Token.Punctuation) pop_back (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) str (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) REP (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) str (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)