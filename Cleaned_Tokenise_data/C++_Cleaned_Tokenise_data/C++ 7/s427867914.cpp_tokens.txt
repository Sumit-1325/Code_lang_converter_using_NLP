# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type)                  (Token.Text.Whitespace) SINT8 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) char (Token.Keyword.Type)         (Token.Text.Whitespace) UINT8 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) short (Token.Keyword.Type)                 (Token.Text.Whitespace) SINT16 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) short (Token.Keyword.Type)        (Token.Text.Whitespace) UINT16 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)                   (Token.Text.Whitespace) SINT32 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type)          (Token.Text.Whitespace) UINT32 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)             (Token.Text.Whitespace) SINT64 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)    (Token.Text.Whitespace) UINT64 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)                (Token.Text.Whitespace) DOUBLE (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define MAX(a,b) ((a)>(b)?(a):(b)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MIN(a,b) ((a)<(b)?(a):(b)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ABS(a) ((a)>(0)?(a):-(a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i,a,b) for(int (i)=int(a);(i)<int(b);(i)++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rrep(i,a,b) for(int (i)=int(a);(i)>=int(b);(i)--) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define put(a) cout << (a) << endl (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define puts(a) cout << (a) << " " (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pute(a) cout << endl (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define INF 1000000001 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MOD 1000000007 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define INF64 1000000000000000001 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define F first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define S second (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define Pii  pair<SINT32,SINT32> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Pll  pair<SINT64,SINT64> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Piii pair<SINT32,pair<SINT32,SINT32>> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Plll pair<SINT64,pair<SINT64,SINT64>> (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define Vll(a,b,c)    vector<vector<SINT64>> (a)((b),vector<SINT64>((c)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Vlll(a,b,c,d) vector<vector<vector<SINT64>>> (a)((b),vector<vector<SINT64>>((c),vector<SINT64>((d))) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation) 	 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) SINT64 (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) data (Token.Name) ( (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) SINT64 (Token.Name)   (Token.Text.Whitespace) buf (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) buf (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) data (Token.Name) [ (Token.Punctuation) buf (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 					 (Token.Text.Whitespace) data (Token.Name) [ (Token.Punctuation) buf (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 					 (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) buf (Token.Name) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) data (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) data (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) data (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 			 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) data (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)