# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define infi            5e9 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define infl            5e18 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MX              100005 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pi              2*acos(0.0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ll              long long int (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rr              read() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ff              first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ss              second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb              push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pii             pair<int,int> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ms(a,b)         memset(a, b, sizeof(a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define loop(i,n)       for(register int i=0;i<n;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pool(i,n)       for(register int i=n-1;i>=0;i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define loop1(i,n)      for(register int i=1;i<=n;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pool1(i,n)      for(register int i=n;i>0;i--) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) read (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) char (Token.Keyword.Type)   (Token.Text.Whitespace) c (Token.Name) = (Token.Operator) getchar (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) num (Token.Name) , (Token.Punctuation) sign (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) ; (Token.Punctuation) c (Token.Name) < (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) | (Token.Operator) | (Token.Operator) c (Token.Name) > (Token.Operator) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation) c (Token.Name) = (Token.Operator) getchar (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) c (Token.Name) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) - (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) sign (Token.Name) = (Token.Operator) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) num (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) c (Token.Name) > (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) & (Token.Operator) & (Token.Operator) c (Token.Name) < (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) c (Token.Name) - (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 0 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation) num (Token.Name) = (Token.Operator) num (Token.Name) * (Token.Operator) 10 (Token.Literal.Number.Integer) + (Token.Operator) c (Token.Name) ; (Token.Punctuation) c (Token.Name) = (Token.Operator) getchar (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) num (Token.Name) * (Token.Operator) sign (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) pw (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) ans (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) while (Token.Keyword) ( (Token.Punctuation) p (Token.Name) > (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) p (Token.Name) & (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ans (Token.Name) * (Token.Operator) = (Token.Operator) b (Token.Name) ; (Token.Punctuation) p (Token.Name) > (Token.Operator) > (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) b (Token.Name) * (Token.Operator) = (Token.Operator) b (Token.Name) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) ans (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) isPrime (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) n (Token.Name) = (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) n (Token.Name) = (Token.Operator) = (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) ( (Token.Punctuation) n (Token.Name) % (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation) for (Token.Keyword) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 3 (Token.Literal.Number.Integer) ; (Token.Punctuation) i (Token.Name) < (Token.Operator) = (Token.Operator) sqrt (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) = (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) ( (Token.Punctuation) n (Token.Name) % (Token.Operator) i (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) gcd (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) gcd (Token.Name) ( (Token.Punctuation) b (Token.Name) % (Token.Operator) a (Token.Name) , (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ios_base (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) NULL (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) str (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) stack (Token.Name) < (Token.Operator) char (Token.Keyword.Type) > (Token.Operator) qq (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) loop (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) str (Token.Name) . (Token.Punctuation) length (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) str (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ! (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) B (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) qq (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) str (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) qq (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) qq (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) str (Token.Name) = (Token.Operator) " (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) ! (Token.Operator) qq (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) str (Token.Name) + (Token.Operator) = (Token.Operator) qq (Token.Name) . (Token.Punctuation) top (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) qq (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) reverse (Token.Name) ( (Token.Punctuation) str (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation) str (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) str (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)