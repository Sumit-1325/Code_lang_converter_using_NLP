# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define LOCAL (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) A (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) B (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) out (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) A (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) B (Token.Name) > (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ( (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) . (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) , (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) . (Token.Punctuation) second (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ) (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) size_t (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) out (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) array (Token.Name) < (Token.Operator) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) N (Token.Name) > (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) [ (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword) & (Token.Operator)   (Token.Text.Whitespace) v (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ,  (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ] (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) out (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) [ (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword) & (Token.Operator)   (Token.Text.Whitespace) v (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ,  (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ] (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) Cmp (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) out (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Cmp (Token.Name) > (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) { (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword) & (Token.Operator)   (Token.Text.Whitespace) v (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ,  (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) } (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) U (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) Cmp (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) operator (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) out (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) map (Token.Name) < (Token.Operator) U (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Cmp (Token.Name) > (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) { (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword) & (Token.Operator)   (Token.Text.Whitespace) p (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) ? (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ,  (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) p (Token.Name) . (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) : (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) p (Token.Name) . (Token.Punctuation) second (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) first (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation)   (Token.Text.Whitespace) out (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) } (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) ifdef LOCAL (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define trace(...) __f(#__VA_ARGS__, __VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define trace(...) 42 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) Arg1 (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) __f (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type) * (Token.Operator)   (Token.Text.Whitespace) name (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Arg1 (Token.Name) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) arg1 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) cerr (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) name (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) :  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) arg1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) Arg1 (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) Args (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) __f (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type) * (Token.Operator)   (Token.Text.Whitespace) names (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Arg1 (Token.Name) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) arg1 (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) Args (Token.Name) & (Token.Operator) & (Token.Operator) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) args (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type) * (Token.Operator)   (Token.Text.Whitespace) comma (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) strchr (Token.Name) ( (Token.Punctuation) names (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) , (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) cerr (Token.Name) . (Token.Punctuation) write (Token.Name) ( (Token.Punctuation) names (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) comma (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) names (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) :  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) arg1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  | (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) __f (Token.Name) ( (Token.Punctuation) comma (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) args (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i,n) for(int i=0; i<(n); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define int long long (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) P (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Comment.Single) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) 3 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ret (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ret (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)