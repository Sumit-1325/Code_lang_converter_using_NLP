# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) P (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i, n) for (int i = 0; i < (int)(n); ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ios (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 3 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) n (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) n (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) ans (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)