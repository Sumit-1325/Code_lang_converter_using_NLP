 (Token.Comment.Single) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <utility> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdio> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstring> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stack> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <numeric> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <complex> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bitset> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <functional> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stack> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <regex> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <tuple> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define int long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REP(i,l,r) REPEAT(i,l,r,true)  (Token.Comment.Preproc)  (Token.Comment.Single) # (Token.Comment.Preproc) define rep(i,n) REP(i,0,n)            (Token.Comment.Preproc)  (Token.Comment.Single) # (Token.Comment.Preproc) define REPEAT(i,l,r,condition) for(int i=(condition)?l:r-1;(condition)?i<r:i>=l;(condition)?++i:--i)  (Token.Comment.Preproc)  (Token.Comment.Single) # (Token.Comment.Preproc) define all(e) e.begin(),e.end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rall(e) e.rbegin(),e.rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fs first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sc second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define show(...) cerr<<#__VA_ARGS__<<" = ";_DEBUG(__VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define shows(n) for(auto z:n){cerr<<z<<", ";}cerr<<endl (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define showslr(n,l,r) cerr<<#n<<" = ";for(int i=l;i<r;i++){cerr<<n[i]<<", ";}cerr<<endl  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define yes puts("Yes") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define no puts("No") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define case(i) printf("Case #%lld: ",i) (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vi (Token.Name) = (Token.Operator) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) pint (Token.Name) = (Token.Operator) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) io (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation) ios (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation) cout (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) fixed (Token.Name) < (Token.Operator) < (Token.Operator) setprecision (Token.Name) ( (Token.Punctuation) 20 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _DEBUG (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) cerr (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) H (Token.Name.Class) , (Token.Punctuation) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _DEBUG (Token.Name) ( (Token.Punctuation) H (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) T (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cerr (Token.Name) < (Token.Operator) < (Token.Operator) a (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) , (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation) _DEBUG (Token.Name) ( (Token.Punctuation) b (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) H (Token.Name.Class) , (Token.Punctuation) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) > (Token.Operator) void (Token.Keyword.Type)   (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) H (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) & (Token.Operator) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) ; (Token.Punctuation) in (Token.Name) ( (Token.Punctuation) b (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) H (Token.Name.Class) , (Token.Punctuation) typename (Token.Keyword) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) H (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) a (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation) out (Token.Name) ( (Token.Punctuation) b (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) INF (Token.Name) = (Token.Operator) 1L (Token.Literal.Number.Float) L (Token.Name) < (Token.Operator) < (Token.Operator) 55 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) MOD (Token.Name) = (Token.Operator) 1000000007 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) EPS (Token.Name) = (Token.Operator) 1e-8 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) io (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) s (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation) s (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %c (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) s (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) = (Token.Operator) = (Token.Operator) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ? (Token.Operator) ' (Token.Literal.String.Char) 9 (Token.Literal.String.Char) ' (Token.Literal.String.Char) : (Token.Operator) ' (Token.Literal.String.Char) 1 (Token.Literal.String.Char) ' (Token.Literal.String.Char) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation) puts (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)