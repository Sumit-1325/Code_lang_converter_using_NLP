# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define int long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR(i, a, b) for (int i = a; i < b; ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(N) for (int i = 0; i < N; ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define Rep(a, b) for (int i = a; i < b; ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define For(i, N) for (int i = 0; i < N; ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(v) v.begin(), v.end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rev(v) v.rbegin(), v.rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define makei(N) int N; cin >> N; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define makes(s) string s; cin >> s; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define maked(d) double d; cin >> d; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define makev(v, N) vi v(N); rep(N)cin >> v[i]; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mod 1000000007 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vi (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vvi (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vb (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) bool (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vvb (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vector (Token.Name) < (Token.Operator) bool (Token.Keyword.Type) > (Token.Operator) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) vs (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) string (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) pii (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) pis (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) string (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) msi (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) map (Token.Name) < (Token.Operator) string (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) say (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) s (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) say (Token.Name) ( (Token.Punctuation) vector (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) itr (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) * (Token.Operator) ( (Token.Punctuation) itr (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) itr (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) * (Token.Operator) ( (Token.Punctuation) itr (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) say (Token.Name) ( (Token.Punctuation) vector (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) , (Token.Punctuation) char (Token.Keyword.Type)   (Token.Text.Whitespace) r (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) itr (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) * (Token.Operator) ( (Token.Punctuation) itr (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) itr (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) r (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) * (Token.Operator) ( (Token.Punctuation) itr (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) yn (Token.Name) ( (Token.Punctuation) bool (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) say (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) yes (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) say (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) no (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) Yn (Token.Name) ( (Token.Punctuation) bool (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) say (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) Yes (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) say (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) No (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) YN (Token.Name) ( (Token.Punctuation) bool (Token.Keyword.Type)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) say (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) YES (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) say (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) NO (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) maxi (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) mini (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) min (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) exact_say (Token.Name) ( (Token.Punctuation) double (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) setprecision (Token.Name) ( (Token.Punctuation) numeric_limits (Token.Name) < (Token.Operator) double (Token.Keyword.Type) > (Token.Operator) : (Token.Operator) : (Token.Operator) max_digits10 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) getVector (Token.Name) ( (Token.Punctuation) vector (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) string (Token.Name)   (Token.Text.Whitespace) revString (Token.Name) ( (Token.Punctuation) std (Token.Name) : (Token.Operator) : (Token.Operator) string (Token.Name)   (Token.Text.Whitespace) s (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) it (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) rend (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) it (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) s (Token.Name) . (Token.Punctuation) rbegin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) ret (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) * (Token.Operator) it (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 		 (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) it (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) makei (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) makev (Token.Name) ( (Token.Punctuation) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) reverse (Token.Name) ( (Token.Punctuation) all (Token.Name) ( (Token.Punctuation) v (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) say (Token.Name) ( (Token.Punctuation) v (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)