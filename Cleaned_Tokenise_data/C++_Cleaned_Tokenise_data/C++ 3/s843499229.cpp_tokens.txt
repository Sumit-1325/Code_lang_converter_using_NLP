# (Token.Comment.Preproc) include (Token.Comment.Preproc) <stdio.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) in (Token.Name) [ (Token.Punctuation) 1000 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) num (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) num (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) < (Token.Operator) num (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 								 (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) & (Token.Operator) in (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) ; (Token.Punctuation) num (Token.Name) > (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) num (Token.Name) - (Token.Operator) - (Token.Operator) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace) 								 (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d  (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) in (Token.Name) [ (Token.Punctuation) num (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 				 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)