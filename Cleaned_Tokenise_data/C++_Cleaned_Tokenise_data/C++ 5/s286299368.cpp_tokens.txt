# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define REP(i, e) for(int (i) = 0; (i) < (e); ++(i)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FOR(i, b, e) for(int (i) = (b); (i) < (e); ++(i)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ALL(c) (c).begin(), (c).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MIN(c) (*min_element(ALL(c)))  (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MAX(c) (*max_element(ALL(c))) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ACC(c) (accumulate(ALL(c), 0)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MP(a, b) (make_pair((a), (b))) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ENDL "\n" (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PRINT(x) cout << (x) << ENDL (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) pint (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) pll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) in (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) scanf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) out (Token.Name.Function) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) swap (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) tmp (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) tmp (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) pint_compare (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) [ (Token.Punctuation) ] (Token.Punctuation) ( (Token.Punctuation) pint (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) pint (Token.Name)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) bool (Token.Keyword.Type) { (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name) . (Token.Punctuation) first (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) . (Token.Punctuation) first (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) W (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) H (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) W (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) H (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) S (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) ( (Token.Punctuation) double (Token.Keyword.Type) ) (Token.Punctuation) W (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2.0 (Token.Literal.Number.Float) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) double (Token.Keyword.Type) ) (Token.Punctuation) H (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %.9f (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation)   (Token.Text.Whitespace) S (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) W (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) H (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String)  1 (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String)  0 (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)      (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)