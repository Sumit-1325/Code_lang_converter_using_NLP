fun (Token.Name)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) args (Token.Name) : (Token.Operator)   (Token.Text.Whitespace) Array (Token.Name) < (Token.Operator) String (Token.Name) > (Token.Operator) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) val (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) w (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) h (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) readLine (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ! (Token.Operator) ! (Token.Operator) . (Token.Punctuation) split (Token.Name) ( (Token.Punctuation) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) . (Token.Punctuation) map (Token.Name) { (Token.Punctuation)   (Token.Text.Whitespace) it (Token.Name) . (Token.Punctuation) toInt (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) val (Token.Name)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation)   (Token.Text.Whitespace) w (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) h (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)  (Token.Text.Whitespace)      (Token.Text.Whitespace) println (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) ( (Token.Punctuation) w (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) h (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2.0 (Token.Literal.Number.Float) ) (Token.Punctuation) . (Token.Punctuation) toString (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String)    (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)