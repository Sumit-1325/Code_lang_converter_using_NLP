# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) edge (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) to (Token.Name) ; (Token.Punctuation)       (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) weight (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) edge (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) t (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) w (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) to (Token.Name) ( (Token.Punctuation) t (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) weight (Token.Name) ( (Token.Punctuation) w (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) Graph (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) dou (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) Yes (Token.Name) = (Token.Operator) " (Token.Literal.String) Yes (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) YES (Token.Name) = (Token.Operator) " (Token.Literal.String) YES (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) NO (Token.Name) = (Token.Operator) " (Token.Literal.String) NO (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) No (Token.Name) = (Token.Operator) " (Token.Literal.String) No (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i, n)         for(int i = 0; i < (int)(n); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define brep(n)           for(int bit=0;bit<(1<<n);bit++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define erep(i,container) for (auto i : container) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define irep(i, n)        for(int i = n-1; i >= (int)0; i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rrep(i,m,n) for(int i = m; i < (int)(n); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define reprep(i,j,h,w) rep(i,h)rep(j,w) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(x) (x).begin(),(x).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define aall(x,n) (x).begin(),(x).begin()+(n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define VEC(type,name,n) std::vector<type> name(n);rep(i,n)std::cin >> name[i]; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pf push_front (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define lb lower_bound (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ub upper_bound (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define res resize (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define as assign (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fi first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define se second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define itn int (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sum(a) accumulate(all(a),0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define keta fixed<<setprecision (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define vvector(name,typ,m,n,a)vector<vector<typ> > name(m,vector<typ> (n,a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define vvvector(name,t,l,m,n,a) vector<vector<vector<t> > > name(l, vector<vector<t> >(m, vector<t>(n,a))); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define vvvvector(name,t,k,l,m,n,a) vector<vector<vector<vector<t> > > > name(k,vector<vector<vector<t> > >(l, vector<vector<t> >(m, vector<t>(n,a)) )); (Token.Comment.Preproc)  (Token.Comment.Preproc)   (Token.Text.Whitespace)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 2000000000 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) INF64 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 922337203685477580l (Token.Literal.Number.Float) l (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) mod (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1000000007l (Token.Literal.Number.Float) l (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)    (Token.Text.Whitespace) MOD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1000000007L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) pi (Token.Name) = (Token.Operator) 3.1415926535897932384626 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) w (Token.Name) , (Token.Punctuation) h (Token.Name) , (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) w (Token.Name) > (Token.Operator) > (Token.Operator) h (Token.Name) > (Token.Operator) > (Token.Operator) x (Token.Name) > (Token.Operator) > (Token.Operator) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) keta (Token.Name) ( (Token.Punctuation) 10 (Token.Literal.Number.Integer) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) double (Token.Keyword.Type) ( (Token.Punctuation) w (Token.Name) * (Token.Operator) h (Token.Name) ) (Token.Punctuation) / (Token.Operator) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) w (Token.Name) % (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) & (Token.Operator) & (Token.Operator) h (Token.Name) % (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ( (Token.Punctuation) h (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) y (Token.Name) & (Token.Operator) & (Token.Operator) w (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) x (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) std (Token.Name) : (Token.Operator) : (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)