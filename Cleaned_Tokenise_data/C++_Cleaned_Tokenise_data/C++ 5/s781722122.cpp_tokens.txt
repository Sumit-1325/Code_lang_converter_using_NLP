# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep2(x,fr,to) for(int (x)=(fr);(x)<(to);(x)++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(x,to) for(int (x)=0;(x)<(to);(x)++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repr(x,fr,to) for(int (x)=(fr);(x)>=(to);(x)--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(c) (c).begin(),(c).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sz(v) (int)(v).size() (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) int64_t (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) VI (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) pii (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) MD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e9 (Token.Literal.Number.Float) + (Token.Operator) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) VL (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) dbg (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) cerr (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)    (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation) typename (Token.Keyword)   (Token.Text.Whitespace) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) T2 (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) dbg (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) fst (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name) & (Token.Operator) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) rst (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)   (Token.Text.Whitespace) cerr (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) fst (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) :  (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)   (Token.Text.Whitespace) dbg (Token.Name) ( (Token.Punctuation) rst (Token.Name) . (Token.Punctuation) . (Token.Punctuation) . (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) ios_base (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) w (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) h (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator) w (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator) h (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) as2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator) w (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) h (Token.Name) ) (Token.Punctuation) ? (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) : (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) w (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) h (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) 2.0 (Token.Literal.Number.Float)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) as2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)