 (Token.Comment.Single) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <list> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <limits> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) MOD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1000000007 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) Pairs (Token.Name.Class) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) public (Token.Keyword)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) setpairs (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) _a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) _b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) _a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) _b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) cmp (Token.Name.Function) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) Pairs (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) A (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) Pairs (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) B (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) A (Token.Name) . (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) B (Token.Name) . (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)    (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) W (Token.Name) , (Token.Punctuation) H (Token.Name) , (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) W (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) H (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ans (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) W (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) H (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ans (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) W (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) | (Token.Operator) | (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) H (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) 1 (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) 0 (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)