# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define INF 1<<30 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define endl '\n' (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define maxn 100005 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define FASTIO ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0); (Token.Comment.Preproc)  (Token.Comment.Preproc) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) PI (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) acos (Token.Name) ( (Token.Punctuation) -1.0 (Token.Literal.Number.Float) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define dbg(x) cerr << #x << " = " << x << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define dbg2(x, y) cerr << #x << " = " << x << ", " << #y << " = " << y << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define dbg3(x, y, z) cerr << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e9 (Token.Literal.Number.Float)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) maxn (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) FASTIO (Token.Name)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) w (Token.Name) , (Token.Punctuation) h (Token.Name) , (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) w (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) h (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %lf %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) double (Token.Keyword.Type) ( (Token.Punctuation) w (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) double (Token.Keyword.Type) ( (Token.Punctuation) h (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2.0 (Token.Literal.Number.Float)   (Token.Text.Whitespace) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) w (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) h (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)