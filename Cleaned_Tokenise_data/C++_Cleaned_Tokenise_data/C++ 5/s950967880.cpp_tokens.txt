# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cstdio> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <sstream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) ifdef _DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define DMP(x) cerr << #x << ": " << x << "\n" (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define DMP(x) ((void)0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) MOD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1000000007 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1111111111 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) lint (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) nullptr (Token.Keyword) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) ios (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) W (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) H (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) W (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) H (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) W (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) W (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) H (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) H (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) x (Token.Name) * (Token.Operator) H (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name) * (Token.Operator) W (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) H (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) * (Token.Operator) y (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) W (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) * (Token.Operator) x (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) 1 (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) 0 (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) 	 (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)