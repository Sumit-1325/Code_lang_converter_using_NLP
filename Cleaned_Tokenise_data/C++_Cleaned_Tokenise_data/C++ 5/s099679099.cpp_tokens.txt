# (Token.Comment.Preproc) include (Token.Comment.Preproc) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) b (Token.Name) , (Token.Punctuation) c (Token.Name) , (Token.Punctuation) d (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ar1 (Token.Name) , (Token.Punctuation) ar2 (Token.Name) , (Token.Punctuation) ar3 (Token.Name) , (Token.Punctuation) ar4 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) > (Token.Operator) > (Token.Operator) b (Token.Name) > (Token.Operator) > (Token.Operator) c (Token.Name) > (Token.Operator) > (Token.Operator) d (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ar1 (Token.Name) = (Token.Operator) c (Token.Name) * (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ar2 (Token.Name) = (Token.Operator) ( (Token.Punctuation) a (Token.Name) - (Token.Operator) c (Token.Name) ) (Token.Punctuation) * (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ar3 (Token.Name) = (Token.Operator) d (Token.Name) * (Token.Operator) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ar4 (Token.Name) = (Token.Operator) ( (Token.Punctuation) b (Token.Name) - (Token.Operator) d (Token.Name) ) (Token.Punctuation) * (Token.Operator) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) maxi (Token.Name) = (Token.Operator) ar1 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ok (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar2 (Token.Name) > (Token.Operator) ar1 (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) maxi (Token.Name) = (Token.Operator) ar2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar3 (Token.Name) > (Token.Operator) maxi (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) maxi (Token.Name) = (Token.Operator) ar3 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar4 (Token.Name) > (Token.Operator) maxi (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) maxi (Token.Name) = (Token.Operator) ar4 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar1 (Token.Name) = (Token.Operator) = (Token.Operator) maxi (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ok (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar2 (Token.Name) = (Token.Operator) = (Token.Operator) maxi (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ok (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar3 (Token.Name) = (Token.Operator) = (Token.Operator) maxi (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ok (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ar4 (Token.Name) = (Token.Operator) = (Token.Operator) maxi (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ok (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ok (Token.Name) > (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) std (Token.Name) : (Token.Operator) : (Token.Operator) setprecision (Token.Name) ( (Token.Punctuation) 9 (Token.Literal.Number.Integer) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) maxi (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) < (Token.Operator) < (Token.Operator) ' (Token.Literal.String.Char)   (Token.Literal.String.Char) ' (Token.Literal.String.Char) < (Token.Operator) < (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) std (Token.Name) : (Token.Operator) : (Token.Operator) setprecision (Token.Name) ( (Token.Punctuation) 9 (Token.Literal.Number.Integer) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) maxi (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) < (Token.Operator) < (Token.Operator) ' (Token.Literal.String.Char)   (Token.Literal.String.Char) ' (Token.Literal.String.Char) < (Token.Operator) < (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)