# (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <boost/multiprecision/cpp_int.hpp> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) boost (Token.Name.Namespace) : (Token.Operator) : (Token.Operator) multiprecision (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define BEGIN ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define END return EXIT_SUCCESS (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(I,N) for(auto I=0;I<(N);++I) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define up(I,A,B) for(auto I=(A);I<=(B);++I) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define dw(I,A,B) for(auto I=(A);I>=(B);--I) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(C) (C).begin(),(C).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rall(C) (C).rbegin(),(C).rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ft first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sd second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mt make_tuple (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pf push_front (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pt pop_front (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pk pop_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define eb emplace_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define lb lower_bound (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ub upper_bound (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rs resize (Token.Comment.Preproc)  (Token.Comment.Preproc) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) count_bit (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) typeid (Token.Keyword) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) = (Token.Operator) = (Token.Operator) typeid (Token.Keyword) ( (Token.Punctuation) int (Token.Keyword.Type) ) (Token.Punctuation) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) __builtin_popcount (Token.Name) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) typeid (Token.Keyword) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) = (Token.Operator) = (Token.Operator) typeid (Token.Keyword) ( (Token.Punctuation) long (Token.Keyword.Type) ) (Token.Punctuation) ) (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) __builtin_popcountl (Token.Name) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) __builtin_popcountll (Token.Name) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) < (Token.Operator) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) a (Token.Name) = (Token.Operator) b (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) > (Token.Operator) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) a (Token.Name) = (Token.Operator) b (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)                                        (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cin (Token.Name) > (Token.Operator) > (Token.Operator) p (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T1 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)                              (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) T1 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p1 (Token.Name) , (Token.Punctuation) T2 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p2 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cin (Token.Name) > (Token.Operator) > (Token.Operator) p1 (Token.Name) > (Token.Operator) > (Token.Operator) p2 (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T1 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T3 (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)                     (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) T1 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p1 (Token.Name) , (Token.Punctuation) T2 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p2 (Token.Name) , (Token.Punctuation) T3 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p3 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cin (Token.Name) > (Token.Operator) > (Token.Operator) p1 (Token.Name) > (Token.Operator) > (Token.Operator) p2 (Token.Name) > (Token.Operator) > (Token.Operator) p3 (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T1 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T3 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T4 (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)            (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) T1 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p1 (Token.Name) , (Token.Punctuation) T2 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p2 (Token.Name) , (Token.Punctuation) T3 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p3 (Token.Name) , (Token.Punctuation) T4 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p4 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cin (Token.Name) > (Token.Operator) > (Token.Operator) p1 (Token.Name) > (Token.Operator) > (Token.Operator) p2 (Token.Name) > (Token.Operator) > (Token.Operator) p3 (Token.Name) > (Token.Operator) > (Token.Operator) p4 (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T1 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T3 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T4 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T5 (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) T1 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p1 (Token.Name) , (Token.Punctuation) T2 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p2 (Token.Name) , (Token.Punctuation) T3 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p3 (Token.Name) , (Token.Punctuation) T4 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p4 (Token.Name) , (Token.Punctuation) T5 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p5 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cin (Token.Name) > (Token.Operator) > (Token.Operator) p1 (Token.Name) > (Token.Operator) > (Token.Operator) p2 (Token.Name) > (Token.Operator) > (Token.Operator) p3 (Token.Name) > (Token.Operator) > (Token.Operator) p4 (Token.Name) > (Token.Operator) > (Token.Operator) p5 (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)                                        (Token.Text.Whitespace) ins (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) for_each (Token.Name) ( (Token.Punctuation) all (Token.Name) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) in (Token.Name) < (Token.Operator) decltype (Token.Keyword) ( (Token.Punctuation) p (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation) > (Token.Operator) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)                               (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) p (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T1 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)                     (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) T1 (Token.Name)   (Token.Text.Whitespace) p1 (Token.Name) , (Token.Punctuation) T2 (Token.Name)   (Token.Text.Whitespace) p2 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) p1 (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p2 (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T1 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T3 (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)            (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) T1 (Token.Name)   (Token.Text.Whitespace) p1 (Token.Name) , (Token.Punctuation) T2 (Token.Name)   (Token.Text.Whitespace) p2 (Token.Name) , (Token.Punctuation) T3 (Token.Name)   (Token.Text.Whitespace) p3 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) p1 (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p2 (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p3 (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T1 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T2 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T3 (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) T4 (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) T1 (Token.Name)   (Token.Text.Whitespace) p1 (Token.Name) , (Token.Punctuation) T2 (Token.Name)   (Token.Text.Whitespace) p2 (Token.Name) , (Token.Punctuation) T3 (Token.Name)   (Token.Text.Whitespace) p3 (Token.Name) , (Token.Punctuation) T4 (Token.Name)   (Token.Text.Whitespace) p4 (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) p1 (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p2 (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p3 (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p4 (Token.Name) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)                                                (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) out (Token.Name) ( (Token.Punctuation) double (Token.Keyword.Type)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %.10f (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) inline (Token.Keyword.Reserved)                               (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) outs (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) for_each (Token.Name) ( (Token.Punctuation) all (Token.Name) ( (Token.Punctuation) p (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) out (Token.Name) < (Token.Operator) decltype (Token.Keyword) ( (Token.Punctuation) p (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation) > (Token.Operator) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) solve (Token.Name) ( (Token.Punctuation) void (Token.Keyword.Type) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) W (Token.Name) , (Token.Punctuation) H (Token.Name) , (Token.Punctuation) X (Token.Name) , (Token.Punctuation) Y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) EPS (Token.Name) = (Token.Operator) 1e-10 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) in (Token.Name) ( (Token.Punctuation) W (Token.Name) , (Token.Punctuation) H (Token.Name) , (Token.Punctuation) X (Token.Name) , (Token.Punctuation) Y (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ( (Token.Punctuation) X (Token.Name) = (Token.Operator) = (Token.Operator) 0L (Token.Literal.Number.Float) & (Token.Operator) & (Token.Operator) Y (Token.Name) = (Token.Operator) = (Token.Operator) 0L (Token.Literal.Number.Float) ) (Token.Punctuation) | (Token.Operator) | (Token.Operator) ( (Token.Punctuation) X (Token.Name) = (Token.Operator) = (Token.Operator) 0L (Token.Literal.Number.Float) & (Token.Operator) & (Token.Operator) Y (Token.Name) = (Token.Operator) = (Token.Operator) H (Token.Name) ) (Token.Punctuation) | (Token.Operator) | (Token.Operator) ( (Token.Punctuation) X (Token.Name) = (Token.Operator) = (Token.Operator) W (Token.Name) & (Token.Operator) & (Token.Operator) Y (Token.Name) = (Token.Operator) = (Token.Operator) 0L (Token.Literal.Number.Float) ) (Token.Punctuation) | (Token.Operator) | (Token.Operator) ( (Token.Punctuation) X (Token.Name) = (Token.Operator) = (Token.Operator) W (Token.Name) & (Token.Operator) & (Token.Operator) Y (Token.Name) = (Token.Operator) = (Token.Operator) W (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %.10f 1 (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) 0.5 (Token.Literal.Number.Float) * (Token.Operator) W (Token.Name) * (Token.Operator) H (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) X (Token.Name) = (Token.Operator) = (Token.Operator) 0L (Token.Literal.Number.Float) | (Token.Operator) | (Token.Operator) X (Token.Name) = (Token.Operator) = (Token.Operator) W (Token.Name) | (Token.Operator) | (Token.Operator) Y (Token.Name) = (Token.Operator) = (Token.Operator) 0L (Token.Literal.Number.Float) | (Token.Operator) | (Token.Operator) Y (Token.Name) = (Token.Operator) = (Token.Operator) H (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %ld 0 (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) max (Token.Name) ( (Token.Punctuation) min (Token.Name) ( (Token.Punctuation) W (Token.Name) * (Token.Operator) Y (Token.Name) , (Token.Punctuation) W (Token.Name) * (Token.Operator) ( (Token.Punctuation) H (Token.Name) - (Token.Operator) Y (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation) min (Token.Name) ( (Token.Punctuation) X (Token.Name) * (Token.Operator) H (Token.Name) , (Token.Punctuation) ( (Token.Punctuation) W (Token.Name) - (Token.Operator) X (Token.Name) ) (Token.Punctuation) * (Token.Operator) H (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) X (Token.Name) > (Token.Operator) W (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) & (Token.Operator) & (Token.Operator) Y (Token.Name) > (Token.Operator) H (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) ) (Token.Punctuation) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %.10f  (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) 0.5 (Token.Literal.Number.Float) * (Token.Operator) ( (Token.Punctuation) W (Token.Name) - (Token.Operator) X (Token.Name) - (Token.Operator) Y (Token.Name) + (Token.Operator) H (Token.Name) ) (Token.Punctuation) * (Token.Operator) ( (Token.Punctuation) H (Token.Name) + (Token.Operator) W (Token.Name) - (Token.Operator) X (Token.Name) - (Token.Operator) Y (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) X (Token.Name) < (Token.Operator) W (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) & (Token.Operator) & (Token.Operator) Y (Token.Name) < (Token.Operator) H (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) ) (Token.Punctuation) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %.10f  (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) 0.5 (Token.Literal.Number.Float) * (Token.Operator) ( (Token.Punctuation) X (Token.Name) + (Token.Operator) Y (Token.Name) ) (Token.Punctuation) * (Token.Operator) ( (Token.Punctuation) X (Token.Name) + (Token.Operator) Y (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) X (Token.Name) > (Token.Operator) W (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) & (Token.Operator) & (Token.Operator) Y (Token.Name) < (Token.Operator) H (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) ) (Token.Punctuation) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %.10f  (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) 0.5 (Token.Literal.Number.Float) * (Token.Operator) ( (Token.Punctuation) W (Token.Name) - (Token.Operator) X (Token.Name) + (Token.Operator) Y (Token.Name) ) (Token.Punctuation) * (Token.Operator) ( (Token.Punctuation) W (Token.Name) + (Token.Operator) Y (Token.Name) - (Token.Operator) X (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) X (Token.Name) < (Token.Operator) W (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) & (Token.Operator) & (Token.Operator) Y (Token.Name) > (Token.Operator) H (Token.Name) / (Token.Operator) 2L (Token.Literal.Number.Float) ) (Token.Punctuation) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %.10f  (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) 0.5 (Token.Literal.Number.Float) * (Token.Operator) ( (Token.Punctuation) H (Token.Name) + (Token.Operator) X (Token.Name) - (Token.Operator) Y (Token.Name) ) (Token.Punctuation) * (Token.Operator) ( (Token.Punctuation) H (Token.Name) - (Token.Operator) Y (Token.Name) + (Token.Operator) X (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %ld  (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) max (Token.Name) ( (Token.Punctuation) min (Token.Name) ( (Token.Punctuation) W (Token.Name) * (Token.Operator) Y (Token.Name) , (Token.Punctuation) W (Token.Name) * (Token.Operator) ( (Token.Punctuation) H (Token.Name) - (Token.Operator) Y (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation) min (Token.Name) ( (Token.Punctuation) X (Token.Name) * (Token.Operator) H (Token.Name) , (Token.Punctuation) ( (Token.Punctuation) W (Token.Name) - (Token.Operator) X (Token.Name) ) (Token.Punctuation) * (Token.Operator) H (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) ( (Token.Punctuation) abs (Token.Name) ( (Token.Punctuation) X (Token.Name) - (Token.Operator) ( (Token.Punctuation) double (Token.Keyword.Type) ) (Token.Punctuation) W (Token.Name) / (Token.Operator) 2.0 (Token.Literal.Number.Float) ) (Token.Punctuation) < (Token.Operator) EPS (Token.Name) & (Token.Operator) & (Token.Operator) abs (Token.Name) ( (Token.Punctuation) Y (Token.Name) - (Token.Operator) ( (Token.Punctuation) double (Token.Keyword.Type) ) (Token.Punctuation) H (Token.Name) / (Token.Operator) 2.0 (Token.Literal.Number.Float) ) (Token.Punctuation) < (Token.Operator) EPS (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) puts (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) 1 (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) puts (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) 0 (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) argc (Token.Name) , (Token.Punctuation) char (Token.Keyword.Type) * (Token.Operator) * (Token.Operator) argv (Token.Name) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) BEGIN (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) solve (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) END (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)