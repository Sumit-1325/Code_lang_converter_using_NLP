# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mem(dp,a) memset(dp,a,sizeof(dp)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb(x) push_back(x) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define m_p(x,y) make_pair(x,y) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i,a,b) for(ll i=a;i<b;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define repush_back(i,a,b) for(ll i=a;i>=b;i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define f(n) for(ll i=0;i<n;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define r(n) for(ll j=0;j<n;j++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define F first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define S second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pi 3.14159265359 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define hs ios_base::sync_with_stdio(false);cin.tie(NULL); (Token.Comment.Preproc)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) HRX (Token.Name) = (Token.Operator) 1e18 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) INF (Token.Name) = (Token.Operator) 1e9 (Token.Literal.Number.Float) + (Token.Operator) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) X (Token.Name) , (Token.Punctuation) Y (Token.Name) , (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) X (Token.Name) > (Token.Operator) > (Token.Operator) Y (Token.Name) > (Token.Operator) > (Token.Operator) x (Token.Name) > (Token.Operator) > (Token.Operator) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) float (Token.Keyword.Type)   (Token.Text.Whitespace) area1 (Token.Name) = (Token.Operator) ( (Token.Punctuation) x (Token.Name) * (Token.Operator) Y (Token.Name) ) (Token.Punctuation) / (Token.Operator) 1.0 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) float (Token.Keyword.Type)   (Token.Text.Whitespace) area2 (Token.Name) = (Token.Operator) ( (Token.Punctuation) ( (Token.Punctuation) X (Token.Name) - (Token.Operator) x (Token.Name) ) (Token.Punctuation) * (Token.Operator) Y (Token.Name) ) (Token.Punctuation) / (Token.Operator) 1.0 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) float (Token.Keyword.Type)   (Token.Text.Whitespace) area3 (Token.Name) = (Token.Operator) ( (Token.Punctuation) y (Token.Name) * (Token.Operator) X (Token.Name) ) (Token.Punctuation) / (Token.Operator) 1.0 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) float (Token.Keyword.Type)   (Token.Text.Whitespace) area4 (Token.Name) = (Token.Operator) ( (Token.Punctuation) ( (Token.Punctuation) Y (Token.Name) - (Token.Operator) y (Token.Name) ) (Token.Punctuation) * (Token.Operator) Y (Token.Name) ) (Token.Punctuation) / (Token.Operator) 1.0 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) float (Token.Keyword.Type)   (Token.Text.Whitespace) minn1 (Token.Name) = (Token.Operator) min (Token.Name) ( (Token.Punctuation) area1 (Token.Name) , (Token.Punctuation) area2 (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) float (Token.Keyword.Type)   (Token.Text.Whitespace) minn2 (Token.Name) = (Token.Operator) min (Token.Name) ( (Token.Punctuation) area3 (Token.Name) , (Token.Punctuation) area4 (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) float (Token.Keyword.Type)   (Token.Text.Whitespace) maxx (Token.Name) = (Token.Operator) max (Token.Name) ( (Token.Punctuation) minn1 (Token.Name) , (Token.Punctuation) minn2 (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) fixed (Token.Name) < (Token.Operator) < (Token.Operator) setprecision (Token.Name) ( (Token.Punctuation) 9 (Token.Literal.Number.Integer) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) maxx (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) X (Token.Name) % (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) Y (Token.Name) % (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) X (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) x (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) Y (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) y (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)     (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) 1 (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)   (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)     (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) 0 (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)