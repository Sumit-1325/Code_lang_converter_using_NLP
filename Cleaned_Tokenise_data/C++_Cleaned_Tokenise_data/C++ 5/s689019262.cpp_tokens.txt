 (Token.Comment.Single)  (Token.Text.Whitespace) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <deque> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bitset> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <typeinfo> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <numeric> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cassert> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stdio.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unistd.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stdlib.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <time.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <sys/time.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define DEBUG 0 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define V vector (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define M unordered_map (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define rep(i,n) for(ll i=0LL;i<n;++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define srep(i,s,n) for(ll i=s;i<n;++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rrep(i,n) for(ll i=n-1LL;i>=0LL;--i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ALL(a) (a).begin(),(a).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define CIN(x) do { \ (Token.Comment.Preproc)  (Token.Comment.Preproc)     assert(!cin.eof()); \ (Token.Comment.Preproc)  (Token.Comment.Preproc)     cin >> x; \ (Token.Comment.Preproc)  (Token.Comment.Preproc)     assert(!cin.fail()); \ (Token.Comment.Preproc)  (Token.Comment.Preproc) } while(0); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) if DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug_print(...) _debug_print(__VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug_printf(...) printf(__VA_ARGS__) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug_print_time _debug_print_time (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else  (Token.Comment.Preproc)  (Token.Comment.Single) # (Token.Comment.Preproc) define debug_print(...) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug_printf(...) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define debug_print_time (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ull (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) tuple (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) t2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) tuple (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) t3 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) tuple (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) t4 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) tuple (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) t5 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) priority_queue_incr (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) priority_queue (Token.Name) < (Token.Operator) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator) , (Token.Punctuation)   (Token.Text.Whitespace) greater (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) S (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) M (Token.Name) < (Token.Operator) S (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) m (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) S (Token.Name)   (Token.Text.Whitespace) k (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) default_value (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) m (Token.Name) . (Token.Punctuation) find (Token.Name) ( (Token.Punctuation) k (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) m (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) m (Token.Name) [ (Token.Punctuation) k (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) default_value (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) m (Token.Name) [ (Token.Punctuation) k (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) S (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) incr_m (Token.Name) ( (Token.Punctuation) M (Token.Name) < (Token.Operator) S (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) m (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) S (Token.Name)   (Token.Text.Whitespace) k (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) m (Token.Name) . (Token.Punctuation) find (Token.Name) ( (Token.Punctuation) k (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) m (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) m (Token.Name) [ (Token.Punctuation) k (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) m (Token.Name) [ (Token.Punctuation) k (Token.Name) ] (Token.Punctuation) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) UnionFind (Token.Name.Class)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) parent (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator) count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator) rank (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) UnionFind (Token.Name) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) parent (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) new (Token.Keyword)   (Token.Text.Whitespace) ull (Token.Name) [ (Token.Punctuation) n (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) count (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) new (Token.Keyword)   (Token.Text.Whitespace) ull (Token.Name) [ (Token.Punctuation) n (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) rank (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) new (Token.Keyword)   (Token.Text.Whitespace) ull (Token.Name) [ (Token.Punctuation) n (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0ULL (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) count (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ~ (Token.Operator) UnionFind (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) delete (Token.Keyword)   (Token.Text.Whitespace) rank (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) delete (Token.Keyword)   (Token.Text.Whitespace) count (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) delete (Token.Keyword)   (Token.Text.Whitespace) parent (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) unite (Token.Name) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) j (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) rooti (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) rootj (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) j (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) rooti (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) rootj (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) rank (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) rooti (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) rooti (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) count (Token.Name) [ (Token.Punctuation) rooti (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) count (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) rooti (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) rootj (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) count (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) count (Token.Name) [ (Token.Punctuation) rooti (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) rank (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) rooti (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) same (Token.Name) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) j (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) j (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) UnionFindM (Token.Name.Class)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) M (Token.Name) < (Token.Operator) ull (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ull (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rank (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) root (Token.Name.Function) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) parent_i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) parent (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) parent_i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) parent_i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) unite (Token.Name.Function) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) j (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) rooti (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) rootj (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) j (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) rooti (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) rootj (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) get_m (Token.Name) ( (Token.Punctuation) rank (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rootj (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0ULL (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) rank (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rooti (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0ULL (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) rooti (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) count (Token.Name) [ (Token.Punctuation) rooti (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rooti (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 1ULL (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rootj (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 1ULL (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) j (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) rooti (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) rootj (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) count (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rootj (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 1ULL (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rooti (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 1ULL (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) get_m (Token.Name) ( (Token.Punctuation) rank (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rootj (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0ULL (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) get_m (Token.Name) ( (Token.Punctuation) rank (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) rooti (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0ULL (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) rank (Token.Name) [ (Token.Punctuation) rootj (Token.Name) ] (Token.Punctuation) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) same (Token.Name.Function) ( (Token.Punctuation) ull (Token.Name)   (Token.Text.Whitespace) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) j (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ( (Token.Punctuation) j (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) BIT (Token.Name.Class)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) tree (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) size (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) BIT (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) init (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) tree (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) new (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name) [ (Token.Punctuation) n (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) size (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) init (Token.Name) ( (Token.Punctuation) init (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) init (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) init (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) memset (Token.Name) ( (Token.Punctuation) tree (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) sizeof (Token.Keyword) ( (Token.Punctuation) ll (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) size (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i0 (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) size (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) i0 (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) size (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) init (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) - (Token.Operator) idx (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) add (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) idx (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) size (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) - (Token.Operator) idx (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) sum (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) idx (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) tree (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) - (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) - (Token.Operator) idx (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) MaxFlow (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) links (Token.Name) [ (Token.Punctuation) 1005 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) capacities (Token.Name) [ (Token.Punctuation) 1005 (Token.Literal.Number.Integer) ] (Token.Punctuation) [ (Token.Punctuation) 1005 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) nodes (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) MaxFlow (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) nodes (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace)  (Token.Comment.Single)          (Token.Text.Whitespace)  (Token.Comment.Single)          (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) nodes (Token.Name) + (Token.Operator) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) links (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) clear (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) memset (Token.Name) ( (Token.Punctuation) capacities (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) sizeof (Token.Keyword) ( (Token.Punctuation) capacities (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) nodes (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) nodes (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) add_path (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) capacity (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) links (Token.Name) [ (Token.Punctuation) a (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) links (Token.Name) [ (Token.Punctuation) b (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) capacities (Token.Name) [ (Token.Punctuation) a (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) b (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) capacity (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) capacities (Token.Name) [ (Token.Punctuation) b (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) a (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) solve (Token.Name) ( (Token.Punctuation) void (Token.Keyword.Type) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) deque (Token.Name) < (Token.Operator) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) clear (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) start (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) start (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push_front (Token.Name) ( (Token.Punctuation) start (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) checked (Token.Name) [ (Token.Punctuation) nodes (Token.Name) + (Token.Operator) 2 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) memset (Token.Name) ( (Token.Punctuation) checked (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) sizeof (Token.Keyword) ( (Token.Punctuation) checked (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) found (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) ( (Token.Punctuation) q (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) path (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) pop_front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) last (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) path (Token.Name) [ (Token.Punctuation) path (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) checked (Token.Name) [ (Token.Punctuation) last (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) last (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) nodes (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) found (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) path (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) checked (Token.Name) [ (Token.Punctuation) last (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) next (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) links (Token.Name) [ (Token.Punctuation) last (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) capacities (Token.Name) [ (Token.Punctuation) last (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) next (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) newpath (Token.Name) ( (Token.Punctuation) path (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) newpath (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) next (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push_front (Token.Name) ( (Token.Punctuation) newpath (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) found (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) flowcount (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) capacities (Token.Name) [ (Token.Punctuation) found (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ] (Token.Punctuation) [ (Token.Punctuation) found (Token.Name) [ (Token.Punctuation) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) found (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) src (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) found (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) dst (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) found (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) flowcount (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) min (Token.Name) ( (Token.Punctuation) flowcount (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) capacities (Token.Name) [ (Token.Punctuation) src (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) dst (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) found (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) src (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) found (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) dst (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) found (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) capacities (Token.Name) [ (Token.Punctuation) src (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) dst (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) flowcount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                      (Token.Text.Whitespace) capacities (Token.Name) [ (Token.Punctuation) dst (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) src (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) flowcount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) flowcount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) SegmentTree (Token.Name.Class)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) nodes (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) t2 (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) ranges (Token.Name) ; (Token.Punctuation)    (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) nodecount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) itemcount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) unit (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) * (Token.Operator) op (Token.Name) ) (Token.Punctuation) ( (Token.Punctuation) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) SegmentTree (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) itemcount (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) unit (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) op (Token.Name) ( (Token.Punctuation) T (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) orig_itemcount (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) itemcount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) itemcount (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) this (Token.Keyword) - (Token.Operator) > (Token.Operator) itemcount (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) orig_itemcount (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) itemcount (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) nodecount (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) itemcount (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) nodes (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) new (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name) [ (Token.Punctuation) nodecount (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ranges (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) new (Token.Keyword)   (Token.Text.Whitespace) t2 (Token.Name) [ (Token.Punctuation) nodecount (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) unit (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) unit (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) op (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) op (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) start (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) end (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) itemcount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) len (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) itemcount (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) nodecount (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) nodes (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) unit (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ranges (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) t2 (Token.Name) ( (Token.Punctuation) start (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) end (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) end (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) this (Token.Keyword) - (Token.Operator) > (Token.Operator) itemcount (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) len (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) start (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) end (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) len (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) start (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) end (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) end (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) start (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) len (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) update (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) k (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) k (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) itemcount (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) nodes (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) nodes (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) op (Token.Name) ( (Token.Punctuation) nodes (Token.Name) [ (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ] (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) nodes (Token.Name) [ (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ! (Token.Operator) idx (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) query (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) start (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) end (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) _query (Token.Name) ( (Token.Punctuation) start (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) end (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) _query (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) start (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) end (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) idx (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) rstart (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 0 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) ranges (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) rend (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 1 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) ranges (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) start (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) rstart (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) rend (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) end (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) nodes (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) rend (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) start (Token.Name)   (Token.Text.Whitespace) | (Token.Operator) | (Token.Operator)   (Token.Text.Whitespace) end (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) rstart (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) unit (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) left (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) _query (Token.Name) ( (Token.Punctuation) start (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) end (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) right (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) _query (Token.Name) ( (Token.Punctuation) start (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) end (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) idx (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) op (Token.Name) ( (Token.Punctuation) left (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) right (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) llin (Token.Name.Function) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) CIN (Token.Name) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) llinl1 (Token.Name.Function) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) count (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) count (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) CIN (Token.Name) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) llinl2 (Token.Name.Function) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) count (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) count (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) CIN (Token.Name) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) t2 (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) llinl3 (Token.Name.Function) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) count (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) count (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) c (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) CIN (Token.Name) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) c (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) t3 (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) c (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) llinl4 (Token.Name.Function) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) count (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) count (Token.Name)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) c (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) d (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) CIN (Token.Name) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) c (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) d (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) t4 (Token.Name) ( (Token.Punctuation) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) c (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) d (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) llina (Token.Name.Function) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) count (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) llinl1 (Token.Name) ( (Token.Punctuation) v (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) count (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) min (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) min (Token.Name) ( (Token.Punctuation) ret (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) v (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) ret (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) absll (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) - (Token.Operator) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod_mlt (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) y (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) % (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) ll (Token.Name)   (Token.Text.Whitespace) mod_pow (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) base (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) exp (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) exp (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) exp (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) base (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) % (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) base (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) base (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) base (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) exp (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) ll (Token.Name)   (Token.Text.Whitespace) mod_inv (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) mod_pow (Token.Name) ( (Token.Punctuation) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) mod (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) mod (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) gcm (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) z (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) z (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) V (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) v (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) sort_reverse (Token.Name) ( (Token.Punctuation) V (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) v (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) sort (Token.Name) ( (Token.Punctuation) v (Token.Name) . (Token.Punctuation) begin (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) v (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) greater (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) get_divisors (Token.Name) ( (Token.Punctuation) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) retlist (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) sqrt (Token.Name) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 3L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) retlist (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) retlist (Token.Name) . (Token.Punctuation) push_back (Token.Name) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) void (Token.Keyword.Type)   (Token.Text.Whitespace) get_factors (Token.Name) ( (Token.Punctuation) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) retlist (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) retlist (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name) ) (Token.Punctuation) ( (Token.Punctuation) sqrt (Token.Name) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 3L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) retlist (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) i (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) retlist (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) is_prime (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) factors (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) factors2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) get_factors (Token.Name) ( (Token.Punctuation) factors (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) factor (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) factors (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) factor (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) factors2 (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) factor (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) factors2 (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) factors2 (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) intersection (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)                    (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) result (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) set_intersection (Token.Name) ( (Token.Punctuation) ALL (Token.Name) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) ALL (Token.Name) ( (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) inserter (Token.Name) ( (Token.Punctuation) result (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) result (Token.Name) . (Token.Punctuation) end (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) combination (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) * (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) / (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ull (Token.Name)   (Token.Text.Whitespace) mod_combination (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) y (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) y (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) i (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) ret (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) - (Token.Operator) - (Token.Operator) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ret (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) ret (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) mod_inv (Token.Name) ( (Token.Punctuation) i (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) mod (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) % (Token.Operator)   (Token.Text.Whitespace) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) ret (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_linklist (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) t2 (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) srclist (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) dstlist (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) src (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) srclist (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 0 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) src (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) b (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 1 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) src (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) dstlist (Token.Name) [ (Token.Punctuation) a (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) b (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) dstlist (Token.Name) [ (Token.Punctuation) b (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) a (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_parental_relation (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) linklist (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) root (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)                              (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) children (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) queue (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) checked (Token.Name) [ (Token.Punctuation) n (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) memset (Token.Name) ( (Token.Punctuation) checked (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) sizeof (Token.Keyword) ( (Token.Punctuation) checked (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) root (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) checked (Token.Name) [ (Token.Punctuation) root (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) root (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) root (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) root (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) ( (Token.Punctuation) q (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) now (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) next (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) linklist (Token.Name) [ (Token.Punctuation) now (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) checked (Token.Name) [ (Token.Punctuation) next (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) next (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) checked (Token.Name) [ (Token.Punctuation) next (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) next (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) now (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) children (Token.Name) [ (Token.Punctuation) now (Token.Name) ] (Token.Punctuation) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) next (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) next (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) now (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_subtree_sizes (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) child_count (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) parents (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)                          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) subtree_sizes (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) remain_count (Token.Name) [ (Token.Punctuation) n (Token.Name) + (Token.Operator) 1L (Token.Literal.Number.Float) L (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) memcpy (Token.Name) ( (Token.Punctuation) remain_count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) child_count (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) sizeof (Token.Keyword) ( (Token.Punctuation) remain_count (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) queue (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) srep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) node (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) + (Token.Operator) 1L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) subtree_sizes (Token.Name) [ (Token.Punctuation) node (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) remain_count (Token.Name) [ (Token.Punctuation) node (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) node (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ! (Token.Operator) q (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) node (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) parent (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parents (Token.Name) [ (Token.Punctuation) node (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) node (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) remain_count (Token.Name) [ (Token.Punctuation) parent (Token.Name) ] (Token.Punctuation) - (Token.Operator) - (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) subtree_sizes (Token.Name) [ (Token.Punctuation) parent (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) subtree_sizes (Token.Name) [ (Token.Punctuation) node (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) remain_count (Token.Name) [ (Token.Punctuation) parent (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) parent (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) get_centroids (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) children (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) subtree_sizes (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)                     (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) root (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) centroids (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) queue (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) root (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) ! (Token.Operator) q (Token.Name) . (Token.Punctuation) empty (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) now (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) front (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)   (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) pop (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) is_centroid (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) true (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) child (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) children (Token.Name) [ (Token.Punctuation) now (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) q (Token.Name) . (Token.Punctuation) push (Token.Name) ( (Token.Punctuation) child (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) subtree_sizes (Token.Name) [ (Token.Punctuation) child (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) is_centroid (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) n (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) subtree_sizes (Token.Name) [ (Token.Punctuation) now (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) is_centroid (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) false (Token.Name.Builtin) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) is_centroid (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) centroids (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) now (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) centroids (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) | (Token.Operator) | (Token.Operator)   (Token.Text.Whitespace) centroids (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define POW_ANCESTOR_MAXSIZE   20 (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace)  (Token.Comment.Single) void (Token.Keyword.Type)   (Token.Text.Whitespace) make_pow_ancestor (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)                         (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) * (Token.Operator) pow_ancestor (Token.Name) ) (Token.Punctuation) [ (Token.Punctuation) POW_ANCESTOR_MAXSIZE (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) parent (Token.Name) [ (Token.Punctuation) i (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) pow2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) pow (Token.Name) ( (Token.Punctuation) 2 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) pow2 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) pow2 (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i0 (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) i (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) i0 (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) prev (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) pow2 (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) pow2 (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) prev (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) pow2 (Token.Name) -1 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) get_common_ancestor (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) y (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)                         (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) * (Token.Operator) pow_ancestor (Token.Name) ) (Token.Punctuation) [ (Token.Punctuation) POW_ANCESTOR_MAXSIZE (Token.Name) ] (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)                         (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) level (Token.Name) [ (Token.Punctuation) x (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) y (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) diff (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) y (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) x (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) diff (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) bit (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) diff (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) - (Token.Operator) diff (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) y (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) ( (Token.Punctuation) int (Token.Keyword.Type) ) (Token.Punctuation) log2 (Token.Name) ( (Token.Punctuation) bit (Token.Name) ) (Token.Punctuation) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) diff (Token.Name)   (Token.Text.Whitespace) - (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) bit (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) diff (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) x (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) level (Token.Name) [ (Token.Punctuation) y (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) diff (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) bit (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) diff (Token.Name)   (Token.Text.Whitespace) & (Token.Operator)   (Token.Text.Whitespace) - (Token.Operator) diff (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) x (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) ( (Token.Punctuation) int (Token.Keyword.Type) ) (Token.Punctuation) log2 (Token.Name) ( (Token.Punctuation) bit (Token.Name) ) (Token.Punctuation) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) diff (Token.Name)   (Token.Text.Whitespace) - (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) bit (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rrep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ( (Token.Punctuation) int (Token.Keyword.Type) ) (Token.Punctuation) log2 (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) + (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) pow_ancestor (Token.Name) [ (Token.Punctuation) x (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) y (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) x (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) y (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) pow_ancestor (Token.Name) [ (Token.Punctuation) x (Token.Name) ] (Token.Punctuation) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) kmp_init (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) pattern (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1LL (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) plen (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pattern (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) prefix_end (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) suffix_end (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) pattern (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) while (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) prefix_end (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) pattern (Token.Name) [ (Token.Punctuation) suffix_end (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pattern (Token.Name) [ (Token.Punctuation) prefix_end (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) prefix_end (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) prefix_end (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) suffix_end (Token.Name) + (Token.Operator) 1 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) + (Token.Operator) + (Token.Operator) prefix_end (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single) void (Token.Keyword.Type)   (Token.Text.Whitespace) kmp_search (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) text (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) pattern (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) founds (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) text_size (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) text (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) pattern_size (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pattern (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) text_start (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) pattern_idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) assert (Token.Name) ( (Token.Punctuation) pattern_size (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) text_size (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) ; (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) text_start (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) pattern_idx (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) text_size (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) pattern_idx (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pattern_size (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) text (Token.Name) [ (Token.Punctuation) text_start (Token.Name) + (Token.Operator) pattern_idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pattern (Token.Name) [ (Token.Punctuation) pattern_idx (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) pattern_idx (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) pattern_idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pattern_size (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) founds (Token.Name) . (Token.Punctuation) pb (Token.Name) ( (Token.Punctuation) text_start (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) pattern_idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) pattern_idx (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) text_start (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) pattern_size (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) pattern_idx (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) text_start (Token.Name)   (Token.Text.Whitespace) + (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) pattern_idx (Token.Name)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) pattern_idx (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) pattern_idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) kmp_next (Token.Name) [ (Token.Punctuation) pattern_idx (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) pattern_idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) text (Token.Name) [ (Token.Punctuation) text_start (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) ! (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) pattern (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)                  (Token.Text.Whitespace) text_start (Token.Name) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) z_algorithm (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) string (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) str (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) . (Token.Punctuation) size (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) base_idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 0L (Token.Literal.Number.Float) L (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) memset (Token.Name) ( (Token.Punctuation) matchcounts (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) sizeof (Token.Keyword) ( (Token.Punctuation) ll (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) srep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) 1L (Token.Literal.Number.Float) L (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) checked_len (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) base_idx (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) base_idx (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) idx (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) idx (Token.Name) - (Token.Operator) base_idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator)   (Token.Text.Whitespace) checked_len (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) idx (Token.Name) - (Token.Operator) base_idx (Token.Name) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) continue (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) start (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) 0L (Token.Literal.Number.Float) L (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) base_idx (Token.Name)   (Token.Text.Whitespace) + (Token.Operator)   (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) base_idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) - (Token.Operator)   (Token.Text.Whitespace) idx (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) start (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) srep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) cmp (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) start (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) - (Token.Operator) idx (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) str (Token.Name) [ (Token.Punctuation) cmp (Token.Name) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) str (Token.Name) [ (Token.Punctuation) idx (Token.Name) + (Token.Operator) cmp (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) idx (Token.Name) ] (Token.Punctuation) + (Token.Operator) + (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) break (Token.Keyword) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) base_idx (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) idx (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) matchcounts (Token.Name) [ (Token.Punctuation) 0 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) n (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) t2 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 0 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 1 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) t3 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 0 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 1 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x3 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 2 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x3 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) t4 (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) x (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 0 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x2 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 1 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x3 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 2 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x4 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) get (Token.Name) < (Token.Operator) 3 (Token.Literal.Number.Integer) > (Token.Operator) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x2 (Token.Name)  (Token.Text.Whitespace)          (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x3 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)  --  (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) x4 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) xarray (Token.Name) [ (Token.Punctuation) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rep (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) i (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) xarray (Token.Name) [ (Token.Punctuation) i (Token.Name) ] (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) V (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) xlist (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) xlist (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) --  (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) set (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) xset (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) xset (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) --  (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)   (Token.Text.Whitespace) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) S (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) M (Token.Name) < (Token.Operator) S (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) & (Token.Operator) xlist (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) auto (Token.Keyword)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) : (Token.Operator)   (Token.Text.Whitespace) xlist (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) S (Token.Name)   (Token.Text.Whitespace) k (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) . (Token.Punctuation) first (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) v (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) . (Token.Punctuation) second (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) ==== (Token.Literal.String) " (Token.Literal.String)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) K= (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) k (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String) V= (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) _debug_print (Token.Name) ( (Token.Punctuation) v (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _debug_print_time (Token.Name) ( (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) char (Token.Keyword.Type)   (Token.Text.Whitespace) * (Token.Operator) prefix (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) timeval (Token.Name.Class)   (Token.Text.Whitespace) tv (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) gettimeofday (Token.Name) ( (Token.Punctuation) & (Token.Operator) tv (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) NULL (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) tm (Token.Name.Class)   (Token.Text.Whitespace) * (Token.Operator) tm (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) localtime (Token.Name) ( (Token.Punctuation) & (Token.Operator) tv (Token.Name) . (Token.Punctuation) tv_sec (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) -- %s %02d:%02d:%02d.%06ld (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation)  (Token.Text.Whitespace)             (Token.Text.Whitespace) prefix (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) tm (Token.Name) - (Token.Operator) > (Token.Operator) tm_hour (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) tm (Token.Name) - (Token.Operator) > (Token.Operator) tm_min (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) tm (Token.Name) - (Token.Operator) > (Token.Operator) tm_sec (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) tv (Token.Name) . (Token.Punctuation) tv_usec (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) setprecision (Token.Name) ( (Token.Punctuation) 12 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) _main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) _main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) w (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) llin (Token.Name) ( (Token.Punctuation) w (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) h (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) llin (Token.Name) ( (Token.Punctuation) h (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) llin (Token.Name) ( (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) llin (Token.Name) ( (Token.Punctuation) y (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ans1 (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) ( (Token.Punctuation) double (Token.Keyword.Type) ) (Token.Punctuation) w (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) double (Token.Keyword.Type) ) (Token.Punctuation) h (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2.0 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ans1 (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) x (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) w (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) y (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) 2L (Token.Literal.Number.Float) L (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) h (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)