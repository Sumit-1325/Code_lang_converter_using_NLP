# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define sf(n) scanf("%d", &n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pd(n) printf("%.12lf", n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pf(n) printf("%d", n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define p() printf("\n") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ps() printf(" ") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ll long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ull unsigned long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define MAX 1e9 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mod 1000 * 1000 * 1000 + 7 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ex 1e18 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define dbl 2e09 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define qu(q) queue<int> q (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pqu(q) priority_queue<int> q (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define len(s) s.length() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sz(x) int(x.size()) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb(x) push_back(x) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(x) x.begin(), x.end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rall(x) x.rbegin(), x.rend() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define F first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define S second (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define clr(x) x.clear() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define LOG(x) std::cout << x << std::endl; (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) LL_INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) PI (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) acos (Token.Name) ( (Token.Punctuation) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dx (Token.Name) [ (Token.Punctuation) 4 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) dy (Token.Name) [ (Token.Punctuation) 4 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) , (Token.Punctuation)   (Token.Text.Whitespace) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) [ (Token.Punctuation) 100005 (Token.Literal.Number.Integer) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) b (Token.Name) [ (Token.Punctuation) 100005 (Token.Literal.Number.Integer) ] (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) w (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) h (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) w (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) h (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %9f (Token.Literal.String) " (Token.Literal.String) , (Token.Punctuation) double (Token.Keyword.Type) ( (Token.Punctuation) w (Token.Name)   (Token.Text.Whitespace) * (Token.Operator)   (Token.Text.Whitespace) h (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) w (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) and (Token.Keyword)   (Token.Text.Whitespace) h (Token.Name)   (Token.Text.Whitespace) / (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) endl (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)