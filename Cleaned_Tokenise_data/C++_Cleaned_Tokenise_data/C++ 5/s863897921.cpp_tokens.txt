 (Token.Comment.Single) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) llint (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define inf 1e18 (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mod 1000000007 (Token.Comment.Preproc)  (Token.Comment.Preproc) priority_queue (Token.Name) < (Token.Operator) llint (Token.Name) , (Token.Punctuation) vector (Token.Name) < (Token.Operator) llint (Token.Name) > (Token.Operator) , (Token.Punctuation) greater (Token.Name) < (Token.Operator) llint (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) que (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) priority_queue (Token.Name) < (Token.Operator) llint (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) Que (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)   (Token.Text.Whitespace) inline (Token.Keyword.Reserved)   (Token.Text.Whitespace) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name) & (Token.Operator)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) if (Token.Keyword)   (Token.Text.Whitespace) ( (Token.Punctuation) a (Token.Name)   (Token.Text.Whitespace) > (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)   (Token.Text.Whitespace) a (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) b (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)   (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)   (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) W (Token.Name) , (Token.Punctuation) H (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) void (Token.Keyword.Type)   (Token.Text.Whitespace) solve (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) W (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) H (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) x (Token.Name)   (Token.Text.Whitespace) > (Token.Operator) > (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) c (Token.Name) = (Token.Operator) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) W (Token.Name) = (Token.Operator) = (Token.Operator) x (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) H (Token.Name) = (Token.Operator) = (Token.Operator) y (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) c (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ans (Token.Name) = (Token.Operator) ( (Token.Punctuation) H (Token.Name) * (Token.Operator) W (Token.Name) ) (Token.Punctuation) / (Token.Operator) 2.0 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %f %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) ans (Token.Name) , (Token.Punctuation) c (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)    (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) solve (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)