# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iostream> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <algorithm> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bitset> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <queue> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <stack> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <string> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <utility> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <vector> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <complex> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <deque> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <valarray> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_map> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <unordered_set> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <array> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cassert> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <cmath> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <functional> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <iomanip> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <chrono> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <random> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <numeric> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ld (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) str (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) string (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) string (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vs (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) bool (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) vb (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) char (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) vc (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vs (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvs (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vc (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvc (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) vb (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) vvb (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) P (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation) ll (Token.Name) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define REP(i, n) for (ll i = 0; i < (int)(n); i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define RREP(i, n) for (ll i = (int)(n)-1; i > -1 ; i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define IN(T, x) T x;cin >> x; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define AIN(T, a, n) vector<T> a(n);REP(i, n){cin >> a[i];} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define A2IN(T1, a, T2, b, n) vector<T1> a(n);vector<T2> b(n);REP(i, n){cin >> a[i] >> b[i];} (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ALL(a) (a).begin(),(a).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define SORT(a) sort(ALL(a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define RSORT(a) SORT(a);reverse(ALL(a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PF first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define PS second (Token.Comment.Preproc)  (Token.Comment.Preproc) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmax (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) < (Token.Operator) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) a (Token.Name) = (Token.Operator) b (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) bool (Token.Keyword.Type)   (Token.Text.Whitespace) chmin (Token.Name) ( (Token.Punctuation) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) a (Token.Name) , (Token.Punctuation) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) b (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) if (Token.Keyword) ( (Token.Punctuation) b (Token.Name) < (Token.Operator) a (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) a (Token.Name) = (Token.Operator) b (Token.Name) ; (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) typename (Token.Keyword)   (Token.Text.Whitespace) A (Token.Name.Class) , (Token.Punctuation)   (Token.Text.Whitespace) size_t (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) typename (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator) void (Token.Keyword.Type)   (Token.Text.Whitespace) Fill (Token.Name) ( (Token.Punctuation) A (Token.Name)   (Token.Text.Whitespace) ( (Token.Punctuation) & (Token.Operator) array (Token.Name) ) (Token.Punctuation) [ (Token.Punctuation) N (Token.Name) ] (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) val (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) fill (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) ( (Token.Punctuation) T (Token.Name) * (Token.Operator) ) (Token.Punctuation) array (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) ( (Token.Punctuation) T (Token.Name) * (Token.Operator) ) (Token.Punctuation) ( (Token.Punctuation) array (Token.Name) + (Token.Operator) N (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) val (Token.Name)   (Token.Text.Whitespace) ) (Token.Punctuation) ; (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define OUT(x) cout << x << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define OUTD(x,n) cout << fixed << setprecision(n) << x << endl; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define BOUT(b) if(b){OUT("Yes");}else{OUT("No");} (Token.Comment.Preproc)  (Token.Comment.Preproc) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) MOD (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1000000007 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 10e9 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define PI 3.14159265369; (Token.Comment.Preproc)  (Token.Comment.Preproc) ll (Token.Name)   (Token.Text.Whitespace) dx (Token.Name) [ (Token.Punctuation) 4 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) dy (Token.Name) [ (Token.Punctuation) 4 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ddx (Token.Name) [ (Token.Punctuation) 8 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ddy (Token.Name) [ (Token.Punctuation) 8 (Token.Literal.Number.Integer) ] (Token.Punctuation)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) { (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 0 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) , (Token.Punctuation) 1 (Token.Literal.Number.Integer) , (Token.Punctuation) -1 (Token.Literal.Number.Integer) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)   (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) ios (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace)  (Token.Text.Whitespace)    (Token.Text.Whitespace) IN (Token.Name) ( (Token.Punctuation) ll (Token.Name) , (Token.Punctuation) W (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) IN (Token.Name) ( (Token.Punctuation) ll (Token.Name) , (Token.Punctuation) H (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) IN (Token.Name) ( (Token.Punctuation) ll (Token.Name) , (Token.Punctuation) x (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) IN (Token.Name) ( (Token.Punctuation) ll (Token.Name) , (Token.Punctuation) y (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) cout (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) fixed (Token.Name)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) setprecision (Token.Name) ( (Token.Punctuation) 10 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) ( (Token.Punctuation) ld (Token.Name) ) (Token.Punctuation) ( (Token.Punctuation) W (Token.Name) * (Token.Operator) H (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation)   (Token.Text.Whitespace) < (Token.Operator) < (Token.Operator)   (Token.Text.Whitespace) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) W (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) x (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) H (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) = (Token.Operator)   (Token.Text.Whitespace) y (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) OUT (Token.Name) ( (Token.Punctuation) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation) else (Token.Keyword) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) OUT (Token.Name) ( (Token.Punctuation) 0 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)    (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)