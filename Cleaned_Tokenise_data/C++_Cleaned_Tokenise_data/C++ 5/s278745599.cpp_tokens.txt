# (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define _GLIBCXX_DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rep(i,n) for(int i = 0; i < (n); ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define REP(i,x,n) for(int i = (x); i < (n); ++i) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ll long long (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define P pair<ll,ll> (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(v) (v).begin(),(v).end() (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rall(v) (v).rbegin(),(v).rend() (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) mod (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e9 (Token.Literal.Number.Float) + (Token.Operator) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) INF (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) 1e18 (Token.Literal.Number.Float) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) pi (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) acos (Token.Name) ( (Token.Punctuation) -1 (Token.Literal.Number.Integer) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) void (Token.Keyword.Type) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) w (Token.Name) , (Token.Punctuation) h (Token.Name) , (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) w (Token.Name) > (Token.Operator) > (Token.Operator) h (Token.Name) > (Token.Operator) > (Token.Operator) x (Token.Name) > (Token.Operator) > (Token.Operator) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) s (Token.Name)   (Token.Text.Whitespace) = (Token.Operator)   (Token.Text.Whitespace) max (Token.Name) ( (Token.Punctuation) min (Token.Name) ( (Token.Punctuation) ( (Token.Punctuation) h (Token.Name) - (Token.Operator) y (Token.Name) ) (Token.Punctuation) * (Token.Operator) w (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) h (Token.Name) * (Token.Operator) w (Token.Name) - (Token.Operator) ( (Token.Punctuation) h (Token.Name) - (Token.Operator) y (Token.Name) ) (Token.Punctuation) * (Token.Operator) w (Token.Name) ) (Token.Punctuation) , (Token.Punctuation)   (Token.Text.Whitespace) min (Token.Name) ( (Token.Punctuation) ( (Token.Punctuation) w (Token.Name) - (Token.Operator) x (Token.Name) ) (Token.Punctuation) * (Token.Operator) h (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace) h (Token.Name) * (Token.Operator) w (Token.Name) - (Token.Operator) ( (Token.Punctuation) w (Token.Name) - (Token.Operator) x (Token.Name) ) (Token.Punctuation) * (Token.Operator) h (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) printf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %f %d (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) s (Token.Name) , (Token.Punctuation) 2 (Token.Literal.Number.Integer) * (Token.Operator) w (Token.Name) = (Token.Operator) = (Token.Operator) x (Token.Name)   (Token.Text.Whitespace) & (Token.Operator) & (Token.Operator)   (Token.Text.Whitespace) 2 (Token.Literal.Number.Integer) * (Token.Operator) h (Token.Name) = (Token.Operator) = (Token.Operator) y (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)