 (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) include (Token.Comment.Preproc) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define         ash ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         pb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         sc(n) scanf("%d",&n); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         scl(n) scanf("%I64d",&n); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         sc2(m,n) scanf("%d%d",&m,&n); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         sc2l(m,n) scanf("%I64d%I64d",&m,&n); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         pf printf (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         Big(x,y) max(x,y); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         Small(x,y) min(x,y); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         input(array,size) for(int i=0;i<size;i++)cin>>array[i]; (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         newline pf("\n"); (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         f(s,l,in) for(ll i=s;i<l;i+=in) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         Max INT_MAX (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         Min INT_MIN (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         pi acos(-1.0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define         Memset(a,val) memset(a,val,sizeof(a)); (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) mod (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) 1e9 (Token.Literal.Number.Float) + (Token.Operator) 7 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) const (Token.Keyword)   (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) N (Token.Name)   (Token.Text.Whitespace) = (Token.Operator) 5e6 (Token.Literal.Number.Float) + (Token.Operator) 5 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name.Function) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) a (Token.Name) , (Token.Punctuation) b (Token.Name) , (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) a (Token.Name) > (Token.Operator) > (Token.Operator) b (Token.Name) > (Token.Operator) > (Token.Operator) x (Token.Name) > (Token.Operator) > (Token.Operator) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) res (Token.Name) , (Token.Punctuation) area (Token.Name) , (Token.Punctuation) are1 (Token.Name) , (Token.Punctuation) are2 (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) area (Token.Name) = (Token.Operator) a (Token.Name) * (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) a (Token.Name) ! (Token.Operator) = (Token.Operator) x (Token.Name) ) (Token.Punctuation) are1 (Token.Name) = (Token.Operator) ( (Token.Punctuation) a (Token.Name) - (Token.Operator) x (Token.Name) ) (Token.Punctuation) * (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) are1 (Token.Name) = (Token.Operator) a (Token.Name) * (Token.Operator) b (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) b (Token.Name) ! (Token.Operator) = (Token.Operator) y (Token.Name) ) (Token.Punctuation) are2 (Token.Name) = (Token.Operator) ( (Token.Punctuation) b (Token.Name) - (Token.Operator) y (Token.Name) ) (Token.Punctuation) * (Token.Operator) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) else (Token.Keyword)   (Token.Text.Whitespace) are2 (Token.Name) = (Token.Operator) b (Token.Name) * (Token.Operator) a (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)       (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) are1 (Token.Name) = (Token.Operator) = (Token.Operator) are2 (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) pf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %0.6f 1 (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) are1 (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) else (Token.Keyword)  (Token.Text.Whitespace)       (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)           (Token.Text.Whitespace) pf (Token.Name) ( (Token.Punctuation) " (Token.Literal.String) %0.6f 0 (Token.Literal.String) \n (Token.Literal.String.Escape) " (Token.Literal.String) , (Token.Punctuation) max (Token.Name) ( (Token.Punctuation) are1 (Token.Name) , (Token.Punctuation) are2 (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)       (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) 0 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)