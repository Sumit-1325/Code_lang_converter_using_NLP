# (Token.Comment.Preproc) pragma GCC optimize("O3") (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <bits/stdc++.h> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <ext/pb_ds/assoc_container.hpp> (Token.Comment.PreprocFile)  (Token.Comment.Preproc) # (Token.Comment.Preproc) include (Token.Comment.Preproc)   (Token.Text.Whitespace) <ext/rope> (Token.Comment.PreprocFile)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) ifndef ONLINE_JUDGE (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace)  (Token.Comment.Single) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) # (Token.Comment.Preproc) ifdef DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define IFD(...) __VA_ARGS__ (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define IFN(...) (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define L cout<<__LINE__<<"\n"; (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define PRINT(...) __VA_ARGS__ cout<<__LINE__<<" : "<<#__VA_ARGS__<<"\n" (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define PRT(x) cout<<__LINE__<<" : "<<#x<<" = "<<x<<"\n" (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) else  (Token.Comment.Preproc)  (Token.Comment.Single)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define IFD(...) (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define IFN(...) __VA_ARGS__ (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define L (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define PRINT(...) __VA_ARGS__ (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) # (Token.Comment.Preproc) define PRT(x) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) endif  (Token.Comment.Preproc)  (Token.Comment.Single)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define it iterator (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define rit reverse_iterator (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mp make_pair (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mems(a,b) memset(a,b,sizeof(a)) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mem0(a) mems(a,0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mem1(a) mems(a,1) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define mem255(a) mems(a,255) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define all(c) begin(c) , end(c) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define sz(c) ((long long)((c).size())) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define phb push_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ppb pop_back (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define phf push_front (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ppf pop_front (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fort0(i,a,b) for(ll i=a,i##_TO=b;i<i##_TO;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define for0(i,n) fort0(i,0,n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define fort1(i,a,b) for(ll i=a,i##_TO=b;i<=i##_TO;i++) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define for1(i,n) fort1(i,1,n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define ford(i,a,b) for(ll i=a,i##_TO=b;i>=i##_TO;i--) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define loop(n) for0(LOOP_COUNTER,n) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define start_program IFD((start_time=clock())) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define runtime ((clock()-start_time)*1.0 (Token.Comment.Preproc) / (Token.Comment.Preproc) CLOCKS_PER_SEC) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define halt(s) cout<<s,IFD(cout<<fixed<<setprecision(10)<<"\n\nTIME: "<<runtime<<" sec\n\n",)exit(0) (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define x first (Token.Comment.Preproc)  (Token.Comment.Preproc) # (Token.Comment.Preproc) define y second (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) std (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) __gnu_pbds (Token.Name.Namespace) ; (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Comment.Single) using (Token.Keyword)   (Token.Text.Whitespace) namespace (Token.Keyword)   (Token.Text.Whitespace) __gnu_cxx (Token.Name.Namespace) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) # (Token.Comment.Preproc) define int ll (Token.Comment.Preproc)  (Token.Comment.Preproc)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) unsigned (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) ull (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) long (Token.Keyword.Type)   (Token.Text.Whitespace) double (Token.Keyword.Type)   (Token.Text.Whitespace) ld (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) int (Token.Keyword.Type) , (Token.Punctuation) int (Token.Keyword.Type) > (Token.Operator)   (Token.Text.Whitespace) pii (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) pair (Token.Name) < (Token.Operator) ll (Token.Name) , (Token.Punctuation) ll (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) pll (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword)  (Token.Text.Whitespace) < (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) key (Token.Name.Class) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) val (Token.Name.Class) = (Token.Operator) null_type (Token.Name) , (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Comment.Single)      (Token.Text.Whitespace) class (Token.Keyword)   (Token.Text.Whitespace) comp (Token.Name.Class) = (Token.Operator) less (Token.Name) < (Token.Operator) key (Token.Name) > (Token.Operator)  (Token.Text.Whitespace) > (Token.Operator)  (Token.Text.Whitespace) using (Token.Keyword)   (Token.Text.Whitespace) ord_set (Token.Name) = (Token.Operator) tree (Token.Name)   (Token.Text.Whitespace)  (Token.Comment.Single) < (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) key (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) val (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) comp (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) rb_tree_tag (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) tree_order_statistics_node_update (Token.Name)  (Token.Text.Whitespace) > (Token.Operator) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) typedef (Token.Keyword)   (Token.Text.Whitespace) trie (Token.Name)  (Token.Text.Whitespace) < (Token.Operator)  (Token.Text.Whitespace)      (Token.Text.Whitespace) string (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) null_type (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) trie_string_access_traits (Token.Name) < (Token.Operator) > (Token.Operator) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) pat_trie_tag (Token.Name) , (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) trie_prefix_search_node_update (Token.Name)  (Token.Text.Whitespace) > (Token.Operator)  (Token.Text.Whitespace) pref_trie (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) U (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator) out (Token.Name) , (Token.Punctuation) pair (Token.Name) < (Token.Operator) T (Token.Name) , (Token.Punctuation) U (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) # (Token.Comment.Preproc) ifdef DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) ( (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p (Token.Name) . (Token.Punctuation) x (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) , (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p (Token.Name) . (Token.Punctuation) y (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) ) (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) # (Token.Comment.Preproc) else (Token.Comment.Preproc)  (Token.Comment.Preproc)          (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) < (Token.Operator) < (Token.Operator) p (Token.Name) . (Token.Punctuation) x (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) p (Token.Name) . (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) U (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) istream (Token.Name) & (Token.Operator) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) istream (Token.Name) & (Token.Operator) in (Token.Name) , (Token.Punctuation) pair (Token.Name) < (Token.Operator) T (Token.Name) , (Token.Punctuation) U (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) p (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) in (Token.Name) > (Token.Operator) > (Token.Operator) p (Token.Name) . (Token.Punctuation) x (Token.Name) > (Token.Operator) > (Token.Operator) p (Token.Name) . (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Iter (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) Str (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) struct (Token.Keyword)   (Token.Text.Whitespace) _rng_ (Token.Name.Class)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) Iter (Token.Name)   (Token.Text.Whitespace) from (Token.Name) , (Token.Punctuation) to (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) Str (Token.Name)   (Token.Text.Whitespace) delim (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) _rng_ (Token.Name) ( (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) from (Token.Name) , (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) to (Token.Name) , (Token.Punctuation) Str (Token.Name)   (Token.Text.Whitespace) delim (Token.Name) ) (Token.Punctuation) : (Token.Operator) from (Token.Name) ( (Token.Punctuation) from (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) to (Token.Name) ( (Token.Punctuation) to (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) delim (Token.Name) ( (Token.Punctuation) delim (Token.Name) ) (Token.Punctuation) { (Token.Punctuation) } (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Iter (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) Str (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) _rng_ (Token.Name) < (Token.Operator) Iter (Token.Name) , (Token.Punctuation) Str (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) rng (Token.Name) ( (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) from (Token.Name) , (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) to (Token.Name) , (Token.Punctuation) Str (Token.Name)   (Token.Text.Whitespace) delim (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) _rng_ (Token.Name) < (Token.Operator) Iter (Token.Name) , (Token.Punctuation) Str (Token.Name) > (Token.Operator) ( (Token.Punctuation) from (Token.Name) , (Token.Punctuation) to (Token.Name) , (Token.Punctuation) delim (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Iter (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) rng (Token.Name) ( (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) from (Token.Name) , (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) to (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) rng (Token.Name) ( (Token.Punctuation) from (Token.Name) , (Token.Punctuation) to (Token.Name) , (Token.Punctuation) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Cont (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) Str (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) rng (Token.Name) ( (Token.Punctuation) Cont (Token.Name) & (Token.Operator) c (Token.Name) , (Token.Punctuation) Str (Token.Name)   (Token.Text.Whitespace) delim (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) rng (Token.Name) ( (Token.Punctuation) all (Token.Name) ( (Token.Punctuation) c (Token.Name) ) (Token.Punctuation) , (Token.Punctuation) delim (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Cont (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) auto (Token.Keyword)   (Token.Text.Whitespace) rng (Token.Name) ( (Token.Punctuation) Cont (Token.Name) & (Token.Operator) c (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) rng (Token.Name) ( (Token.Punctuation) all (Token.Name) ( (Token.Punctuation) c (Token.Name) ) (Token.Punctuation) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Iter (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) Str (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) ostream (Token.Name) & (Token.Operator) operator (Token.Keyword) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) ostream (Token.Name) & (Token.Operator) out (Token.Name) , (Token.Punctuation) _rng_ (Token.Name) < (Token.Operator) Iter (Token.Name) , (Token.Punctuation) Str (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) r (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) # (Token.Comment.Preproc) ifdef DEBUG (Token.Comment.Preproc)  (Token.Comment.Preproc)          (Token.Text.Whitespace) out (Token.Name) < (Token.Operator) < (Token.Operator) distance (Token.Name) ( (Token.Punctuation) r (Token.Name) . (Token.Punctuation) from (Token.Name) , (Token.Punctuation) r (Token.Name) . (Token.Punctuation) to (Token.Name) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) : (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) r (Token.Name) . (Token.Punctuation) delim (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) # (Token.Comment.Preproc) endif (Token.Comment.Preproc)  (Token.Comment.Preproc)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) r (Token.Name) . (Token.Punctuation) from (Token.Name) ; (Token.Punctuation) i (Token.Name) ! (Token.Operator) = (Token.Operator) r (Token.Name) . (Token.Punctuation) to (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) out (Token.Name) < (Token.Operator) < (Token.Operator) * (Token.Operator) i (Token.Name) < (Token.Operator) < (Token.Operator) r (Token.Name) . (Token.Punctuation) delim (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) out (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) Iter (Token.Name.Class) , (Token.Punctuation) class (Token.Keyword)   (Token.Text.Whitespace) Str (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) istream (Token.Name) & (Token.Operator) operator (Token.Keyword) > (Token.Operator) > (Token.Operator) ( (Token.Punctuation) istream (Token.Name) & (Token.Operator) in (Token.Name) , (Token.Punctuation) _rng_ (Token.Name) < (Token.Operator) Iter (Token.Name) , (Token.Punctuation) Str (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) r (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) for (Token.Keyword) ( (Token.Punctuation) Iter (Token.Name)   (Token.Text.Whitespace) i (Token.Name) = (Token.Operator) r (Token.Name) . (Token.Punctuation) from (Token.Name) ; (Token.Punctuation) i (Token.Name) ! (Token.Operator) = (Token.Operator) r (Token.Name) . (Token.Punctuation) to (Token.Name) ; (Token.Punctuation) i (Token.Name) + (Token.Operator) + (Token.Operator) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) in (Token.Name) > (Token.Operator) > (Token.Operator) * (Token.Operator) i (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) in (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) read (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) T (Token.Name)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) template (Token.Keyword) < (Token.Operator) class (Token.Keyword)   (Token.Text.Whitespace) T (Token.Name.Class) > (Token.Operator)  (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) read (Token.Name) ( (Token.Punctuation) int (Token.Keyword.Type)   (Token.Text.Whitespace) n (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) vector (Token.Name) < (Token.Operator) T (Token.Name) > (Token.Operator)   (Token.Text.Whitespace) res (Token.Name) ( (Token.Punctuation) n (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) rng (Token.Name) ( (Token.Punctuation) res (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace) IFD (Token.Name) ( (Token.Punctuation)   (Token.Text.Whitespace) clock_t (Token.Keyword.Type)   (Token.Text.Whitespace) start_time (Token.Name) ; (Token.Punctuation)   (Token.Text.Whitespace) ) (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) ppow (Token.Name) ( (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) x (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) y (Token.Name) , (Token.Punctuation) ll (Token.Name)   (Token.Text.Whitespace) mod (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ll (Token.Name)   (Token.Text.Whitespace) res (Token.Name) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) while (Token.Keyword) ( (Token.Punctuation) y (Token.Name) ) (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) y (Token.Name) & (Token.Operator) 1 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)              (Token.Text.Whitespace) res (Token.Name) = (Token.Operator) res (Token.Name) * (Token.Operator) x (Token.Name) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) y (Token.Name) > (Token.Operator) > (Token.Operator) = (Token.Operator) 1 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) x (Token.Name) = (Token.Operator) x (Token.Name) * (Token.Operator) x (Token.Name) % (Token.Operator) mod (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) return (Token.Keyword)   (Token.Text.Whitespace) res (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Comment.Single)  (Token.Text.Whitespace)  (Token.Text.Whitespace)  (Token.Text.Whitespace) signed (Token.Keyword.Type)   (Token.Text.Whitespace) main (Token.Name) ( (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) { (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) IFN (Token.Name)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ( (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) ios_base (Token.Name) : (Token.Operator) : (Token.Operator) sync_with_stdio (Token.Name) ( (Token.Punctuation) false (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cin (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) NULL (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name) . (Token.Punctuation) tie (Token.Name) ( (Token.Punctuation) NULL (Token.Name.Builtin) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) ) (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) w (Token.Name) , (Token.Punctuation) h (Token.Name) , (Token.Punctuation) x (Token.Name) , (Token.Punctuation) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cin (Token.Name) > (Token.Operator) > (Token.Operator) w (Token.Name) > (Token.Operator) > (Token.Operator) h (Token.Name) > (Token.Operator) > (Token.Operator) x (Token.Name) > (Token.Operator) > (Token.Operator) y (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) int (Token.Keyword.Type)   (Token.Text.Whitespace) s (Token.Name) = (Token.Operator) w (Token.Name) * (Token.Operator) h (Token.Name) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) s (Token.Name) / (Token.Operator) 2 (Token.Literal.Number.Integer) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) if (Token.Keyword) ( (Token.Punctuation) s (Token.Name) % (Token.Operator) 2 (Token.Literal.Number.Integer) ) (Token.Punctuation)  (Token.Text.Whitespace)          (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) .5 (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)   (Token.Literal.String) " (Token.Literal.String) ; (Token.Punctuation)  (Token.Text.Whitespace)      (Token.Text.Whitespace) cout (Token.Name) < (Token.Operator) < (Token.Operator) ( (Token.Punctuation) x (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) w (Token.Name) & (Token.Operator) & (Token.Operator) y (Token.Name) * (Token.Operator) 2 (Token.Literal.Number.Integer) = (Token.Operator) = (Token.Operator) h (Token.Name) ) (Token.Punctuation) ; (Token.Punctuation)  (Token.Text.Whitespace)  (Token.Text.Whitespace)      (Token.Text.Whitespace) IFD (Token.Name) ( (Token.Punctuation) cout (Token.Name) < (Token.Operator) < (Token.Operator) fixed (Token.Name) < (Token.Operator) < (Token.Operator) setprecision (Token.Name) ( (Token.Punctuation) 10 (Token.Literal.Number.Integer) ) (Token.Punctuation) < (Token.Operator) < (Token.Operator) " (Token.Literal.String) \n (Token.Literal.String.Escape) \n (Token.Literal.String.Escape) TIME:  (Token.Literal.String) " (Token.Literal.String) < (Token.Operator) < (Token.Operator) runtime (Token.Name) < (Token.Operator) < (Token.Operator) " (Token.Literal.String)  sec (Token.Literal.String) \n (Token.Literal.String.Escape) \n (Token.Literal.String.Escape) " (Token.Literal.String) ; (Token.Punctuation) ) (Token.Punctuation)  (Token.Text.Whitespace) } (Token.Punctuation)  (Token.Text.Whitespace)