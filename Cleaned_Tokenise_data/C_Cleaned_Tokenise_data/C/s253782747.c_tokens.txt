ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: a NUMBER: 200 ID: b NUMBER: 200 SEMI: ; NEWLINE: ID: int ID: i NUMBER: 0 ID: j SEMI: ; NEWLINE: ID: int ID: n NUMBER: 9 SEMI: ; NEWLINE: ID: int ID: count NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: ID: while LPAREN: ( ID: scanf LPAREN: ( STRING: "%d %d" ID: a ID: i ID: b ID: i RPAREN: ) ID: EOF RPAREN: ) LBRACE: { NEWLINE: ID: a ID: i PLUS: + ID: b ID: i SEMI: ; NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 0 SEMI: ; ID: j ID: i SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: a ID: j ID: n RPAREN: ) LBRACE: { NEWLINE: ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: ID: n ID: n PLUS: + ID: n TIMES: * NUMBER: 10 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: b ID: j ID: count SEMI: ; NEWLINE: ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: n NUMBER: 9 SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 0 SEMI: ; ID: j ID: i SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: b ID: j RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: return LPAREN: ( NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: }