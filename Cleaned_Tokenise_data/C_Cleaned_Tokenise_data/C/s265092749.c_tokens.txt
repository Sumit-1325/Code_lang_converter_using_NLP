DIVIDE: / TIMES: * NEWLINE: ID: Digit ID: Number NEWLINE: ID: Q ID: a ID: b ID: a ID: o ID: I ID: v ID: O ID: B NEWLINE: ID: Input NEWLINE: ID: f ID: Z ID: b ID: g ID: B ID: e ID: f ID: Z ID: b ID: g ID: P ID: s ID: B ID: e ID: f ID: Z ID: b ID: g ID: Q ID: a ID: b ID: P ID: X ID: y ID: X ID: B ID: I ID: Ba ID: b ID: B NEWLINE: ID: Output NEWLINE: ID: e ID: f ID: Z ID: b ID: g ID: Aa PLUS: + ID: b ID: o ID: B NEWLINE: ID: Sample ID: Input NEWLINE: NUMBER: 5 NUMBER: 7 NEWLINE: NUMBER: 1 NUMBER: 99 NEWLINE: NUMBER: 1000 NUMBER: 999 NEWLINE: ID: Output ID: for ID: the ID: Sample ID: Input NEWLINE: NUMBER: 2 NEWLINE: NUMBER: 3 NEWLINE: NUMBER: 4 NEWLINE: TIMES: * DIVIDE: / NEWLINE: DIVIDE: / TIMES: * NEWLINE: ID: char ID: dummy NUMBER: 10 SEMI: ; NEWLINE: ID: int ID: c ID: a SEMI: ; NEWLINE: ID: c NUMBER: 12345 SEMI: ; NEWLINE: ID: a ID: printf LPAREN: ( ID: dummy STRING: "%d" ID: c RPAREN: ) SEMI: ; NEWLINE: TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: char ID: dummy NUMBER: 1000 SEMI: ; NEWLINE: ID: int ID: a NUMBER: 3 ID: c ID: d ID: i SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i NUMBER: 3 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: c RPAREN: ) SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: d RPAREN: ) SEMI: ; NEWLINE: ID: a ID: i ID: sprintf LPAREN: ( ID: dummy STRING: "%d" ID: c PLUS: + ID: d RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: a NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: a NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: a NUMBER: 2 RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }