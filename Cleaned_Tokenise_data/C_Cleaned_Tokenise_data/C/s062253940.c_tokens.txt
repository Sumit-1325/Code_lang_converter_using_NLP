NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: int ID: argc ID: const ID: char TIMES: * ID: argv RPAREN: ) LBRACE: { NEWLINE: ID: int ID: a ID: b ID: count NUMBER: 0 ID: x SEMI: ; NEWLINE: ID: while LPAREN: ( ID: scanf LPAREN: ( STRING: "%d %d" ID: a ID: b RPAREN: ) ID: EOF RPAREN: ) LBRACE: { NEWLINE: ID: x ID: a PLUS: + ID: b SEMI: ; NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: x ID: x DIVIDE: / NUMBER: 10 SEMI: ; NEWLINE: ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: ID: if LPAREN: ( ID: x NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: // for (i=0; i<200; i++) { NEWLINE: COMMENT: // x=dataset[0][i]+dataset[1][i]; NEWLINE: COMMENT: // while (1) { NEWLINE: COMMENT: // x=x/10; NEWLINE: COMMENT: // count++; NEWLINE: COMMENT: // if (x<1) { NEWLINE: COMMENT: // break; NEWLINE: COMMENT: // } NEWLINE: COMMENT: // NEWLINE: COMMENT: // } NEWLINE: NEWLINE: NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: count RPAREN: ) SEMI: ; NEWLINE: ID: count NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }