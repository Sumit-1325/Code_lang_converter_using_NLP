ID: include ID: stdio ID: h NEWLINE: NEWLINE: ID: typedef ID: int ID: S4 SEMI: ; NEWLINE: ID: typedef ID: unsigned ID: char ID: U1 SEMI: ; NEWLINE: ID: define ID: FALSE LPAREN: ( NUMBER: 0 RPAREN: ) NEWLINE: ID: define ID: TRUE LPAREN: ( NUMBER: 1 RPAREN: ) NEWLINE: ID: define ID: MAX_DIGIT LPAREN: ( NUMBER: 7 RPAREN: ) COMMENT: /* ?????§?????° */ NEWLINE: ID: define ID: MIN_DIGIT LPAREN: ( NUMBER: 1 RPAREN: ) COMMENT: /* ????°??????° */ NEWLINE: ID: define ID: DIVID_NUM_FOR_LOWER_DIGIT LPAREN: ( NUMBER: 10 RPAREN: ) COMMENT: /* ????????????????????????????????° */ NEWLINE: ID: define ID: MAX_INPUT_VALUE LPAREN: ( NUMBER: 1000000 RPAREN: ) COMMENT: /* ?????§??\?????? */ NEWLINE: NEWLINE: ID: S4 ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: S4 ID: s4_t_a SEMI: ; NEWLINE: ID: S4 ID: s4_t_b SEMI: ; NEWLINE: ID: U1 ID: u1_t_delimiter SEMI: ; NEWLINE: ID: S4 ID: s4_t_scanfRtn SEMI: ; NEWLINE: ID: S4 ID: s4_t_sumInput SEMI: ; NEWLINE: ID: S4 ID: s4_t_digit SEMI: ; NEWLINE: ID: s4_t_scanfRtn LPAREN: ( ID: S4 RPAREN: ) NUMBER: 0 SEMI: ; NEWLINE: ID: while LPAREN: ( ID: s4_t_scanfRtn LPAREN: ( ID: S4 RPAREN: ) ID: EOF RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: s4_t_scanfRtn ID: scanf LPAREN: ( STRING: "%d %d%c" ID: s4_t_a ID: s4_t_b ID: u1_t_delimiter RPAREN: ) SEMI: ; NEWLINE: ID: s4_t_sumInput ID: s4_t_a PLUS: + ID: s4_t_b SEMI: ; NEWLINE: ID: s4_t_digit ID: s4_s_calcDigit LPAREN: ( ID: s4_t_sumInput RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: s4_t_digit RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: static ID: S4 ID: s4_s_calcDigit LPAREN: ( ID: S4 ID: s4_a_inputNum RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: S4 ID: s4_t_digit SEMI: ; NEWLINE: ID: S4 ID: s4_t_maxNumOfDigit NEWLINE: ID: U1 ID: u1_t_isFinishCalc SEMI: ; NEWLINE: NEWLINE: ID: u1_t_isFinishCalc LPAREN: ( ID: U1 RPAREN: ) ID: FALSE SEMI: ; NEWLINE: ID: s4_t_maxNumOfDigit LPAREN: ( ID: S4 RPAREN: ) ID: MAX_INPUT_VALUE SEMI: ; NEWLINE: ID: s4_t_digit LPAREN: ( ID: S4 RPAREN: ) ID: MAX_DIGIT SEMI: ; NEWLINE: ID: while LPAREN: ( LPAREN: ( ID: s4_t_digit LPAREN: ( ID: S4 RPAREN: ) ID: MIN_DIGIT RPAREN: ) NEWLINE: LPAREN: ( ID: u1_t_isFinishCalc LPAREN: ( ID: U1 RPAREN: ) ID: TRUE RPAREN: ) RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: if LPAREN: ( ID: s4_a_inputNum ID: s4_t_maxNumOfDigit RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: u1_t_isFinishCalc LPAREN: ( ID: U1 RPAREN: ) ID: TRUE SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else NEWLINE: LBRACE: { NEWLINE: ID: s4_t_digit MINUS: - MINUS: - SEMI: ; NEWLINE: ID: s4_t_maxNumOfDigit DIVIDE: / LPAREN: ( ID: S4 RPAREN: ) ID: DIVID_NUM_FOR_LOWER_DIGIT SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: return LPAREN: ( ID: s4_t_digit RPAREN: ) SEMI: ; NEWLINE: RBRACE: }