ID: include ID: stdio ID: h NEWLINE: ID: int ID: digit LPAREN: ( ID: int ID: n RPAREN: ) SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: i ID: n SEMI: ; NEWLINE: ID: long ID: sum NUMBER: 200 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: int ID: a ID: b SEMI: ; NEWLINE: ID: char ID: c SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d%c" ID: a ID: b ID: c RPAREN: ) SEMI: ; NEWLINE: ID: sum ID: i LPAREN: ( ID: long RPAREN: ) LPAREN: ( ID: a PLUS: + ID: b RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: c ID: EOF RPAREN: ) LBRACE: { NEWLINE: ID: n ID: i SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: digit LPAREN: ( ID: sum ID: i RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: digit LPAREN: ( ID: int ID: n RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: div10 LPAREN: ( ID: int RPAREN: ) LPAREN: ( ID: n DIVIDE: / NUMBER: 10 RPAREN: ) SEMI: ; NEWLINE: ID: int ID: result SEMI: ; NEWLINE: ID: if LPAREN: ( ID: div10 NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: return NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: result ID: digit LPAREN: ( ID: div10 RPAREN: ) SEMI: ; NEWLINE: ID: result PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return ID: result SEMI: ; NEWLINE: RBRACE: }