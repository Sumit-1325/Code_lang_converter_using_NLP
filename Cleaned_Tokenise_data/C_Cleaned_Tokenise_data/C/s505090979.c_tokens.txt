ID: include ID: stdio ID: h NEWLINE: ID: include ID: math ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: float ID: a ID: b ID: sum NUMBER: 0 SEMI: ; NEWLINE: ID: int ID: i NUMBER: 0 ID: k NUMBER: 1 SEMI: ; NEWLINE: COMMENT: /*input a,b*/ NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 1 SEMI: ; SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%f %f" ID: a ID: b RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: a NUMBER: 1000000 ID: b NUMBER: 1000000 RPAREN: ) LBRACE: { NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "Both a and b need <1,000,000" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "a:%.0f b:%.0f\n" ID: a ID: b RPAREN: ) SEMI: ; NEWLINE: ID: sum ID: a PLUS: + ID: b SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "sum:%.0f\n" ID: sum RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 1 SEMI: ; ID: i NUMBER: 10 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: sum DIVIDE: / ID: pow LPAREN: ( NUMBER: 10 ID: i RPAREN: ) RPAREN: ) NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: k PLUS: + NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: k RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: