ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: int ID: n NUMBER: 0 ID: a NUMBER: 100 LBRACE: { NUMBER: 0 RBRACE: } ID: i NUMBER: 0 ID: z NUMBER: 0 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d\n" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: i ID: n RPAREN: ) ID: break SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: a ID: i RPAREN: ) SEMI: ; NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: i NUMBER: 0 SEMI: ; NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: i LPAREN: ( ID: n DIVIDE: / NUMBER: 2 RPAREN: ) MINUS: - NUMBER: 1 RPAREN: ) ID: break SEMI: ; NEWLINE: ID: z ID: a ID: i SEMI: ; NEWLINE: ID: a ID: i ID: a ID: n MINUS: - ID: i MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: a ID: n MINUS: - ID: i MINUS: - NUMBER: 1 ID: z SEMI: ; NEWLINE: ID: z NUMBER: 0 SEMI: ; NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: i NUMBER: 0 SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: i ID: n RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: ID: break SEMI: ; RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: a ID: i RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: " " RPAREN: ) SEMI: ; NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }