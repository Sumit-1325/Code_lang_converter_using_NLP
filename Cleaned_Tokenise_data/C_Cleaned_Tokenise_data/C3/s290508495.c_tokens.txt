DIVIDE: / TIMES: * NEWLINE: TIMES: * ID: main ID: c NEWLINE: TIMES: * NEWLINE: TIMES: * ID: Created ID: on NUMBER: 2020 DIVIDE: / NUMBER: 7 DIVIDE: / NUMBER: 27 NEWLINE: TIMES: * ID: Author NUMBER: 113896 NEWLINE: TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: n SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: int ID: arr ID: n SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: arr ID: i RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: int ID: i ID: n MINUS: - NUMBER: 1 SEMI: ; ID: i NUMBER: 0 SEMI: ; ID: i MINUS: - MINUS: - RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: arr ID: i RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: i NUMBER: 0 RPAREN: ) ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: ID: else ID: printf LPAREN: ( STRING: " " RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: