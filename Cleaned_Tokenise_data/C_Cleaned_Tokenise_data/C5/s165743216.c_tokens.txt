ID: include ID: stdio ID: h NEWLINE: ID: define ID: MIN LPAREN: ( ID: a ID: b RPAREN: ) LPAREN: ( LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: b RPAREN: ) LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: b RPAREN: ) RPAREN: ) NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: int ID: W ID: H ID: x ID: y SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d %d %d" ID: W ID: H ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: ID: double ID: AreaMax LPAREN: ( ID: double RPAREN: ) ID: W TIMES: * LPAREN: ( ID: double RPAREN: ) ID: H SEMI: ; NEWLINE: ID: double ID: Area0A LPAREN: ( ID: double RPAREN: ) ID: W TIMES: * LPAREN: ( ID: double RPAREN: ) ID: y SEMI: ; NEWLINE: ID: double ID: Area0B ID: AreaMax MINUS: - ID: Area0A SEMI: ; NEWLINE: ID: double ID: Area0 ID: MIN LPAREN: ( ID: Area0A ID: Area0B RPAREN: ) SEMI: ; NEWLINE: ID: double ID: Area1A LPAREN: ( ID: double RPAREN: ) ID: x TIMES: * LPAREN: ( ID: double RPAREN: ) ID: H SEMI: ; NEWLINE: ID: double ID: Area1B ID: AreaMax MINUS: - ID: Area1A SEMI: ; NEWLINE: ID: double ID: Area1 ID: MIN LPAREN: ( ID: Area1A ID: Area1B RPAREN: ) SEMI: ; NEWLINE: ID: double ID: Area2 NUMBER: 0 NUMBER: 0 SEMI: ; NEWLINE: ID: if LPAREN: ( LPAREN: ( LPAREN: ( LPAREN: ( ID: double RPAREN: ) ID: H DIVIDE: / LPAREN: ( ID: double RPAREN: ) ID: W RPAREN: ) LPAREN: ( LPAREN: ( ID: double RPAREN: ) ID: y DIVIDE: / LPAREN: ( ID: double RPAREN: ) ID: x RPAREN: ) RPAREN: ) NEWLINE: LPAREN: ( LPAREN: ( LPAREN: ( ID: double RPAREN: ) ID: H DIVIDE: / LPAREN: ( ID: double RPAREN: ) ID: W RPAREN: ) LPAREN: ( LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: H MINUS: - ID: y RPAREN: ) DIVIDE: / LPAREN: ( ID: double RPAREN: ) ID: x RPAREN: ) RPAREN: ) NEWLINE: LPAREN: ( LPAREN: ( LPAREN: ( ID: double RPAREN: ) ID: H DIVIDE: / LPAREN: ( ID: double RPAREN: ) ID: W RPAREN: ) LPAREN: ( LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: H RPAREN: ) DIVIDE: / LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: W MINUS: - ID: x RPAREN: ) RPAREN: ) RPAREN: ) NEWLINE: LPAREN: ( LPAREN: ( LPAREN: ( ID: double RPAREN: ) ID: H DIVIDE: / LPAREN: ( ID: double RPAREN: ) ID: W RPAREN: ) LPAREN: ( LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: H MINUS: - ID: y RPAREN: ) DIVIDE: / LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: W MINUS: - ID: x RPAREN: ) RPAREN: ) RPAREN: ) RPAREN: ) NEWLINE: ID: Area2 ID: AreaMax DIVIDE: / NUMBER: 2 NUMBER: 0 SEMI: ; NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: Area0 ID: Area2 RPAREN: ) NEWLINE: LPAREN: ( ID: Area1 ID: Area2 RPAREN: ) RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%f 1\n" ID: Area2 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( LPAREN: ( ID: Area0 ID: Area2 RPAREN: ) NEWLINE: LPAREN: ( ID: Area1 ID: Area2 RPAREN: ) RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%f 0\n" ID: Area2 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: if LPAREN: ( ID: Area0 ID: Area1 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%f 1\n" ID: Area1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: Area0 ID: Area1 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%f 0\n" ID: Area1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%f 0\n" ID: Area0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: