ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: W ID: H ID: x ID: y SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d %d %d" ID: W ID: H ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: ID: long ID: area NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: H SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: area PLUS: + ID: W SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: double ID: ans ID: area DIVIDE: / NUMBER: 2 NUMBER: 0 SEMI: ; NEWLINE: ID: int ID: judge SEMI: ; NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: x ID: W DIVIDE: / NUMBER: 2 NUMBER: 0 RPAREN: ) LPAREN: ( ID: y ID: H DIVIDE: / NUMBER: 2 NUMBER: 0 RPAREN: ) RPAREN: ) LBRACE: { NEWLINE: ID: judge NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: judge NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" ID: ans ID: judge RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }