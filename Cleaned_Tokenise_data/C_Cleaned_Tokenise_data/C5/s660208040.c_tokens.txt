ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: h ID: w ID: x ID: y SEMI: ; NEWLINE: ID: int ID: s SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d %d %d" ID: w ID: h ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: x ID: w DIVIDE: / NUMBER: 2 ID: y ID: h DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" ID: w TIMES: * ID: h DIVIDE: / NUMBER: 2 NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: x ID: w DIVIDE: / NUMBER: 2 ID: y ID: h DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" ID: w TIMES: * ID: h DIVIDE: / NUMBER: 2 NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: if LPAREN: ( ID: x ID: w DIVIDE: / NUMBER: 2 ID: y ID: h DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: y TIMES: * ID: w ID: x TIMES: * ID: h RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" ID: y TIMES: * ID: w NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" ID: x TIMES: * ID: h NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: x ID: w DIVIDE: / NUMBER: 2 ID: y ID: h DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: h MINUS: - ID: y RPAREN: ) TIMES: * ID: w ID: x TIMES: * ID: h RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" LPAREN: ( ID: h MINUS: - ID: y RPAREN: ) TIMES: * ID: w NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" ID: x TIMES: * ID: h NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: x ID: w DIVIDE: / NUMBER: 2 ID: y ID: h DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: h MINUS: - ID: y RPAREN: ) TIMES: * ID: w LPAREN: ( ID: w MINUS: - ID: x RPAREN: ) TIMES: * ID: h RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" LPAREN: ( ID: h MINUS: - ID: y RPAREN: ) TIMES: * ID: w NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" LPAREN: ( ID: w MINUS: - ID: x RPAREN: ) TIMES: * ID: h NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: x ID: w DIVIDE: / NUMBER: 2 ID: y ID: h DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: y TIMES: * ID: w LPAREN: ( ID: w MINUS: - ID: x RPAREN: ) TIMES: * ID: h RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" ID: y TIMES: * ID: w NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf %d" LPAREN: ( ID: w MINUS: - ID: x RPAREN: ) TIMES: * ID: h NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: }