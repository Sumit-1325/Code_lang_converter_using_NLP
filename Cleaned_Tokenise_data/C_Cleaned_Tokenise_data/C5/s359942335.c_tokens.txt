ID: include ID: stdio ID: h NEWLINE: ID: int NEWLINE: ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: W ID: H ID: x ID: y SEMI: ; NEWLINE: ID: int ID: L NUMBER: 100 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d %d %d" ID: W ID: H ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: x ID: W DIVIDE: / NUMBER: 2 ID: y ID: H DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf 1\n" LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: W DIVIDE: / NUMBER: 2 TIMES: * ID: H RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: x ID: W DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf 0\n" LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: W DIVIDE: / NUMBER: 2 TIMES: * ID: H RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else ID: if LPAREN: ( ID: y ID: H DIVIDE: / NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf 0\n" LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: H DIVIDE: / NUMBER: 2 TIMES: * ID: W RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%lf 0\n" LPAREN: ( ID: double RPAREN: ) LPAREN: ( ID: H DIVIDE: / NUMBER: 2 TIMES: * ID: W RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }