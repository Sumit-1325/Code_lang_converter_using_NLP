ID: include ID: stdio ID: h NEWLINE: ID: include ID: math ID: h NEWLINE: ID: typedef ID: long ID: long ID: ll SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) NEWLINE: LBRACE: { NEWLINE: NEWLINE: ID: ll ID: w ID: h ID: x ID: y SEMI: ; NEWLINE: ID: int ID: ans2 SEMI: ; NEWLINE: ID: double ID: ans SEMI: ; NEWLINE: NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d %d %d" ID: w ID: h ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: ans LPAREN: ( ID: w TIMES: * ID: h RPAREN: ) DIVIDE: / NUMBER: 2 NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( LPAREN: ( LPAREN: ( LPAREN: ( ID: w DIVIDE: / NUMBER: 2 NUMBER: 0 RPAREN: ) MINUS: - ID: x RPAREN: ) NUMBER: 1 ID: e MINUS: - NUMBER: 9 RPAREN: ) LPAREN: ( LPAREN: ( LPAREN: ( ID: h DIVIDE: / NUMBER: 2 NUMBER: 0 RPAREN: ) MINUS: - ID: y RPAREN: ) NUMBER: 1 ID: e MINUS: - NUMBER: 9 RPAREN: ) RPAREN: ) ID: ans2 NUMBER: 1 SEMI: ; NEWLINE: ID: else ID: ans2 NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%.6lf %d" ID: ans ID: ans2 RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }