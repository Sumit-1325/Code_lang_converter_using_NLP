ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) NEWLINE: LBRACE: { NEWLINE: NEWLINE: ID: int ID: w ID: h ID: x ID: y ID: x1 ID: y1 ID: w1 ID: h1 ID: b SEMI: ; NEWLINE: ID: float ID: s ID: s1 ID: s2 SEMI: ; NEWLINE: NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d %d %d" ID: w ID: h ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: w ID: x TIMES: * NUMBER: 2 RPAREN: ) ID: x1 ID: x SEMI: ; NEWLINE: ID: else ID: x1 ID: w MINUS: - ID: x SEMI: ; NEWLINE: ID: s1 ID: x1 TIMES: * ID: h SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: h ID: y TIMES: * NUMBER: 2 RPAREN: ) ID: y1 ID: y SEMI: ; NEWLINE: ID: else ID: y1 ID: h MINUS: - ID: y SEMI: ; NEWLINE: ID: s2 ID: w TIMES: * ID: y1 SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: s1 ID: s2 RPAREN: ) ID: s ID: s2 SEMI: ; NEWLINE: ID: else ID: s ID: s1 SEMI: ; NEWLINE: ID: if LPAREN: ( ID: w NUMBER: 2 NUMBER: 0 ID: h NUMBER: 2 NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: w ID: h RPAREN: ) LBRACE: { NEWLINE: ID: w1 ID: w DIVIDE: / NUMBER: 2 SEMI: ; NEWLINE: ID: h1 ID: h DIVIDE: / NUMBER: 2 SEMI: ; NEWLINE: ID: if LPAREN: ( ID: x ID: w1 ID: y ID: h1 RPAREN: ) ID: b NUMBER: 1 SEMI: ; NEWLINE: ID: else ID: b NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%f %d\n" ID: s ID: b RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }