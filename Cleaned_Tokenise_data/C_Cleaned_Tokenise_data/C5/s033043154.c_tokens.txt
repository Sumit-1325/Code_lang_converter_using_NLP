ID: include ID: stdio ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: stdbool ID: h NEWLINE: ID: include ID: math ID: h NEWLINE: ID: define ID: ll ID: long ID: long ID: int NEWLINE: ID: define ID: lim NUMBER: 100010 NEWLINE: ID: define ID: INF NUMBER: 1 ID: e9 NEWLINE: ID: define ID: MIN LPAREN: ( ID: x ID: y RPAREN: ) LPAREN: ( LPAREN: ( ID: x RPAREN: ) LPAREN: ( ID: y RPAREN: ) LPAREN: ( ID: x RPAREN: ) LPAREN: ( ID: y RPAREN: ) RPAREN: ) NEWLINE: ID: define ID: MAX LPAREN: ( ID: x ID: y RPAREN: ) LPAREN: ( LPAREN: ( ID: x RPAREN: ) LPAREN: ( ID: y RPAREN: ) LPAREN: ( ID: y RPAREN: ) LPAREN: ( ID: x RPAREN: ) RPAREN: ) NEWLINE: ID: define ID: ABS LPAREN: ( ID: x RPAREN: ) LPAREN: ( LPAREN: ( ID: x RPAREN: ) NUMBER: 0 LPAREN: ( ID: x RPAREN: ) MINUS: - LPAREN: ( ID: x RPAREN: ) RPAREN: ) NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: double ID: w ID: h ID: x ID: y SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%lf%lf%lf%lf" ID: w ID: h ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: ID: double ID: smax SEMI: ; NEWLINE: ID: bool ID: hukusuu ID: false SEMI: ; NEWLINE: ID: if LPAREN: ( ID: w DIVIDE: / NUMBER: 2 ID: x ID: h DIVIDE: / NUMBER: 2 ID: y RPAREN: ) ID: hukusuu ID: true SEMI: ; NEWLINE: NEWLINE: ID: smax ID: MIN LPAREN: ( ID: x ID: w MINUS: - ID: x RPAREN: ) TIMES: * ID: h SEMI: ; NEWLINE: ID: smax ID: MAX LPAREN: ( ID: smax ID: MIN LPAREN: ( ID: y ID: h MINUS: - ID: y RPAREN: ) TIMES: * ID: w RPAREN: ) SEMI: ; NEWLINE: NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%lf " ID: smax RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: hukusuu RPAREN: ) ID: printf LPAREN: ( STRING: "1" RPAREN: ) SEMI: ; NEWLINE: ID: else ID: printf LPAREN: ( STRING: "0" RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }