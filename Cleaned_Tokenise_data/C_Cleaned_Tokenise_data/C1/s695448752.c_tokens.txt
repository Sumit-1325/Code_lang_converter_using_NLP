ID: include ID: stdio ID: h NEWLINE: ID: void ID: sort LPAREN: ( ID: int TIMES: * ID: x ID: int TIMES: * ID: y RPAREN: ) SEMI: ; NEWLINE: ID: int ID: GCD LPAREN: ( ID: int ID: x ID: int ID: y RPAREN: ) SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: int ID: x ID: y SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d" ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: ID: sort LPAREN: ( ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: GCD LPAREN: ( ID: x ID: y RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: void ID: sort LPAREN: ( ID: int TIMES: * ID: x ID: int TIMES: * ID: y RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( TIMES: * ID: x TIMES: * ID: y RPAREN: ) LBRACE: { NEWLINE: ID: int ID: temp TIMES: * ID: x SEMI: ; NEWLINE: TIMES: * ID: x TIMES: * ID: y SEMI: ; NEWLINE: TIMES: * ID: y ID: temp SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: int ID: GCD LPAREN: ( ID: int ID: x ID: int ID: y RPAREN: ) LBRACE: { NEWLINE: ID: int ID: i ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: int ID: cd NUMBER: 100000 LBRACE: { NUMBER: 0 RBRACE: } SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 1 SEMI: ; ID: i ID: y DIVIDE: / NUMBER: 2 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: ID: if LPAREN: ( ID: y ID: i NUMBER: 0 ID: x ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: cd ID: j ID: i SEMI: ; NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: x ID: y NUMBER: 0 RPAREN: ) NEWLINE: ID: cd ID: j PLUS: + NUMBER: 1 ID: y SEMI: ; NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 0 SEMI: ; ID: cd ID: j NUMBER: 0 SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) NEWLINE: ID: if LPAREN: ( ID: cd ID: j PLUS: + NUMBER: 1 NUMBER: 0 RPAREN: ) NEWLINE: ID: return ID: cd ID: j SEMI: ; NEWLINE: RBRACE: }