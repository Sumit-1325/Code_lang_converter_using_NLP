ID: include ID: stdio ID: h NEWLINE: ID: int ID: get_gcd LPAREN: ( ID: int ID: x ID: int ID: y RPAREN: ) SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: x ID: y ID: gcd ID: lcm SEMI: ; NEWLINE: ID: while LPAREN: ( ID: scanf LPAREN: ( STRING: "%d %d" ID: x ID: y RPAREN: ) NUMBER: 2 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: gcd ID: get_gcd LPAREN: ( ID: x ID: y RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: lcm ID: x DIVIDE: / ID: gcd TIMES: * ID: y SEMI: ; NEWLINE: NEWLINE: COMMENT: //printf("%d %d", gcd, lcm); NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: gcd RPAREN: ) SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: get_gcd LPAREN: ( ID: int ID: x ID: int ID: y RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: if LPAREN: ( ID: x ID: y RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: y ID: y ID: x SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: while LPAREN: ( ID: x NUMBER: 1 ID: y NUMBER: 1 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: x ID: x ID: y SEMI: ; NEWLINE: ID: if LPAREN: ( ID: x NUMBER: 0 RPAREN: ) NEWLINE: ID: break SEMI: ; NEWLINE: NEWLINE: ID: y ID: y ID: x SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return LPAREN: ( ID: x PLUS: + ID: y RPAREN: ) SEMI: ; NEWLINE: RBRACE: }