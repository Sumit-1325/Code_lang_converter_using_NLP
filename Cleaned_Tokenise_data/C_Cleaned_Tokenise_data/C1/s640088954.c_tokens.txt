ID: include ID: stdio ID: h NEWLINE: ID: int ID: Euclidean LPAREN: ( ID: int ID: int RPAREN: ) SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: a ID: b ID: result SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d %d" ID: a ID: b RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: a ID: b RPAREN: ) ID: result ID: Euclidean LPAREN: ( ID: b ID: a RPAREN: ) SEMI: ; NEWLINE: ID: else ID: result ID: Euclidean LPAREN: ( ID: a ID: b RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: result RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: Euclidean LPAREN: ( ID: int ID: x ID: int ID: y RPAREN: ) LBRACE: { NEWLINE: ID: int ID: r ID: s NUMBER: 100 ID: i NUMBER: 0 ID: j SEMI: ; NEWLINE: ID: r ID: x ID: y SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: r RPAREN: ) SEMI: ; NEWLINE: ID: s ID: i ID: r SEMI: ; NEWLINE: ID: while LPAREN: ( ID: r NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: r ID: s ID: i MINUS: - NUMBER: 1 ID: r SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: r RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: r NUMBER: 0 RPAREN: ) ID: return ID: s ID: i MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: s ID: i ID: r SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: r ID: y ID: r SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: r RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: }