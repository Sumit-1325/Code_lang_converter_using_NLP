DIVIDE: / TIMES: * ID: ex9_1 NEWLINE: ID: UMAboogie TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: define ID: SIZE NUMBER: 10 NEWLINE: ID: typedef ID: struct LBRACE: { COMMENT: //スタックを定義 NEWLINE: ID: int ID: size SEMI: ; NEWLINE: ID: int ID: count SEMI: ; NEWLINE: ID: char ID: data ID: SIZE SEMI: ; NEWLINE: ID: char TIMES: * ID: top SEMI: ; NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: stk ID: char ID: x RPAREN: ) SEMI: ; NEWLINE: ID: double ID: pop LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: stack ID: stk SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: int ID: i NUMBER: 0 SEMI: ; NEWLINE: ID: char ID: key ID: SIZE PLUS: + NUMBER: 1 SEMI: ; COMMENT: //一時的に格納する配列を宣言 NEWLINE: ID: initialize_stack LPAREN: ( ID: stk RPAREN: ) SEMI: ; COMMENT: //スタックを初期化 NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: key RPAREN: ) SEMI: ; COMMENT: //入力されたデータをkeyに追加 NEWLINE: ID: while LPAREN: ( ID: key ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: key ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: stk ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: pop LPAREN: ( ID: stk RPAREN: ) SEMI: ; COMMENT: //入力がBでかつcountが正であればpop NEWLINE: RBRACE: } NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: push LPAREN: ( ID: stk ID: key ID: i RPAREN: ) SEMI: ; COMMENT: //入力が0or1のときそれをスタックに追加 NEWLINE: RBRACE: } NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: print_stack LPAREN: ( ID: stk RPAREN: ) SEMI: ; COMMENT: //結果を出力 NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { COMMENT: //スタックの初期化 NEWLINE: ID: stk MINUS: - ID: count NUMBER: 0 SEMI: ; COMMENT: //要素数を0にする NEWLINE: ID: stk MINUS: - ID: size ID: SIZE SEMI: ; COMMENT: //スタックの大きさをSIZEにする NEWLINE: ID: stk MINUS: - ID: top LPAREN: ( ID: stk MINUS: - ID: data ID: SIZE RPAREN: ) SEMI: ; COMMENT: //topを配列の末尾にする NEWLINE: RBRACE: } NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: stk ID: char ID: x RPAREN: ) LBRACE: { COMMENT: //データの追加 NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count ID: stk MINUS: - ID: size RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "Error: stack overflow.¥n" ID: x RPAREN: ) SEMI: ; COMMENT: //オーバーフローする時エラーを出力 NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: stk MINUS: - ID: top MINUS: - MINUS: - SEMI: ; COMMENT: //topを1つ手前にする NEWLINE: TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) ID: x SEMI: ; COMMENT: //そこにデータを格納する NEWLINE: ID: stk MINUS: - ID: count PLUS: + PLUS: + SEMI: ; COMMENT: //countを1加算する NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: double ID: pop LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { COMMENT: //データの取り出し NEWLINE: ID: char ID: x SEMI: ; NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "Error: stack underflow.¥n" RPAREN: ) SEMI: ; COMMENT: //アンダーフローする時エラーを出力 NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: x TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) SEMI: ; COMMENT: //topの位置からデータを取り出す NEWLINE: ID: stk MINUS: - ID: top PLUS: + PLUS: + SEMI: ; COMMENT: //topを1つ下げる NEWLINE: ID: stk MINUS: - ID: count MINUS: - MINUS: - SEMI: ; COMMENT: //countを1下げる NEWLINE: ID: return ID: x SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { COMMENT: //スタックの中身を古い順に出力 NEWLINE: ID: char TIMES: * ID: p SEMI: ; NEWLINE: ID: p ID: stk MINUS: - ID: top SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "[stack] " RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: stk MINUS: - ID: count SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%.c " TIMES: * ID: p PLUS: + PLUS: + RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "]¥n" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: