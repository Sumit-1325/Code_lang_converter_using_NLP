ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: i SEMI: ; NEWLINE: ID: int ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: int ID: k SEMI: ; NEWLINE: ID: char ID: S NUMBER: 11 SEMI: ; NEWLINE: ID: char ID: Cpy NUMBER: 11 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: S RPAREN: ) SEMI: ; NEWLINE: COMMENT: // printf("nagasa = %d\n",strlen(S)); NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: strlen LPAREN: ( ID: S RPAREN: ) SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: S ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: Cpy ID: j NUMBER: 0 SEMI: ; NEWLINE: COMMENT: // printf("Cpy[%d]=%c\n",j,Cpy[j]); NEWLINE: COMMENT: // printf("S[%d]=%c\n",i,S[i]); NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else ID: if LPAREN: ( ID: S ID: i NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: Cpy ID: j NUMBER: 1 SEMI: ; NEWLINE: COMMENT: // printf("Cpy[%d]=%c\n",j,Cpy[j]); NEWLINE: COMMENT: // printf("S[%d]=%c\n",i,S[i]); NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: for LPAREN: ( ID: k ID: j MINUS: - NUMBER: 1 SEMI: ; ID: k NUMBER: 0 SEMI: ; ID: k MINUS: - MINUS: - RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: Cpy ID: k ID: x RPAREN: ) LBRACE: { NEWLINE: ID: Cpy ID: k ID: x SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: k NUMBER: 0 SEMI: ; ID: k ID: j SEMI: ; ID: k PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: Cpy ID: k ID: x RPAREN: ) LBRACE: { NEWLINE: ID: continue SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%c" ID: Cpy ID: k RPAREN: ) SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }