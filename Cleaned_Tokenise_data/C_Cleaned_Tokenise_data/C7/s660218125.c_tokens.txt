DIVIDE: / TIMES: * ID: ex4 MINUS: - NUMBER: 1 NEWLINE: ID: kas056 TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: define ID: SIZE NUMBER: 15 NEWLINE: ID: typedef ID: struct LBRACE: { NEWLINE: ID: int ID: size SEMI: ; COMMENT: //格納最大数 NEWLINE: ID: int ID: count SEMI: ; COMMENT: //現在のデータ数 NEWLINE: ID: char ID: data ID: SIZE SEMI: ; COMMENT: //データ配列 NEWLINE: ID: char TIMES: * ID: top SEMI: ; COMMENT: //topのポインタ NEWLINE: ID: char TIMES: * ID: bottom SEMI: ; COMMENT: //一番下のポインタ NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: ID: void ID: initialize LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: stk MINUS: - ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: stk MINUS: - ID: size ID: SIZE SEMI: ; NEWLINE: ID: stk MINUS: - ID: top LPAREN: ( ID: stk MINUS: - ID: data ID: SIZE RPAREN: ) SEMI: ; COMMENT: //配列の最終要素の一つ手前 NEWLINE: ID: stk MINUS: - ID: bottom LPAREN: ( ID: stk MINUS: - ID: data ID: SIZE RPAREN: ) SEMI: ; COMMENT: //初期配列の要素の一つ手前...(*) NEWLINE: RBRACE: } NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: stk ID: char ID: s RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count ID: stk MINUS: - ID: size RPAREN: ) LBRACE: { COMMENT: //格納最大数を超えたらエラー NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "Error: Stack overflow. (s=%c)\n" ID: s RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: stk MINUS: - ID: top MINUS: - MINUS: - SEMI: ; COMMENT: //一つ上にあげる(=一つ手前に移動) NEWLINE: TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) ID: s SEMI: ; NEWLINE: ID: stk MINUS: - ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: void ID: pop LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: COMMENT: //popが指示されたとき、 NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count NUMBER: 0 RPAREN: ) LBRACE: { COMMENT: //要素があれば取り出すようにする。 NEWLINE: ID: stk MINUS: - ID: top PLUS: + PLUS: + SEMI: ; COMMENT: //一つ下に移動(=一つ後に移動) NEWLINE: ID: stk MINUS: - ID: count MINUS: - MINUS: - SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: char TIMES: * ID: c SEMI: ; NEWLINE: ID: int ID: i SEMI: ; NEWLINE: ID: c ID: stk MINUS: - ID: bottom MINUS: - NUMBER: 1 SEMI: ; COMMENT: //配列の一番下のポインタを指定する。 NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i ID: stk MINUS: - ID: count MINUS: - NUMBER: 1 SEMI: ; ID: i MINUS: - NUMBER: 1 SEMI: ; ID: i MINUS: - MINUS: - RPAREN: ) LBRACE: { COMMENT: //スタック内の文字数分操作 NEWLINE: ID: printf LPAREN: ( STRING: "%c" TIMES: * ID: c MINUS: - MINUS: - RPAREN: ) SEMI: ; COMMENT: //出力したら一つ上にあげる。 NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: stack ID: stk SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: char ID: sentence ID: SIZE SEMI: ; NEWLINE: ID: int ID: i SEMI: ; NEWLINE: ID: initialize LPAREN: ( ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: sentence RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: SIZE SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: sentence ID: i NUMBER: 0 ID: sentence ID: i NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: push LPAREN: ( ID: stk ID: sentence ID: i RPAREN: ) SEMI: ; COMMENT: //B以外はpush NEWLINE: RBRACE: } NEWLINE: ID: else ID: if LPAREN: ( ID: sentence ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: pop LPAREN: ( ID: stk RPAREN: ) SEMI: ; COMMENT: //Bがでたらpop NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: continue SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: print_stack LPAREN: ( ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: RBRACE: }