DIVIDE: / TIMES: * ID: ex9_1 NEWLINE: ID: pptenshi TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: define ID: SIZE NUMBER: 11 NEWLINE: ID: typedef ID: struct ID: stack LBRACE: { NEWLINE: ID: char ID: elem SEMI: ; NEWLINE: ID: struct ID: stack TIMES: * ID: next SEMI: ; NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * TIMES: * ID: first ID: char ID: elem RPAREN: ) LBRACE: { NEWLINE: ID: stack TIMES: * ID: new ID: calloc LPAREN: ( NUMBER: 1 ID: sizeof LPAREN: ( ID: stack RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: new ID: NULL RPAREN: ) ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: ID: new MINUS: - ID: elem ID: elem SEMI: ; NEWLINE: ID: new MINUS: - ID: next TIMES: * ID: first SEMI: ; NEWLINE: TIMES: * ID: first ID: new SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: char ID: pop LPAREN: ( ID: stack TIMES: * TIMES: * ID: first RPAREN: ) LBRACE: { NEWLINE: ID: char ID: elem SEMI: ; NEWLINE: ID: stack TIMES: * ID: tmp TIMES: * ID: first SEMI: ; NEWLINE: COMMENT: // 要素がない場合は'2'を返す NEWLINE: ID: if LPAREN: ( ID: tmp ID: NULL RPAREN: ) LBRACE: { NEWLINE: ID: return NUMBER: 2 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: elem ID: tmp MINUS: - ID: elem SEMI: ; NEWLINE: TIMES: * ID: first ID: tmp MINUS: - ID: next SEMI: ; NEWLINE: ID: free LPAREN: ( ID: tmp RPAREN: ) SEMI: ; NEWLINE: ID: return ID: elem SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: // 出力 NEWLINE: ID: void ID: print_string LPAREN: ( ID: stack TIMES: * ID: first RPAREN: ) LBRACE: { NEWLINE: ID: stack TIMES: * ID: stack_prt ID: NULL SEMI: ; NEWLINE: ID: char ID: elem SEMI: ; NEWLINE: COMMENT: // stack_ptrに入れなおして出力 NEWLINE: ID: while LPAREN: ( LPAREN: ( ID: elem ID: pop LPAREN: ( ID: first RPAREN: ) RPAREN: ) NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: push LPAREN: ( ID: stack_prt ID: elem RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: while LPAREN: ( LPAREN: ( ID: elem ID: pop LPAREN: ( ID: stack_prt RPAREN: ) RPAREN: ) NUMBER: 2 RPAREN: ) LBRACE: { NEWLINE: ID: putchar LPAREN: ( ID: elem RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: putchar LPAREN: ( ID: n RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: char ID: string ID: SIZE SEMI: ; COMMENT: // s NEWLINE: ID: char TIMES: * ID: p_str SEMI: ; COMMENT: // sのポインタ NEWLINE: ID: stack TIMES: * ID: first ID: NULL SEMI: ; COMMENT: // 文字列を入れるスタック NEWLINE: COMMENT: // input NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: string RPAREN: ) SEMI: ; NEWLINE: ID: p_str ID: string SEMI: ; NEWLINE: NEWLINE: ID: while LPAREN: ( TIMES: * ID: p_str RPAREN: ) LBRACE: { NEWLINE: ID: switch LPAREN: ( TIMES: * ID: p_str RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: case NUMBER: 0 ID: case NUMBER: 1 NEWLINE: ID: push LPAREN: ( ID: first TIMES: * ID: p_str RPAREN: ) SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: ID: case ID: B NEWLINE: ID: pop LPAREN: ( ID: first RPAREN: ) SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: p_str PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: // output NEWLINE: ID: print_string LPAREN: ( ID: first RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }