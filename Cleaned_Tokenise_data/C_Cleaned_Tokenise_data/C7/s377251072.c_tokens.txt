DIVIDE: / TIMES: * ID: ex9_1 NEWLINE: ID: sak_Citrue TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: COMMENT: //双方向リストの構造体 NEWLINE: ID: typedef ID: struct ID: node LBRACE: { NEWLINE: ID: char ID: elem SEMI: ; NEWLINE: ID: struct ID: node TIMES: * ID: prev SEMI: ; NEWLINE: ID: struct ID: node TIMES: * ID: next SEMI: ; NEWLINE: RBRACE: } ID: node SEMI: ; NEWLINE: COMMENT: //リストの後ろ側に追加 NEWLINE: ID: void ID: push LPAREN: ( ID: node TIMES: * TIMES: * ID: first ID: node TIMES: * TIMES: * ID: last ID: char ID: elem RPAREN: ) LBRACE: { NEWLINE: ID: node TIMES: * ID: new LPAREN: ( ID: node TIMES: * RPAREN: ) ID: malloc LPAREN: ( ID: sizeof LPAREN: ( ID: node RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: new ID: NULL RPAREN: ) ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: ID: new MINUS: - ID: elem ID: elem SEMI: ; NEWLINE: ID: new MINUS: - ID: next ID: NULL SEMI: ; NEWLINE: ID: new MINUS: - ID: prev TIMES: * ID: last SEMI: ; NEWLINE: ID: if LPAREN: ( TIMES: * ID: first ID: NULL RPAREN: ) TIMES: * ID: first ID: new SEMI: ; NEWLINE: LPAREN: ( TIMES: * ID: last RPAREN: ) MINUS: - ID: next ID: new SEMI: ; NEWLINE: TIMES: * ID: last ID: new SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //末端から取り出す NEWLINE: ID: char ID: pop LPAREN: ( ID: node TIMES: * TIMES: * ID: last RPAREN: ) LBRACE: { NEWLINE: ID: char ID: elem SEMI: ; NEWLINE: ID: node TIMES: * ID: tmp TIMES: * ID: last SEMI: ; NEWLINE: ID: if LPAREN: ( ID: tmp ID: NULL RPAREN: ) ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: ID: elem ID: tmp MINUS: - ID: elem SEMI: ; NEWLINE: TIMES: * ID: last ID: tmp MINUS: - ID: prev SEMI: ; NEWLINE: ID: free LPAREN: ( ID: tmp RPAREN: ) SEMI: ; NEWLINE: ID: return ID: elem SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //先頭から取り出す NEWLINE: ID: char ID: popleft LPAREN: ( ID: node TIMES: * TIMES: * ID: first RPAREN: ) LBRACE: { NEWLINE: ID: char ID: elem SEMI: ; NEWLINE: ID: node TIMES: * ID: tmp TIMES: * ID: first SEMI: ; NEWLINE: ID: if LPAREN: ( ID: tmp ID: NULL RPAREN: ) ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: ID: elem ID: tmp MINUS: - ID: elem SEMI: ; NEWLINE: TIMES: * ID: first ID: tmp MINUS: - ID: next SEMI: ; NEWLINE: ID: free LPAREN: ( ID: tmp RPAREN: ) SEMI: ; NEWLINE: ID: return ID: elem SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: char ID: elem SEMI: ; NEWLINE: COMMENT: //キューの長さ NEWLINE: ID: int ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: node TIMES: * ID: first ID: NULL TIMES: * ID: last SEMI: ; NEWLINE: NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: elem ID: fgetc LPAREN: ( ID: stdin RPAREN: ) SEMI: ; NEWLINE: COMMENT: //scanf("%c",&elem); NEWLINE: ID: if LPAREN: ( ID: elem ID: n RPAREN: ) ID: break SEMI: ; NEWLINE: COMMENT: //Bキーで1文字破棄、それ以外は末端に追加 NEWLINE: ID: if LPAREN: ( ID: elem ID: B RPAREN: ) LBRACE: { NEWLINE: COMMENT: //キューが空の状態でpopしないように NEWLINE: ID: if LPAREN: ( ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: pop LPAREN: ( ID: last RPAREN: ) SEMI: ; NEWLINE: ID: count MINUS: - MINUS: - SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: push LPAREN: ( ID: first ID: last ID: elem RPAREN: ) SEMI: ; NEWLINE: ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: while LPAREN: ( ID: count MINUS: - MINUS: - NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: COMMENT: //先頭から取り出す NEWLINE: ID: printf LPAREN: ( STRING: "%c" ID: popleft LPAREN: ( ID: first RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }