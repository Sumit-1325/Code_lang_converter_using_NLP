ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: char ID: s NUMBER: 11 SEMI: ; NEWLINE: ID: char ID: ans NUMBER: 11 SEMI: ; NEWLINE: ID: int ID: i ID: j SEMI: ; NEWLINE: NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: s RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i NUMBER: 11 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: i NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: i NUMBER: 0 SEMI: ; NEWLINE: ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: if LPAREN: ( ID: s ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: s ID: i NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: j NUMBER: 1 SEMI: ; NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: s ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: j MINUS: - MINUS: - SEMI: ; NEWLINE: ID: if LPAREN: ( ID: j NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: j NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: s ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: j SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) ID: printf LPAREN: ( STRING: "%c" ID: ans ID: i RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: RBRACE: }