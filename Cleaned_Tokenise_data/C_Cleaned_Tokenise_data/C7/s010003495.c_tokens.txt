DIVIDE: / TIMES: * ID: ex9_1 NEWLINE: ID: Rikuta TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: COMMENT: //スタックに格納するデータの最大数 NEWLINE: ID: define ID: SIZE NUMBER: 10 NEWLINE: COMMENT: //スタックの定義 NEWLINE: ID: typedef ID: struct ID: stack NEWLINE: LBRACE: { NEWLINE: ID: int ID: size SEMI: ; NEWLINE: ID: int ID: count SEMI: ; NEWLINE: ID: char ID: data ID: SIZE SEMI: ; NEWLINE: ID: char TIMES: * ID: top SEMI: ; NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: COMMENT: //スタックの初期化 NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: string RPAREN: ) SEMI: ; NEWLINE: COMMENT: //データの追加 NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: string ID: char ID: elem RPAREN: ) SEMI: ; NEWLINE: COMMENT: //データの取り出し NEWLINE: ID: void ID: pop LPAREN: ( ID: stack TIMES: * ID: string RPAREN: ) SEMI: ; NEWLINE: COMMENT: //stackの出力 NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: string RPAREN: ) SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //スタックを宣言 NEWLINE: ID: stack ID: string SEMI: ; NEWLINE: COMMENT: //スタックを初期化 NEWLINE: ID: initialize_stack LPAREN: ( ID: string RPAREN: ) SEMI: ; NEWLINE: ID: while LPAREN: ( NUMBER: 1 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //受け取る変数の宣言 NEWLINE: ID: char ID: temp_char SEMI: ; NEWLINE: COMMENT: //入力 NEWLINE: ID: scanf LPAREN: ( STRING: "%c" ID: temp_char RPAREN: ) SEMI: ; NEWLINE: COMMENT: //入力が終了なら終わり NEWLINE: ID: if LPAREN: ( ID: temp_char ID: n RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //Bが入力されたらスタックをpop NEWLINE: ID: if LPAREN: ( ID: temp_char ID: B RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: pop LPAREN: ( ID: string RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //0,1ならそれをスタックにpush NEWLINE: ID: if LPAREN: ( ID: temp_char NUMBER: 0 ID: temp_char NUMBER: 1 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: push LPAREN: ( ID: string ID: temp_char RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: //スタックを出力 NEWLINE: ID: print_stack LPAREN: ( ID: string RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //スタックの初期化 NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: string RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //スタックの要素数と最大の大きさとtopを初期化 NEWLINE: ID: string MINUS: - ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: string MINUS: - ID: size ID: SIZE SEMI: ; NEWLINE: ID: string MINUS: - ID: top LPAREN: ( ID: string MINUS: - ID: data ID: SIZE RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //データの追加 NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: string ID: char ID: elem RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //スタックの長さが最大を超えていたら標準エラー出力 NEWLINE: ID: if LPAREN: ( ID: string MINUS: - ID: count ID: string MINUS: - ID: size RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "Error: stack overflow. (x=%c)\n" ID: elem RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else NEWLINE: LBRACE: { NEWLINE: COMMENT: //スタックのtopは一個戻り，戻ったtopに要素が入る．要素数が1増える． NEWLINE: ID: string MINUS: - ID: top MINUS: - MINUS: - SEMI: ; NEWLINE: TIMES: * LPAREN: ( ID: string MINUS: - ID: top RPAREN: ) ID: elem SEMI: ; NEWLINE: ID: string MINUS: - ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: //データの取り出し NEWLINE: ID: void ID: pop LPAREN: ( ID: stack TIMES: * ID: string RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //データに何も入っていなかったら NEWLINE: ID: if LPAREN: ( ID: string MINUS: - ID: count NUMBER: 0 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //スタックのトップを奥へ，要素数が1減る NEWLINE: ID: string MINUS: - ID: top PLUS: + PLUS: + SEMI: ; NEWLINE: ID: string MINUS: - ID: count MINUS: - MINUS: - SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: string RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //ポインタの宣言 NEWLINE: ID: char TIMES: * ID: pointer SEMI: ; NEWLINE: COMMENT: //ポインタはスタックの一番古い要素を指す NEWLINE: ID: pointer ID: string MINUS: - ID: top PLUS: + ID: string MINUS: - ID: count MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: string MINUS: - ID: count SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: COMMENT: //ポインタがさす要素を新しくしながら出力していく． NEWLINE: ID: printf LPAREN: ( STRING: "%c" TIMES: * LPAREN: ( ID: pointer MINUS: - MINUS: - RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //改行 NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: