ID: include ID: stdio ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: define ID: N NUMBER: 10 NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: char ID: str ID: N LBRACE: { NUMBER: 0 RBRACE: } SEMI: ; NEWLINE: ID: char ID: kotae ID: N LBRACE: { NUMBER: 0 RBRACE: } SEMI: ; NEWLINE: ID: char ID: word SEMI: ; NEWLINE: ID: int ID: i SEMI: ; NEWLINE: ID: int ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: str RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: strlen LPAREN: ( ID: str RPAREN: ) SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: word ID: str ID: i SEMI: ; NEWLINE: ID: if LPAREN: ( ID: word NUMBER: 0 ID: word NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: kotae ID: j ID: word SEMI: ; NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: word ID: B RPAREN: ) LBRACE: { NEWLINE: ID: j MINUS: - MINUS: - SEMI: ; NEWLINE: ID: if LPAREN: ( ID: j NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: j NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "エラー\n" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: i ID: j SEMI: ; ID: j ID: N SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: kotae ID: i NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%s" ID: kotae RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: