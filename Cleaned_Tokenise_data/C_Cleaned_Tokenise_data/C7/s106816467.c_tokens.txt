ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: math ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: define ID: ll ID: long ID: long NEWLINE: ID: define ID: rep LPAREN: ( ID: i ID: l ID: r RPAREN: ) ID: for LPAREN: ( ID: ll ID: i LPAREN: ( ID: l RPAREN: ) SEMI: ; ID: i LPAREN: ( ID: r RPAREN: ) SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: ID: define ID: max LPAREN: ( ID: p ID: q RPAREN: ) LPAREN: ( LPAREN: ( ID: p RPAREN: ) LPAREN: ( ID: q RPAREN: ) LPAREN: ( ID: p RPAREN: ) LPAREN: ( ID: q RPAREN: ) RPAREN: ) NEWLINE: ID: define ID: min LPAREN: ( ID: p ID: q RPAREN: ) LPAREN: ( LPAREN: ( ID: p RPAREN: ) LPAREN: ( ID: q RPAREN: ) LPAREN: ( ID: p RPAREN: ) LPAREN: ( ID: q RPAREN: ) RPAREN: ) NEWLINE: ID: define ID: chmax LPAREN: ( ID: a ID: b RPAREN: ) LPAREN: ( LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: b RPAREN: ) LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: b RPAREN: ) RPAREN: ) NEWLINE: ID: define ID: chmin LPAREN: ( ID: a ID: b RPAREN: ) LPAREN: ( LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: b RPAREN: ) LPAREN: ( ID: a RPAREN: ) LPAREN: ( ID: b RPAREN: ) RPAREN: ) NEWLINE: ID: define ID: abs LPAREN: ( ID: p RPAREN: ) LPAREN: ( LPAREN: ( ID: p RPAREN: ) LPAREN: ( NUMBER: 0 RPAREN: ) LPAREN: ( ID: p RPAREN: ) LPAREN: ( MINUS: - LPAREN: ( ID: p RPAREN: ) RPAREN: ) RPAREN: ) NEWLINE: ID: int ID: cmp LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) SEMI: ; NEWLINE: COMMENT: //your code here! NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: char ID: s NUMBER: 11 ID: ans NUMBER: 11 SEMI: ; NEWLINE: ID: ll ID: a NUMBER: 0 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: s RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: strlen LPAREN: ( ID: s RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: rep LPAREN: ( ID: i NUMBER: 0 ID: strlen LPAREN: ( ID: s RPAREN: ) RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: s ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: a NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: a NUMBER: 0 SEMI: ; NEWLINE: ID: a MINUS: - MINUS: - SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: ans ID: a ID: s ID: i SEMI: ; NEWLINE: ID: a PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%s\n" ID: ans RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: cmp LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { NEWLINE: ID: ll ID: A TIMES: * LPAREN: ( ID: ll TIMES: * RPAREN: ) ID: a ID: B TIMES: * LPAREN: ( ID: ll TIMES: * RPAREN: ) ID: b SEMI: ; NEWLINE: ID: if LPAREN: ( ID: A ID: B RPAREN: ) ID: return NUMBER: 0 SEMI: ; NEWLINE: ID: else ID: return ID: A ID: B NUMBER: 1 MINUS: - NUMBER: 1 SEMI: ; COMMENT: //昇順ソート NEWLINE: RBRACE: } NEWLINE: