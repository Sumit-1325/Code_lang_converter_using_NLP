ID: include ID: stdio ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: char ID: s NUMBER: 10 PLUS: + NUMBER: 1 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: s RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: strlen LPAREN: ( ID: s RPAREN: ) SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: s ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: int ID: j ID: i MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: while LPAREN: ( ID: j NUMBER: 0 ID: s ID: j ID: X RPAREN: ) LBRACE: { NEWLINE: ID: j MINUS: - NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: j NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: s ID: j ID: X SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: s ID: i ID: X SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: strlen LPAREN: ( ID: s RPAREN: ) SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: s ID: i ID: X RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%c" ID: s ID: i RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: puts LPAREN: ( STRING: "" RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }