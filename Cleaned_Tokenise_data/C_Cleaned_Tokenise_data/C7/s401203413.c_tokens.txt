DIVIDE: / TIMES: * ID: ex NUMBER: 9 ID: _1 NEWLINE: ID: KitamoriFumiya TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: define ID: SIZE NUMBER: 11 NEWLINE: COMMENT: // スタックの定義 NEWLINE: ID: typedef ID: struct ID: stack LBRACE: { NEWLINE: ID: int ID: size SEMI: ; NEWLINE: ID: int ID: count SEMI: ; NEWLINE: ID: char ID: data ID: SIZE SEMI: ; NEWLINE: ID: char TIMES: * ID: top SEMI: ; NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: stk ID: char ID: elem RPAREN: ) SEMI: ; NEWLINE: ID: char ID: pop LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: stack ID: stk SEMI: ; NEWLINE: ID: char ID: input NUMBER: 11 TIMES: * ID: ptr_input SEMI: ; COMMENT: // キーボードでの入力を格納するための配列とポインタ NEWLINE: ID: initialize_stack LPAREN: ( ID: stk RPAREN: ) SEMI: ; COMMENT: // スタックを初期化 NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: input RPAREN: ) SEMI: ; COMMENT: // 文字列の入力 NEWLINE: ID: ptr_input ID: input SEMI: ; NEWLINE: ID: while LPAREN: ( TIMES: * ID: ptr_input RPAREN: ) LBRACE: { NEWLINE: COMMENT: // 文字がBであり、その前の文字があればそれを消す NEWLINE: ID: if LPAREN: ( TIMES: * ID: ptr_input ID: B RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: stk ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: pop LPAREN: ( ID: stk RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: // そうでなければデータを追加 NEWLINE: ID: else LBRACE: { NEWLINE: ID: push LPAREN: ( ID: stk TIMES: * ID: ptr_input RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: PLUS: + PLUS: + ID: ptr_input SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: // 出力 NEWLINE: ID: print_stack LPAREN: ( ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: // スタックの初期化 NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: stk MINUS: - ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: stk MINUS: - ID: size ID: SIZE SEMI: ; NEWLINE: ID: stk MINUS: - ID: top LPAREN: ( ID: stk MINUS: - ID: data ID: SIZE RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: // データの追加 NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: stk ID: char ID: elem RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count ID: stk MINUS: - ID: size RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "Error: stack overflow. (x=%c)\n" ID: elem RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: stk MINUS: - ID: top MINUS: - MINUS: - SEMI: ; NEWLINE: TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) ID: elem SEMI: ; NEWLINE: ID: stk MINUS: - ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: // データの取り出し NEWLINE: ID: char ID: pop LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: char ID: latest SEMI: ; NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stdout STRING: "Error: stack underflow.\n" RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: latest TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) SEMI: ; NEWLINE: ID: stk MINUS: - ID: top PLUS: + PLUS: + SEMI: ; NEWLINE: ID: stk MINUS: - ID: count MINUS: - MINUS: - SEMI: ; NEWLINE: ID: return ID: latest SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: // スタックの中身を逆順に取り出す NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: char ID: output NUMBER: 11 TIMES: * ID: ptr_output SEMI: ; NEWLINE: ID: int ID: i SEMI: ; NEWLINE: ID: ptr_output ID: stk MINUS: - ID: top SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i ID: stk MINUS: - ID: count SEMI: ; ID: i NUMBER: 0 SEMI: ; ID: i MINUS: - MINUS: - RPAREN: ) LBRACE: { NEWLINE: ID: output ID: i MINUS: - NUMBER: 1 TIMES: * ID: ptr_output SEMI: ; NEWLINE: ID: ptr_output PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%s\n" ID: output RPAREN: ) SEMI: ; NEWLINE: RBRACE: }