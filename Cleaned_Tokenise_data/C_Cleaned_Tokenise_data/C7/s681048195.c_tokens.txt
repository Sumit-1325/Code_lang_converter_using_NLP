ID: include ID: stdio ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: char ID: inp NUMBER: 11 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: inp RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: int ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: char ID: array NUMBER: 11 LBRACE: { NUMBER: 0 RBRACE: } SEMI: ; NEWLINE: ID: int ID: len ID: strlen LPAREN: ( ID: inp RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: len SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: inp ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: array ID: j NUMBER: 0 SEMI: ; NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: inp ID: i NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: array ID: j NUMBER: 1 SEMI: ; NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: inp NEWLINE: NEWLINE: ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: j NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: j MINUS: - MINUS: - SEMI: ; NEWLINE: ID: array ID: j NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%s" ID: array RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }