DIVIDE: / TIMES: * ID: ex9_1 NEWLINE: ID: urah TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: COMMENT: // sの最大の長さ NEWLINE: ID: define ID: MAX_LEN NUMBER: 11 NEWLINE: COMMENT: //スタックの定義 NEWLINE: ID: typedef ID: struct ID: stack LBRACE: { NEWLINE: ID: int ID: size SEMI: ; NEWLINE: ID: int ID: count SEMI: ; NEWLINE: ID: char ID: data ID: MAX_LEN SEMI: ; NEWLINE: ID: char TIMES: * ID: top SEMI: ; NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: COMMENT: //スタックの初期化 NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: stk MINUS: - ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: stk MINUS: - ID: size ID: MAX_LEN SEMI: ; NEWLINE: ID: stk MINUS: - ID: top LPAREN: ( ID: stk MINUS: - ID: data ID: MAX_LEN RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //データの追加 NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: stk ID: char ID: elem RPAREN: ) LBRACE: { NEWLINE: COMMENT: // エラー処理 NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count ID: stk MINUS: - ID: size RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "Error: stack overflow. (x=%c)\n" ID: elem RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: stk MINUS: - ID: top MINUS: - MINUS: - SEMI: ; NEWLINE: TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) ID: elem SEMI: ; NEWLINE: ID: stk MINUS: - ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: //データの取り出し NEWLINE: ID: void ID: pop LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: COMMENT: // エラー処理 NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stdout STRING: "Error: stack underflow.\n" RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: stk MINUS: - ID: top PLUS: + PLUS: + SEMI: ; NEWLINE: ID: stk MINUS: - ID: count MINUS: - MINUS: - SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: // データの出力 NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: char TIMES: * ID: ptr SEMI: ; NEWLINE: ID: ptr LPAREN: ( ID: stk MINUS: - ID: data ID: MAX_LEN RPAREN: ) SEMI: ; NEWLINE: COMMENT: // 逆方向から出力していく NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: stk MINUS: - ID: count SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%c" TIMES: * LPAREN: ( MINUS: - MINUS: - ID: ptr RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: stack ID: stk SEMI: ; NEWLINE: ID: char ID: string ID: MAX_LEN SEMI: ; NEWLINE: COMMENT: // 入力受け取り NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: string RPAREN: ) SEMI: ; NEWLINE: COMMENT: //スタックを初期化 NEWLINE: ID: initialize_stack LPAREN: ( ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: strlen LPAREN: ( ID: string RPAREN: ) SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: string ID: i ID: B ID: stk ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: COMMENT: // データの取り出し NEWLINE: ID: pop LPAREN: ( ID: stk RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: string ID: i NUMBER: 1 ID: string ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: COMMENT: // データの追加 NEWLINE: ID: push LPAREN: ( ID: stk ID: string ID: i RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: print_stack LPAREN: ( ID: stk RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }