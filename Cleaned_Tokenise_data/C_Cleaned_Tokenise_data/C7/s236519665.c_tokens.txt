ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: char ID: s NUMBER: 11 SEMI: ; NEWLINE: ID: char ID: r NUMBER: 11 SEMI: ; NEWLINE: ID: int ID: i ID: n ID: j SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: s NUMBER: 11 RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: n NUMBER: 0 SEMI: ; ID: s ID: n NUMBER: 0 SEMI: ; ID: n PLUS: + PLUS: + RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i ID: n ID: j NUMBER: 0 SEMI: ; ID: i NUMBER: 0 SEMI: ; ID: i MINUS: - MINUS: - RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: s ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: i MINUS: - MINUS: - SEMI: ; NEWLINE: ID: continue SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: r ID: j ID: s ID: i SEMI: ; NEWLINE: ID: j PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n DIVIDE: / NUMBER: 2 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: char ID: temp ID: r ID: n MINUS: - ID: i MINUS: - NUMBER: 2 SEMI: ; NEWLINE: ID: r ID: n MINUS: - ID: i MINUS: - NUMBER: 2 ID: r ID: i SEMI: ; NEWLINE: ID: r ID: i ID: temp SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: j SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) ID: printf LPAREN: ( STRING: "%c" ID: r ID: i RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }