DIVIDE: / TIMES: * ID: ex NUMBER: 9 ID: _1 NEWLINE: ID: cy_an TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: COMMENT: //スタックに格納するデータの最大数 NEWLINE: ID: define ID: SIZE NUMBER: 10 NEWLINE: COMMENT: //スタックの定義 NEWLINE: ID: typedef ID: struct ID: stack LBRACE: { NEWLINE: ID: int ID: size SEMI: ; NEWLINE: ID: int ID: count SEMI: ; NEWLINE: ID: char ID: data ID: SIZE SEMI: ; NEWLINE: ID: char TIMES: * ID: top SEMI: ; NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: COMMENT: //スタックの初期化 NEWLINE: ID: void ID: initialize_stack LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: stk MINUS: - ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: stk MINUS: - ID: size ID: SIZE SEMI: ; NEWLINE: ID: stk MINUS: - ID: top LPAREN: ( ID: stk MINUS: - ID: data ID: SIZE RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: //データの追加 NEWLINE: ID: void ID: push LPAREN: ( ID: stack TIMES: * ID: stk ID: char ID: elem RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count ID: stk MINUS: - ID: size RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "Error: stack overflow. (x=%c)\n" ID: elem RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: stk MINUS: - ID: top MINUS: - MINUS: - SEMI: ; NEWLINE: TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) ID: elem SEMI: ; NEWLINE: ID: stk MINUS: - ID: count PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: COMMENT: //データの取り出し NEWLINE: ID: char ID: pop LPAREN: ( ID: stack TIMES: * ID: stk RPAREN: ) LBRACE: { NEWLINE: ID: char ID: latest SEMI: ; NEWLINE: ID: if LPAREN: ( ID: stk MINUS: - ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stdout STRING: "Error: stack underflow.\n" RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: latest TIMES: * LPAREN: ( ID: stk MINUS: - ID: top RPAREN: ) SEMI: ; NEWLINE: ID: stk MINUS: - ID: top PLUS: + PLUS: + SEMI: ; NEWLINE: ID: stk MINUS: - ID: count MINUS: - MINUS: - SEMI: ; NEWLINE: ID: return ID: latest SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: stack ID: input ID: output SEMI: ; NEWLINE: ID: char ID: arr ID: SIZE SEMI: ; NEWLINE: ID: int ID: i NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: COMMENT: //スタックを初期化 NEWLINE: ID: initialize_stack LPAREN: ( ID: input RPAREN: ) SEMI: ; NEWLINE: ID: initialize_stack LPAREN: ( ID: output RPAREN: ) SEMI: ; NEWLINE: COMMENT: //スタックにデータを追加 NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: arr RPAREN: ) SEMI: ; NEWLINE: ID: while LPAREN: ( ID: arr ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: arr ID: i ID: B RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: input ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: pop LPAREN: ( ID: input RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: push LPAREN: ( ID: input ID: arr ID: i RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: i PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: // スタックから別のスタックへ移して並べ替え NEWLINE: ID: while LPAREN: ( ID: input ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: push LPAREN: ( ID: output ID: pop LPAREN: ( ID: input RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: COMMENT: // スタックから要素を取り出して出力 NEWLINE: ID: while LPAREN: ( ID: output ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%c" ID: pop LPAREN: ( ID: output RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }