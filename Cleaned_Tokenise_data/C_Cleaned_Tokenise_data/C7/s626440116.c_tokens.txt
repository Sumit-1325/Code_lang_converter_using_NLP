ID: include ID: stdbool ID: h NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: inttypes ID: h NEWLINE: ID: include ID: stdint ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: include ID: wchar ID: h NEWLINE: ID: define ID: MIN LPAREN: ( ID: a ID: b RPAREN: ) LPAREN: ( ID: a ID: b ID: a ID: b RPAREN: ) NEWLINE: ID: define ID: MAX LPAREN: ( ID: a ID: b RPAREN: ) LPAREN: ( ID: a ID: b ID: a ID: b RPAREN: ) NEWLINE: ID: define ID: ABSS LPAREN: ( ID: a ID: b RPAREN: ) LPAREN: ( ID: a ID: b ID: a MINUS: - ID: b ID: b MINUS: - ID: a RPAREN: ) NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: char ID: s NUMBER: 11 SEMI: ; NEWLINE: ID: char ID: ans NUMBER: 11 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: s RPAREN: ) SEMI: ; NEWLINE: ID: const ID: size_t ID: len ID: strlen LPAREN: ( ID: s RPAREN: ) SEMI: ; NEWLINE: ID: size_t ID: pos NUMBER: 0 SEMI: ; NEWLINE: ID: ans ID: pos NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: size_t ID: idx NUMBER: 0 SEMI: ; ID: idx ID: len SEMI: ; ID: idx PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: s ID: idx ID: B RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: pos ID: s ID: idx SEMI: ; NEWLINE: ID: ans ID: pos PLUS: + NUMBER: 1 NUMBER: 0 SEMI: ; NEWLINE: ID: pos PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: if LPAREN: ( ID: pos NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: ans ID: pos NUMBER: 0 SEMI: ; NEWLINE: ID: pos MINUS: - MINUS: - SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: puts LPAREN: ( ID: ans RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: