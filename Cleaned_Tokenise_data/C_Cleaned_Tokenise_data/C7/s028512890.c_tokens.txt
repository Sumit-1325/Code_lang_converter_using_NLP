DIVIDE: / TIMES: * NEWLINE: ID: ex NUMBER: 9 ID: _1 NEWLINE: ID: tomatokan NEWLINE: TIMES: * DIVIDE: / NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: define ID: LIM NUMBER: 12 NEWLINE: ID: typedef ID: struct ID: stack LBRACE: { COMMENT: //スタック NEWLINE: ID: int ID: count SEMI: ; NEWLINE: ID: int ID: msg ID: LIM SEMI: ; NEWLINE: ID: int TIMES: * ID: top SEMI: ; NEWLINE: RBRACE: } ID: stack SEMI: ; NEWLINE: ID: stack ID: new_stack LPAREN: ( RPAREN: ) LBRACE: { COMMENT: //初期化されたスタック(空)を返す。 NEWLINE: ID: stack ID: st SEMI: ; NEWLINE: ID: st ID: count NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: LIM SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: st ID: msg ID: i NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: st ID: top ID: st ID: msg SEMI: ; NEWLINE: ID: return ID: st SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: void ID: push_stack LPAREN: ( ID: stack TIMES: * ID: st ID: int ID: elem RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: st MINUS: - ID: count ID: LIM RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "stack overflow" RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: LPAREN: ( ID: st MINUS: - ID: count RPAREN: ) PLUS: + PLUS: + SEMI: ; NEWLINE: ID: st MINUS: - ID: msg ID: st MINUS: - ID: count MINUS: - NUMBER: 1 ID: elem SEMI: ; NEWLINE: LPAREN: ( ID: st MINUS: - ID: top RPAREN: ) PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: pop_stack LPAREN: ( ID: stack TIMES: * ID: st RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: st MINUS: - ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "stack underflow" RPAREN: ) SEMI: ; NEWLINE: ID: exit LPAREN: ( NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: LPAREN: ( ID: st MINUS: - ID: count RPAREN: ) MINUS: - MINUS: - SEMI: ; NEWLINE: LPAREN: ( ID: st MINUS: - ID: top RPAREN: ) MINUS: - MINUS: - SEMI: ; NEWLINE: ID: return TIMES: * LPAREN: ( ID: st MINUS: - ID: top RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: void ID: print_stack LPAREN: ( ID: stack TIMES: * ID: st RPAREN: ) LBRACE: { NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: st MINUS: - ID: count SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: st MINUS: - ID: msg ID: i RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: is_empty LPAREN: ( ID: stack TIMES: * ID: st RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: st MINUS: - ID: count NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: return NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: char ID: input NUMBER: 12 SEMI: ; NEWLINE: ID: char TIMES: * ID: ptr SEMI: ; NEWLINE: ID: stack ID: st SEMI: ; NEWLINE: ID: ptr ID: input SEMI: ; NEWLINE: ID: fgets LPAREN: ( ID: input NUMBER: 12 ID: stdin RPAREN: ) SEMI: ; COMMENT: //入力の読み取り NEWLINE: ID: st ID: new_stack LPAREN: ( RPAREN: ) SEMI: ; NEWLINE: ID: while LPAREN: ( TIMES: * ID: ptr NUMBER: 0 TIMES: * ID: ptr ID: n RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( TIMES: * ID: ptr NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: push_stack LPAREN: ( ID: st NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( TIMES: * ID: ptr NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: push_stack LPAREN: ( ID: st NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: if LPAREN: ( ID: is_empty LPAREN: ( ID: st RPAREN: ) RPAREN: ) LBRACE: { NEWLINE: ID: pop_stack LPAREN: ( ID: st RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: ptr PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: print_stack LPAREN: ( ID: st RPAREN: ) SEMI: ; COMMENT: //結果の表示 NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }