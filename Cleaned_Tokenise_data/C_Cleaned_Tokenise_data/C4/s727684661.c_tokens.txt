ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: int ID: desc LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { NEWLINE: ID: return TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: b MINUS: - TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: a SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: n SEMI: ; NEWLINE: ID: int ID: a NUMBER: 20000 SEMI: ; NEWLINE: ID: int ID: b NUMBER: 20000 SEMI: ; NEWLINE: ID: int ID: i ID: j SEMI: ; NEWLINE: ID: int ID: p SEMI: ; NEWLINE: NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: a ID: i RPAREN: ) SEMI: ; NEWLINE: ID: b ID: i ID: a ID: i SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: DIVIDE: / TIMES: * ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n MINUS: - NUMBER: 1 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 0 SEMI: ; ID: j ID: n MINUS: - ID: i MINUS: - NUMBER: 1 SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: if LPAREN: ( ID: a ID: i ID: a ID: i PLUS: + NUMBER: 1 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: p ID: a ID: i PLUS: + NUMBER: 1 SEMI: ; NEWLINE: ID: a ID: i PLUS: + NUMBER: 1 ID: a ID: i SEMI: ; NEWLINE: ID: a ID: i ID: p SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } TIMES: * DIVIDE: / NEWLINE: NEWLINE: ID: qsort LPAREN: ( ID: a ID: sizeof LPAREN: ( ID: a RPAREN: ) DIVIDE: / ID: sizeof LPAREN: ( TIMES: * ID: a RPAREN: ) ID: sizeof LPAREN: ( TIMES: * ID: a RPAREN: ) ID: desc RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: if LPAREN: ( ID: b ID: i ID: a NUMBER: 0 RPAREN: ) NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: a NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: ID: else NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: a NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }