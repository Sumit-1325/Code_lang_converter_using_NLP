COMMENT: /*よくばりセット2019/07/13 */ NEWLINE: ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: math ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: define ID: MOD NUMBER: 1000000007 NEWLINE: ID: typedef ID: long ID: long ID: int ID: ll SEMI: ; NEWLINE: ID: void ID: llswap LPAREN: ( ID: ll TIMES: * ID: x ID: ll TIMES: * ID: y RPAREN: ) LBRACE: { ID: ll ID: temp SEMI: ; ID: temp TIMES: * ID: x SEMI: ; TIMES: * ID: x TIMES: * ID: y SEMI: ; TIMES: * ID: y ID: temp SEMI: ; RBRACE: } NEWLINE: ID: void ID: swap LPAREN: ( ID: int TIMES: * ID: x ID: int TIMES: * ID: y RPAREN: ) LBRACE: { ID: int ID: tmp SEMI: ; ID: tmp TIMES: * ID: x SEMI: ; TIMES: * ID: x TIMES: * ID: y SEMI: ; TIMES: * ID: y ID: tmp SEMI: ; RBRACE: } NEWLINE: ID: int ID: max LPAREN: ( ID: int ID: x ID: int ID: y RPAREN: ) LBRACE: { ID: return ID: x ID: y ID: x ID: y SEMI: ; RBRACE: } NEWLINE: ID: int ID: min LPAREN: ( ID: int ID: x ID: int ID: y RPAREN: ) LBRACE: { ID: return ID: x ID: y ID: y ID: x SEMI: ; RBRACE: } NEWLINE: ID: ll ID: llmax LPAREN: ( ID: ll ID: x ID: ll ID: y RPAREN: ) LBRACE: { ID: return ID: x ID: y ID: x ID: y SEMI: ; RBRACE: } NEWLINE: ID: ll ID: llmin LPAREN: ( ID: ll ID: x ID: ll ID: y RPAREN: ) LBRACE: { ID: return ID: x ID: y ID: y ID: x SEMI: ; RBRACE: } NEWLINE: ID: int ID: asc LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { ID: return TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: a MINUS: - TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: b SEMI: ; RBRACE: } NEWLINE: ID: int ID: desc LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { ID: return TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: b MINUS: - TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: a SEMI: ; RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: static ID: int ID: n ID: a NUMBER: 400000 SEMI: ; NEWLINE: ID: static ID: int ID: list NUMBER: 400000 ID: list_n NUMBER: 400000 LBRACE: { RBRACE: } SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: a ID: i RPAREN: ) SEMI: ; NEWLINE: ID: list ID: i ID: a ID: i SEMI: ; NEWLINE: ID: list_n ID: a ID: i MINUS: - NUMBER: 1 PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: qsort LPAREN: ( ID: list ID: n ID: sizeof LPAREN: ( ID: int RPAREN: ) ID: desc RPAREN: ) SEMI: ; NEWLINE: COMMENT: //for(int i=0;i<n;i++)printf(">%d\n",list[i]); NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: for LPAREN: ( ID: int ID: j NUMBER: 0 SEMI: ; ID: j ID: n SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: list ID: j ID: a ID: i RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: list ID: j RPAREN: ) SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: if LPAREN: ( ID: list_n ID: a ID: i MINUS: - NUMBER: 1 NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: list ID: j RPAREN: ) SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }