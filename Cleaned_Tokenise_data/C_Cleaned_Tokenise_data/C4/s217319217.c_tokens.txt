ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: int ID: N ID: i ID: j ID: big NUMBER: 0 ID: next NUMBER: 0 ID: n NUMBER: 1 ID: num ID: m NUMBER: 0 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d\n" ID: N RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: N SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d\n" ID: num RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: i NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: big ID: num SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: num ID: big RPAREN: ) LBRACE: { NEWLINE: ID: next ID: big SEMI: ; NEWLINE: ID: big ID: num SEMI: ; NEWLINE: ID: m ID: n SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: void RPAREN: ) LPAREN: ( ID: num ID: next RPAREN: ) ID: num ID: big RPAREN: ) LBRACE: { NEWLINE: ID: next ID: num SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: n PLUS: + NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: big ID: next RPAREN: ) LBRACE: { NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 1 SEMI: ; ID: j ID: N PLUS: + NUMBER: 1 SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: big RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 1 SEMI: ; ID: j ID: N PLUS: + NUMBER: 1 SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: j ID: m RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: next RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: big RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: