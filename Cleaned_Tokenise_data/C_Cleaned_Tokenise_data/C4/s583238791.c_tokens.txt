ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: int ID: N SEMI: ; NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: scanf LPAREN: ( STRING: "%d" ID: N RPAREN: ) RPAREN: ) NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "scanf error\n" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int TIMES: * ID: array SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: N SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( LPAREN: ( ID: scanf LPAREN: ( STRING: "%d" ID: array PLUS: + ID: i RPAREN: ) RPAREN: ) NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: fprintf LPAREN: ( ID: stderr STRING: "scanf error\n" RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: N SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: int ID: max NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: j NUMBER: 0 SEMI: ; ID: j ID: N SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: j ID: i RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( TIMES: * LPAREN: ( ID: array PLUS: + ID: j RPAREN: ) ID: max RPAREN: ) LBRACE: { NEWLINE: ID: max TIMES: * LPAREN: ( ID: array PLUS: + ID: j RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: max RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: