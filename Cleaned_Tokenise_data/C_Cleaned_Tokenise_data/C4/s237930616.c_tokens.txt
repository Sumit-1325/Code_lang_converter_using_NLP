ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: int ID: sift LPAREN: ( ID: int ID: l ID: int ID: r RPAREN: ) SEMI: ; NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: int ID: n ID: a ID: i ID: j ID: ret ID: max ID: m_id ID: max2 SEMI: ; NEWLINE: ID: int TIMES: * ID: A SEMI: ; NEWLINE: NEWLINE: ID: max ID: m_id ID: max2 NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: ID: ret ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: ret ID: EOF RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: return NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: A LPAREN: ( ID: int TIMES: * RPAREN: ) ID: malloc LPAREN: ( ID: sizeof LPAREN: ( ID: int RPAREN: ) TIMES: * ID: n RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: A ID: NULL RPAREN: ) LBRACE: { ID: return NUMBER: 1 SEMI: ; RBRACE: } NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: ret ID: scanf LPAREN: ( STRING: "%d" ID: A PLUS: + ID: i RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: ret ID: EOF RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: return NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: max TIMES: * LPAREN: ( ID: A PLUS: + ID: i RPAREN: ) RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: max TIMES: * LPAREN: ( ID: A PLUS: + ID: i RPAREN: ) SEMI: ; NEWLINE: ID: m_id ID: i SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: if LPAREN: ( ID: max2 TIMES: * LPAREN: ( ID: A PLUS: + ID: i RPAREN: ) ID: m_id ID: i RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: max2 TIMES: * LPAREN: ( ID: A PLUS: + ID: i RPAREN: ) SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: if LPAREN: ( ID: m_id ID: i RPAREN: ) LBRACE: { ID: printf LPAREN: ( STRING: "%d\n" ID: max RPAREN: ) SEMI: ; RBRACE: } NEWLINE: ID: else LBRACE: { ID: printf LPAREN: ( STRING: "%d\n" ID: max2 RPAREN: ) SEMI: ; RBRACE: } NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: free LPAREN: ( ID: A RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: