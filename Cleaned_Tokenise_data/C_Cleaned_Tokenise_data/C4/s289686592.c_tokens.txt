ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: int ID: ord LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { NEWLINE: ID: int ID: x TIMES: * LPAREN: ( LPAREN: ( ID: int TIMES: * RPAREN: ) ID: a RPAREN: ) ID: y TIMES: * LPAREN: ( LPAREN: ( ID: int TIMES: * RPAREN: ) ID: b RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: x ID: y RPAREN: ) NEWLINE: ID: return NUMBER: 1 SEMI: ; NEWLINE: ID: if LPAREN: ( ID: x ID: y RPAREN: ) NEWLINE: ID: return MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: n SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: int ID: vec ID: n ID: crt ID: n SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: h NUMBER: 0 SEMI: ; ID: h ID: n SEMI: ; PLUS: + PLUS: + ID: h RPAREN: ) LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: vec ID: h RPAREN: ) SEMI: ; NEWLINE: ID: crt ID: h ID: vec ID: h SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: qsort LPAREN: ( ID: crt ID: n ID: sizeof LPAREN: ( ID: crt NUMBER: 0 RPAREN: ) ID: ord RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: int ID: max ID: crt ID: n MINUS: - NUMBER: 1 ID: maxb ID: crt ID: n MINUS: - NUMBER: 2 SEMI: ; NEWLINE: NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; PLUS: + PLUS: + ID: i RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: vec ID: i ID: max RPAREN: ) NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: maxb RPAREN: ) SEMI: ; NEWLINE: ID: else NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: max RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: