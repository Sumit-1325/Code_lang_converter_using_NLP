ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: int ID: comp LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { NEWLINE: ID: return TIMES: * LPAREN: ( ID: const ID: int TIMES: * RPAREN: ) ID: b MINUS: - TIMES: * LPAREN: ( ID: const ID: int TIMES: * RPAREN: ) ID: a SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: ri LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: r NUMBER: 0 ID: c ID: s NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( SEMI: ; SEMI: ; RPAREN: ) LBRACE: { ID: c ID: getchar_unlocked LPAREN: ( RPAREN: ) SEMI: ; ID: if LPAREN: ( ID: c MINUS: - RPAREN: ) LBRACE: { ID: s NUMBER: 1 SEMI: ; ID: break SEMI: ; RBRACE: } ID: if LPAREN: ( ID: c NUMBER: 9 ID: c NUMBER: 0 RPAREN: ) LBRACE: { ID: r ID: c MINUS: - NUMBER: 0 SEMI: ; ID: break SEMI: ; RBRACE: } RBRACE: } NEWLINE: ID: for LPAREN: ( SEMI: ; SEMI: ; RPAREN: ) LBRACE: { ID: c ID: getchar_unlocked LPAREN: ( RPAREN: ) SEMI: ; ID: if LPAREN: ( ID: c NUMBER: 0 ID: c NUMBER: 9 RPAREN: ) ID: break SEMI: ; ID: r ID: r TIMES: * NUMBER: 10 PLUS: + ID: c MINUS: - NUMBER: 0 SEMI: ; RBRACE: } NEWLINE: ID: if LPAREN: ( ID: s RPAREN: ) ID: r MINUS: - ID: r SEMI: ; NEWLINE: ID: return ID: r SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: n SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: int ID: a ID: n SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) ID: a ID: i ID: ri LPAREN: ( RPAREN: ) SEMI: ; NEWLINE: ID: int ID: max NUMBER: 0 ID: x NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) ID: if LPAREN: ( ID: max ID: a ID: i RPAREN: ) ID: max ID: a ID: i ID: x NUMBER: 1 SEMI: ; ID: else ID: if LPAREN: ( ID: max ID: a ID: i RPAREN: ) ID: x PLUS: + PLUS: + SEMI: ; NEWLINE: ID: int ID: max2 NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) ID: if LPAREN: ( ID: a ID: i ID: max ID: max2 ID: a ID: i RPAREN: ) ID: max2 ID: a ID: i SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: x NUMBER: 1 ID: a ID: i ID: max RPAREN: ) ID: printf LPAREN: ( STRING: "%d\n" ID: max2 RPAREN: ) SEMI: ; NEWLINE: ID: else ID: printf LPAREN: ( STRING: "%d\n" ID: max RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: