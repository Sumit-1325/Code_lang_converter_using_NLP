ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: include ID: stdbool ID: h NEWLINE: ID: int ID: my_sort LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: return TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: b MINUS: - TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: a SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: int ID: argc ID: void TIMES: * TIMES: * ID: arg RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: long ID: long ID: n SEMI: ; NEWLINE: ID: int ID: a NUMBER: 200000 SEMI: ; NEWLINE: ID: int ID: b NUMBER: 200000 SEMI: ; NEWLINE: ID: long ID: long ID: i ID: j SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%lld" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: a ID: i RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: memcpy LPAREN: ( ID: b ID: a ID: n TIMES: * ID: sizeof LPAREN: ( ID: int RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: qsort LPAREN: ( ID: b ID: n ID: sizeof LPAREN: ( ID: int RPAREN: ) ID: my_sort RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 0 SEMI: ; ID: j ID: n SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: if LPAREN: ( ID: a ID: i ID: b ID: j RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: b ID: j RPAREN: ) SEMI: ; NEWLINE: ID: break SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: j ID: n RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: b NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: