ID: include ID: stdio ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: stdint ID: h NEWLINE: ID: include ID: inttypes ID: h NEWLINE: ID: typedef ID: struct ID: segment_tree_void LBRACE: { NEWLINE: ID: void TIMES: * ID: array SEMI: ; NEWLINE: ID: int32_t ID: size SEMI: ; NEWLINE: ID: size_t ID: val_size SEMI: ; NEWLINE: ID: void LPAREN: ( TIMES: * ID: func RPAREN: ) LPAREN: ( ID: void TIMES: * ID: const ID: void TIMES: * ID: const ID: void TIMES: * RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: segment_tree SEMI: ; NEWLINE: ID: static ID: inline ID: void ID: segment_tree_memcpy LPAREN: ( ID: void TIMES: * ID: dst ID: const ID: void TIMES: * ID: src ID: size_t ID: size RPAREN: ) LBRACE: { NEWLINE: ID: uint8_t TIMES: * ID: p ID: dst SEMI: ; NEWLINE: ID: const ID: uint8_t TIMES: * ID: q ID: src SEMI: ; NEWLINE: ID: while LPAREN: ( ID: size MINUS: - MINUS: - RPAREN: ) LBRACE: { NEWLINE: TIMES: * ID: p PLUS: + PLUS: + TIMES: * ID: q PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: segment_tree TIMES: * ID: new_segment_tree LPAREN: ( ID: const ID: void TIMES: * ID: ini ID: const ID: int32_t ID: n ID: const ID: size_t ID: val_size ID: void LPAREN: ( TIMES: * ID: func RPAREN: ) LPAREN: ( ID: void TIMES: * ID: const ID: void TIMES: * ID: const ID: void TIMES: * RPAREN: ) RPAREN: ) LBRACE: { NEWLINE: ID: int32_t ID: k NUMBER: 1 SEMI: ; NEWLINE: ID: while LPAREN: ( ID: k ID: n RPAREN: ) ID: k TIMES: * NUMBER: 2 SEMI: ; NEWLINE: ID: segment_tree TIMES: * ID: s LPAREN: ( ID: segment_tree TIMES: * RPAREN: ) ID: calloc LPAREN: ( NUMBER: 1 ID: sizeof LPAREN: ( ID: segment_tree RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: s MINUS: - ID: array ID: calloc LPAREN: ( NUMBER: 2 TIMES: * ID: k ID: val_size RPAREN: ) SEMI: ; NEWLINE: ID: s MINUS: - ID: size ID: k SEMI: ; NEWLINE: ID: s MINUS: - ID: val_size ID: val_size SEMI: ; NEWLINE: ID: s MINUS: - ID: func ID: func SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int32_t ID: i ID: k SEMI: ; ID: i NUMBER: 2 TIMES: * ID: k SEMI: ; PLUS: + PLUS: + ID: i RPAREN: ) LBRACE: { NEWLINE: ID: segment_tree_memcpy LPAREN: ( LPAREN: ( ID: uint8_t TIMES: * RPAREN: ) ID: s MINUS: - ID: array PLUS: + ID: i TIMES: * ID: val_size ID: ini ID: val_size RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: uint8_t TIMES: * ID: a ID: s MINUS: - ID: array SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int32_t ID: i ID: k MINUS: - NUMBER: 1 SEMI: ; ID: i NUMBER: 0 SEMI: ; MINUS: - MINUS: - ID: i RPAREN: ) LBRACE: { NEWLINE: ID: func LPAREN: ( ID: a PLUS: + ID: i TIMES: * ID: val_size ID: a PLUS: + LPAREN: ( NUMBER: 2 TIMES: * ID: i RPAREN: ) TIMES: * ID: val_size ID: a PLUS: + LPAREN: ( NUMBER: 2 TIMES: * ID: i PLUS: + NUMBER: 1 RPAREN: ) TIMES: * ID: val_size RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: return ID: s SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: void ID: update LPAREN: ( ID: segment_tree TIMES: * ID: const ID: s ID: int32_t ID: k ID: const ID: void TIMES: * ID: val RPAREN: ) LBRACE: { NEWLINE: ID: k PLUS: + ID: s MINUS: - ID: size SEMI: ; NEWLINE: ID: uint8_t TIMES: * ID: const ID: p ID: s MINUS: - ID: array SEMI: ; NEWLINE: ID: const ID: size_t ID: size ID: s MINUS: - ID: val_size SEMI: ; NEWLINE: ID: segment_tree_memcpy LPAREN: ( ID: p PLUS: + ID: k TIMES: * ID: size ID: val ID: size RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: k NUMBER: 1 SEMI: ; ID: k NUMBER: 0 SEMI: ; ID: k NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: s MINUS: - ID: func LPAREN: ( ID: p PLUS: + ID: k TIMES: * ID: size ID: p PLUS: + NUMBER: 2 TIMES: * ID: k TIMES: * ID: size ID: p PLUS: + LPAREN: ( NUMBER: 2 TIMES: * ID: k PLUS: + NUMBER: 1 RPAREN: ) TIMES: * ID: size RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: void ID: update_tmp LPAREN: ( ID: segment_tree TIMES: * ID: const ID: s ID: int32_t ID: k ID: const ID: void TIMES: * ID: val RPAREN: ) LBRACE: { NEWLINE: ID: k PLUS: + ID: s MINUS: - ID: size SEMI: ; NEWLINE: ID: uint8_t TIMES: * ID: const ID: p ID: s MINUS: - ID: array SEMI: ; NEWLINE: ID: const ID: size_t ID: size ID: s MINUS: - ID: val_size SEMI: ; NEWLINE: ID: segment_tree_memcpy LPAREN: ( ID: p PLUS: + ID: k TIMES: * ID: size ID: val ID: size RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: void ID: update_all LPAREN: ( ID: segment_tree TIMES: * ID: const ID: s RPAREN: ) LBRACE: { NEWLINE: ID: uint8_t TIMES: * ID: const ID: a ID: s MINUS: - ID: array SEMI: ; NEWLINE: ID: const ID: size_t ID: size ID: s MINUS: - ID: val_size SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int32_t ID: i ID: s MINUS: - ID: size MINUS: - NUMBER: 1 SEMI: ; ID: i NUMBER: 0 SEMI: ; MINUS: - MINUS: - ID: i RPAREN: ) LBRACE: { NEWLINE: ID: s MINUS: - ID: func LPAREN: ( ID: a PLUS: + ID: i TIMES: * ID: size ID: a PLUS: + LPAREN: ( NUMBER: 2 TIMES: * ID: i RPAREN: ) TIMES: * ID: size ID: a PLUS: + LPAREN: ( NUMBER: 2 TIMES: * ID: i PLUS: + NUMBER: 1 RPAREN: ) TIMES: * ID: size RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: void ID: find LPAREN: ( ID: const ID: segment_tree TIMES: * ID: s ID: int32_t ID: l ID: int32_t ID: r ID: void TIMES: * ID: res RPAREN: ) LBRACE: { NEWLINE: ID: int32_t ID: lindex NUMBER: 64 SEMI: ; NEWLINE: ID: int32_t ID: rindex NUMBER: 32 SEMI: ; NEWLINE: ID: int32_t ID: llen NUMBER: 0 SEMI: ; NEWLINE: ID: int32_t ID: rlen NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: l PLUS: + ID: s MINUS: - ID: size ID: r PLUS: + ID: s MINUS: - ID: size SEMI: ; ID: l ID: r SEMI: ; ID: l NUMBER: 1 ID: r NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: l NUMBER: 1 RPAREN: ) ID: lindex ID: llen PLUS: + PLUS: + ID: l PLUS: + PLUS: + SEMI: ; NEWLINE: ID: if LPAREN: ( ID: r NUMBER: 1 RPAREN: ) ID: rindex ID: rlen PLUS: + PLUS: + MINUS: - MINUS: - ID: r SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: while LPAREN: ( ID: rlen NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: lindex ID: llen PLUS: + PLUS: + ID: rindex MINUS: - MINUS: - ID: rlen SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: const ID: uint8_t TIMES: * ID: p ID: s MINUS: - ID: array SEMI: ; NEWLINE: ID: segment_tree_memcpy LPAREN: ( ID: res ID: p PLUS: + ID: lindex NUMBER: 0 TIMES: * ID: s MINUS: - ID: val_size ID: s MINUS: - ID: val_size RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: int32_t ID: i NUMBER: 1 SEMI: ; ID: i ID: llen SEMI: ; PLUS: + PLUS: + ID: i RPAREN: ) LBRACE: { NEWLINE: ID: s MINUS: - ID: func LPAREN: ( ID: res ID: res ID: p PLUS: + ID: lindex ID: i TIMES: * ID: s MINUS: - ID: val_size RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: typedef ID: int32_t ID: i32 SEMI: ; NEWLINE: ID: void ID: func_max LPAREN: ( ID: void TIMES: * ID: c ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { NEWLINE: ID: i32 ID: p TIMES: * LPAREN: ( ID: i32 TIMES: * RPAREN: ) ID: a SEMI: ; NEWLINE: ID: i32 ID: q TIMES: * LPAREN: ( ID: i32 TIMES: * RPAREN: ) ID: b SEMI: ; NEWLINE: TIMES: * LPAREN: ( ID: i32 TIMES: * RPAREN: ) ID: c ID: p ID: q ID: p ID: q SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: void ID: run LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: i32 ID: n SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%" ID: SCNi32 ID: n RPAREN: ) SEMI: ; NEWLINE: ID: const ID: i32 ID: ini MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: segment_tree TIMES: * ID: s ID: new_segment_tree LPAREN: ( ID: ini ID: n PLUS: + NUMBER: 2 ID: sizeof LPAREN: ( ID: i32 RPAREN: ) ID: func_max RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i32 ID: i NUMBER: 1 SEMI: ; ID: i ID: n SEMI: ; PLUS: + PLUS: + ID: i RPAREN: ) LBRACE: { NEWLINE: ID: i32 ID: a SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%" ID: SCNi32 ID: a RPAREN: ) SEMI: ; NEWLINE: ID: update_tmp LPAREN: ( ID: s ID: i ID: a RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: update_all LPAREN: ( ID: s RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i32 ID: i NUMBER: 1 SEMI: ; ID: i ID: n SEMI: ; PLUS: + PLUS: + ID: i RPAREN: ) LBRACE: { NEWLINE: ID: i32 ID: x ID: y SEMI: ; NEWLINE: ID: find LPAREN: ( ID: s NUMBER: 0 ID: i ID: x RPAREN: ) SEMI: ; NEWLINE: ID: find LPAREN: ( ID: s ID: i PLUS: + NUMBER: 1 ID: n PLUS: + NUMBER: 2 ID: y RPAREN: ) SEMI: ; NEWLINE: ID: i32 ID: z ID: x ID: y ID: x ID: y SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%" ID: PRIi32 STRING: "\n" ID: z RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: run LPAREN: ( RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: