ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: n SEMI: ; NEWLINE: ID: int ID: a ID: b ID: c SEMI: ; NEWLINE: NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: a LPAREN: ( ID: int RPAREN: ) LPAREN: ( ID: n DIVIDE: / NUMBER: 100 RPAREN: ) SEMI: ; NEWLINE: ID: b LPAREN: ( ID: int RPAREN: ) LPAREN: ( LPAREN: ( ID: n MINUS: - NUMBER: 100 TIMES: * ID: a RPAREN: ) DIVIDE: / NUMBER: 10 RPAREN: ) SEMI: ; NEWLINE: ID: c LPAREN: ( ID: int RPAREN: ) LPAREN: ( ID: n MINUS: - NUMBER: 100 TIMES: * ID: a MINUS: - NUMBER: 10 TIMES: * ID: b RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: a NUMBER: 1 RPAREN: ) ID: a NUMBER: 9 SEMI: ; NEWLINE: ID: else ID: if LPAREN: ( ID: a NUMBER: 9 RPAREN: ) ID: a NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: b NUMBER: 1 RPAREN: ) ID: b NUMBER: 9 SEMI: ; NEWLINE: ID: else ID: if LPAREN: ( ID: b NUMBER: 9 RPAREN: ) ID: b NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: c NUMBER: 1 RPAREN: ) ID: c NUMBER: 9 SEMI: ; NEWLINE: ID: else ID: if LPAREN: ( ID: c NUMBER: 9 RPAREN: ) ID: c NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%d" NUMBER: 100 TIMES: * ID: a PLUS: + NUMBER: 10 TIMES: * ID: b PLUS: + ID: c RPAREN: ) SEMI: ; NEWLINE: RBRACE: }