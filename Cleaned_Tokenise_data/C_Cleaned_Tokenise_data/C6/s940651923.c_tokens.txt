ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: in ID: n NUMBER: 3 ID: out SEMI: ; NEWLINE: ID: int ID: i SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: in RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: n NUMBER: 0 ID: in DIVIDE: / NUMBER: 100 SEMI: ; NEWLINE: ID: n NUMBER: 1 ID: in DIVIDE: / NUMBER: 10 MINUS: - ID: n NUMBER: 0 TIMES: * NUMBER: 10 SEMI: ; NEWLINE: ID: n NUMBER: 2 ID: in MINUS: - LPAREN: ( ID: n NUMBER: 0 TIMES: * NUMBER: 100 PLUS: + ID: n NUMBER: 1 TIMES: * NUMBER: 10 RPAREN: ) SEMI: ; NEWLINE: COMMENT: //printf("%d\n", in - (n[0]*100 + n[1]*10)); NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i NUMBER: 3 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: n ID: i NUMBER: 1 RPAREN: ) NEWLINE: ID: n ID: i NUMBER: 9 SEMI: ; NEWLINE: ID: else ID: if LPAREN: ( ID: n ID: i NUMBER: 9 RPAREN: ) NEWLINE: ID: n ID: i NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: out ID: n NUMBER: 0 TIMES: * NUMBER: 100 PLUS: + ID: n NUMBER: 1 TIMES: * NUMBER: 10 PLUS: + ID: n NUMBER: 2 SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: out RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }