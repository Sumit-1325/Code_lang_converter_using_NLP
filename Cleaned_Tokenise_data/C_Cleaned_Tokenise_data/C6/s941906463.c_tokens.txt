ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: n ID: a NUMBER: 100000 ID: b NUMBER: 100000 ID: k ID: l ID: i ID: j ID: z ID: count NUMBER: 2 SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: i NUMBER: 2 NUMBER: 0 RPAREN: ) LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: a ID: i DIVIDE: / NUMBER: 2 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: b ID: i DIVIDE: / NUMBER: 2 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: count NUMBER: 0 NUMBER: 0 SEMI: ; NEWLINE: ID: count NUMBER: 1 NUMBER: 0 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n DIVIDE: / NUMBER: 2 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: k NUMBER: 1 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 0 SEMI: ; ID: j ID: n DIVIDE: / NUMBER: 2 SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: a ID: i ID: a ID: j RPAREN: ) LBRACE: { NEWLINE: ID: k PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: count NUMBER: 0 ID: k MINUS: - NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: count NUMBER: 0 ID: k MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: l ID: a ID: i SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i ID: n DIVIDE: / NUMBER: 2 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: k NUMBER: 1 SEMI: ; NEWLINE: ID: for LPAREN: ( ID: j NUMBER: 0 SEMI: ; ID: j ID: n DIVIDE: / NUMBER: 2 SEMI: ; ID: j PLUS: + PLUS: + RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: b ID: i ID: b ID: j RPAREN: ) LBRACE: { NEWLINE: ID: k PLUS: + PLUS: + SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: count NUMBER: 1 ID: k MINUS: - NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: count NUMBER: 1 ID: k MINUS: - NUMBER: 1 SEMI: ; NEWLINE: ID: z ID: b ID: i SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: z ID: l RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: n MINUS: - ID: count NUMBER: 1 MINUS: - ID: count NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: if LPAREN: ( ID: count NUMBER: 0 ID: count NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: n MINUS: - ID: count NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: n MINUS: - ID: count NUMBER: 0 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }