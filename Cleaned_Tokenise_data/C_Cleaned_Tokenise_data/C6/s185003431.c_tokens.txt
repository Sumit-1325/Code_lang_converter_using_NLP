ID: include ID: stdio ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: include ID: math ID: h NEWLINE: ID: include ID: stdlib ID: h NEWLINE: ID: include ID: limits ID: h NEWLINE: ID: include ID: stdbool ID: h NEWLINE: ID: define ID: rep LPAREN: ( ID: i ID: n RPAREN: ) ID: for LPAREN: ( ID: int ID: i NUMBER: 0 SEMI: ; ID: i LPAREN: ( ID: n RPAREN: ) SEMI: ; PLUS: + PLUS: + ID: i RPAREN: ) NEWLINE: ID: define ID: max NUMBER: 200001 NEWLINE: COMMENT: //qsort(str, n, sizeof(int), up_comp); NEWLINE: ID: int ID: up_comp LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { ID: return TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: a MINUS: - TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: b SEMI: ; RBRACE: } NEWLINE: ID: int ID: down_comp LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { ID: return TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: b MINUS: - TIMES: * LPAREN: ( ID: int TIMES: * RPAREN: ) ID: a SEMI: ; RBRACE: } NEWLINE: ID: int ID: int_sort LPAREN: ( ID: const ID: void TIMES: * ID: a ID: const ID: void TIMES: * ID: b RPAREN: ) LBRACE: { ID: return ID: strcmp LPAREN: ( LPAREN: ( ID: char TIMES: * RPAREN: ) ID: a LPAREN: ( ID: char TIMES: * RPAREN: ) ID: b RPAREN: ) SEMI: ; RBRACE: } NEWLINE: ID: int ID: count_digit LPAREN: ( ID: int ID: a RPAREN: ) LBRACE: { ID: int ID: i NUMBER: 0 SEMI: ; ID: while LPAREN: ( ID: a NUMBER: 0 RPAREN: ) LBRACE: { ID: a ID: a DIVIDE: / NUMBER: 10 SEMI: ; ID: i PLUS: + PLUS: + SEMI: ; RBRACE: } ID: return ID: i SEMI: ; RBRACE: } NEWLINE: ID: int ID: euclid LPAREN: ( ID: int ID: a ID: int ID: b RPAREN: ) LBRACE: { ID: int ID: temp SEMI: ; ID: if LPAREN: ( ID: a ID: b RPAREN: ) LBRACE: { ID: temp ID: a SEMI: ; ID: a ID: b SEMI: ; ID: b ID: temp SEMI: ; RBRACE: } ID: if LPAREN: ( ID: b NUMBER: 1 RPAREN: ) ID: return MINUS: - NUMBER: 1 SEMI: ; ID: if LPAREN: ( ID: a ID: b NUMBER: 0 RPAREN: ) ID: return ID: b SEMI: ; ID: return ID: euclid LPAREN: ( ID: b ID: a ID: b RPAREN: ) SEMI: ; RBRACE: } NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: NEWLINE: ID: char ID: a NUMBER: 3 SEMI: ; NEWLINE: NEWLINE: ID: scanf LPAREN: ( STRING: "%s" ID: a RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: rep LPAREN: ( ID: i NUMBER: 3 RPAREN: ) LBRACE: { NEWLINE: ID: if LPAREN: ( ID: a ID: i NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: a ID: i NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: a ID: i NUMBER: 9 RPAREN: ) LBRACE: { NEWLINE: ID: a ID: i NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%s" ID: a RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: