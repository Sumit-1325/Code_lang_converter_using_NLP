ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: ans NUMBER: 3 SEMI: ; NEWLINE: ID: int ID: s SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: s RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: ans NUMBER: 0 ID: s DIVIDE: / NUMBER: 100 SEMI: ; NEWLINE: ID: ans NUMBER: 1 ID: s DIVIDE: / NUMBER: 10 SEMI: ; NEWLINE: ID: ans NUMBER: 2 ID: s NUMBER: 10 SEMI: ; NEWLINE: NEWLINE: NEWLINE: ID: if LPAREN: ( ID: ans NUMBER: 0 NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: ans NUMBER: 0 NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: ans NUMBER: 0 NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: if LPAREN: ( ID: ans NUMBER: 1 NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: ans NUMBER: 1 NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: ans NUMBER: 1 NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: if LPAREN: ( ID: ans NUMBER: 2 NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: ans NUMBER: 2 NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: ans NUMBER: 2 NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%d" ID: ans NUMBER: 0 TIMES: * NUMBER: 100 PLUS: + ID: ans NUMBER: 1 TIMES: * NUMBER: 10 PLUS: + ID: ans NUMBER: 2 RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }