ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( ID: void RPAREN: ) LBRACE: { NEWLINE: ID: int ID: n ID: m ID: l SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: n RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: n DIVIDE: / NUMBER: 100 NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: m PLUS: + NUMBER: 900 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: m PLUS: + NUMBER: 100 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: n MINUS: - ID: m SEMI: ; NEWLINE: ID: if LPAREN: ( ID: n DIVIDE: / NUMBER: 10 NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: l PLUS: + NUMBER: 90 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: l PLUS: + NUMBER: 10 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: n MINUS: - ID: l SEMI: ; NEWLINE: ID: if LPAREN: ( ID: n NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: m PLUS: + ID: l PLUS: + NUMBER: 9 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: else LBRACE: { NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: m PLUS: + ID: l PLUS: + NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: RBRACE: } NEWLINE: NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }