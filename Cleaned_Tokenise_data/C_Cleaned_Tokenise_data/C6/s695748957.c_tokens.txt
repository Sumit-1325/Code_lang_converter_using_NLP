ID: include ID: stdio ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: int ID: num SEMI: ; NEWLINE: ID: int ID: digitsin NUMBER: 3 SEMI: ; NEWLINE: ID: int ID: digitsout NUMBER: 3 SEMI: ; NEWLINE: ID: int ID: i SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: num RPAREN: ) SEMI: ; NEWLINE: ID: digitsin NUMBER: 2 ID: num DIVIDE: / NUMBER: 100 SEMI: ; NEWLINE: ID: digitsin NUMBER: 1 LPAREN: ( ID: num MINUS: - NUMBER: 100 TIMES: * ID: digitsin NUMBER: 2 RPAREN: ) DIVIDE: / NUMBER: 10 SEMI: ; NEWLINE: ID: digitsin NUMBER: 0 LPAREN: ( ID: num MINUS: - NUMBER: 100 TIMES: * ID: digitsin NUMBER: 2 MINUS: - NUMBER: 10 TIMES: * ID: digitsin NUMBER: 1 RPAREN: ) SEMI: ; NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i NUMBER: 3 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: if LPAREN: ( ID: digitsin ID: i NUMBER: 1 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: digitsout ID: i NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else ID: if LPAREN: ( ID: digitsin ID: i NUMBER: 9 RPAREN: ) NEWLINE: LBRACE: { NEWLINE: ID: digitsout ID: i NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } ID: else NEWLINE: LBRACE: { NEWLINE: ID: digitsout ID: i ID: digitsin ID: i SEMI: ; NEWLINE: RBRACE: } NEWLINE: RBRACE: } NEWLINE: ID: for LPAREN: ( ID: i NUMBER: 0 SEMI: ; ID: i NUMBER: 3 SEMI: ; ID: i PLUS: + PLUS: + RPAREN: ) ID: printf LPAREN: ( STRING: "%d" ID: digitsout NUMBER: 2 MINUS: - ID: i RPAREN: ) SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "\n" RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: } NEWLINE: