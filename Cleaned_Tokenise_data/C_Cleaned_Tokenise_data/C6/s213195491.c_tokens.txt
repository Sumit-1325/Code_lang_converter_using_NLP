ID: include ID: stdio ID: h NEWLINE: ID: include ID: string ID: h NEWLINE: ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: input SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: input RPAREN: ) SEMI: ; NEWLINE: ID: int ID: a ID: input DIVIDE: / NUMBER: 100 SEMI: ; NEWLINE: ID: int ID: c ID: input NUMBER: 100 SEMI: ; NEWLINE: ID: int ID: b ID: input MINUS: - LPAREN: ( NUMBER: 100 TIMES: * ID: a PLUS: + ID: c RPAREN: ) SEMI: ; NEWLINE: ID: if LPAREN: ( ID: a NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: a NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: a NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: b NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: b NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: b NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: if LPAREN: ( ID: c NUMBER: 1 RPAREN: ) LBRACE: { NEWLINE: ID: c NUMBER: 9 SEMI: ; NEWLINE: RBRACE: } ID: else LBRACE: { NEWLINE: ID: c NUMBER: 1 SEMI: ; NEWLINE: RBRACE: } NEWLINE: ID: int ID: output NUMBER: 100 TIMES: * ID: a PLUS: + NUMBER: 10 TIMES: * ID: b PLUS: + ID: c SEMI: ; NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" ID: output RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }