ID: int ID: main LPAREN: ( RPAREN: ) LBRACE: { NEWLINE: ID: int ID: A SEMI: ; NEWLINE: ID: int ID: temp SEMI: ; NEWLINE: ID: scanf LPAREN: ( STRING: "%d" ID: A RPAREN: ) SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: A DIVIDE: / NUMBER: 100 NUMBER: 1 RPAREN: ) ID: temp NUMBER: 900 SEMI: ; NEWLINE: ID: if LPAREN: ( ID: A DIVIDE: / NUMBER: 100 NUMBER: 9 RPAREN: ) ID: temp NUMBER: 100 SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: A DIVIDE: / NUMBER: 10 NUMBER: 10 NUMBER: 1 RPAREN: ) ID: temp ID: temp PLUS: + NUMBER: 90 SEMI: ; NEWLINE: ID: if LPAREN: ( ID: A DIVIDE: / NUMBER: 10 NUMBER: 10 NUMBER: 9 RPAREN: ) ID: temp ID: temp PLUS: + NUMBER: 10 SEMI: ; NEWLINE: NEWLINE: ID: if LPAREN: ( ID: A NUMBER: 10 NUMBER: 10 NUMBER: 1 RPAREN: ) ID: temp ID: temp PLUS: + NUMBER: 9 SEMI: ; NEWLINE: ID: if LPAREN: ( ID: A NUMBER: 10 NUMBER: 10 NUMBER: 9 RPAREN: ) ID: temp ID: temp PLUS: + NUMBER: 1 SEMI: ; NEWLINE: NEWLINE: ID: printf LPAREN: ( STRING: "%d\n" LPAREN: ( ID: temp RPAREN: ) RPAREN: ) SEMI: ; NEWLINE: ID: return NUMBER: 0 SEMI: ; NEWLINE: RBRACE: }